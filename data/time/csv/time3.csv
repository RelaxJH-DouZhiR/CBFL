dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,2.77778,0
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,2.77778,0
defect4j,time,org/joda/time/DateTimeZone,3,931,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.92593,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.45455,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.44444,0
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.43103,0
defect4j,time,org/joda/time/MutableDateTime,3,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.43103,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.26042,0
defect4j,time,org/joda/time/MutableDateTime,3,1229,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.25510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.24038,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.22523,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));
",0,0,0,5,10,0,14,0,0,14,67,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,661,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));
",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,703,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,724,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));
",0,0,0,5,10,0,12,0,0,12,57,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,765,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16340,0
defect4j,time,org/joda/time/MutableDateTime,3,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0
defect4j,time,org/joda/time/MutableDateTime,3,473,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.15723,0
defect4j,time,org/joda/time/MutableDateTime,3,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.15723,0
defect4j,time,org/joda/time/base/BaseDateTime,3,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.14368,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.13298,0
defect4j,time,org/joda/time/MutableDateTime,3,636,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.12500,0
defect4j,time,org/joda/time/base/BaseDateTime,3,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11161,0
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.11062,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.10593,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.10163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.10163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.10121,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,"        return Constants.dt;
",4,0,0,0,0,1,0,0,0,4,20,5,0.09470,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09434,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09434,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.09363,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.09294,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.09294,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.09058,0
defect4j,time,org/joda/time/format/FormatUtils,3,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.09058,0
defect4j,time,org/joda/time/format/FormatUtils,3,74,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.09058,0
defect4j,time,org/joda/time/format/FormatUtils,3,75,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.09058,0
defect4j,time,org/joda/time/format/FormatUtils,3,77,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.09058,0
defect4j,time,org/joda/time/format/FormatUtils,3,78,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.09058,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,128,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.08993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1946,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.08961,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1947,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.08961,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1951,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.08961,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1959,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08961,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1961,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.08961,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,127,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.08929,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1590,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.08834,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.08834,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1592,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.08834,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1598,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.08834,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1599,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.08834,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,119,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.08834,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1475,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.08651,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.08651,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1479,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08651,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1480,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08651,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2660,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2661,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2665,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2670,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2671,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2674,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1218,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1219,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08591,0
defect4j,time,org/joda/time/DateTimeFieldType,3,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.08591,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,592,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.08532,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,593,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.08532,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,594,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.08532,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,469,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.08503,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,470,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.08503,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,471,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.08503,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,472,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08503,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,628,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,629,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,632,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,633,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,634,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,635,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,641,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.08418,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,642,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08418,0
defect4j,time,org/joda/time/DateTimeZone,3,926,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.08389,0
defect4j,time,org/joda/time/DateTimeZone,3,927,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.08389,0
defect4j,time,org/joda/time/DateTimeZone,3,928,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.08389,0
defect4j,time,org/joda/time/DateTimeZone,3,929,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.08389,0
defect4j,time,org/joda/time/DateTimeZone,3,930,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.08389,0
defect4j,time,org/joda/time/format/FormatUtils,3,83,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.08224,0
defect4j,time,org/joda/time/format/FormatUtils,3,80,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.08197,0
defect4j,time,org/joda/time/format/FormatUtils,3,82,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.08197,0
defect4j,time,org/joda/time/format/FormatUtils,3,87,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.08197,0
defect4j,time,org/joda/time/format/FormatUtils,3,90,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.08197,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.07692,0
defect4j,time,org/joda/time/DateTimeUtils,3,199,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.07669,0
defect4j,time,org/joda/time/DateTimeUtils,3,200,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.07669,0
defect4j,time,org/joda/time/DateTimeUtils,3,203,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07669,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.07645,0
defect4j,time,org/joda/time/DateTimeUtils,3,196,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07530,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.07508,0
defect4j,time,org/joda/time/format/FormatUtils,3,63,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.07418,0
defect4j,time,org/joda/time/format/FormatUtils,3,64,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,9,0.07418,0
defect4j,time,org/joda/time/format/FormatUtils,3,66,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.07418,0
defect4j,time,org/joda/time/DateTimeUtils,3,181,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.07184,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.07163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.07163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.07163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.07143,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.07143,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.07143,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.07143,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,144,"        return localInstant;
",2,0,0,0,0,1,0,0,0,2,20,4,0.07102,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1190,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1307,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1308,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1309,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1314,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1322,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1325,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1333,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1335,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.07022,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1546,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.07022,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,138,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.07022,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,139,"        int offset = zone.getOffsetFromLocal(localInstant);
",2,0,0,1,2,0,6,0,0,8,51,5,0.07022,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,140,"        localInstant -= offset;
",4,0,0,0,0,0,0,0,0,5,23,4,0.07022,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,141,"        if (offset != zone.getOffset(localInstant)) {
",2,1,0,2,5,0,6,0,0,9,45,4,0.07022,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,118,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.07003,0
defect4j,time,org/joda/time/DateTimeUtils,3,178,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06983,0
defect4j,time,org/joda/time/format/FormatUtils,3,67,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.06983,0
defect4j,time,org/joda/time/DateTimeFieldType,3,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.06944,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06887,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06887,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06887,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2654,"            return iPrintedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,30,5,0.06887,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.06720,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.06720,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,667,"        DateTimePrinter printer = iPrinter;
",4,0,0,0,0,0,0,2,0,6,35,4,0.06702,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,668,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,671,"        return printer;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.06702,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.06702,0
defect4j,time,org/joda/time/DateTimeZone,3,925,"        } else if (offsetLocal >= 0) {
",2,1,0,1,4,0,0,0,0,3,30,5,0.06614,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1202,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1203,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1204,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1209,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1211,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1221,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1224,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1226,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1236,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1238,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1582,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1583,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1586,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.06596,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.06579,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.06562,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.06562,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.06562,0
defect4j,time,org/joda/time/format/FormatUtils,3,50,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06494,0
defect4j,time,org/joda/time/format/FormatUtils,3,62,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.06494,0
defect4j,time,org/joda/time/format/FormatUtils,3,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06494,0
defect4j,time,org/joda/time/field/MillisDurationField,3,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.06427,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,951,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.06394,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,952,"        if (iChrono != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06394,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,955,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.06394,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,958,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06394,0
defect4j,time,org/joda/time/DateTimeZone,3,907,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.06361,0
defect4j,time,org/joda/time/DateTimeZone,3,909,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.06361,0
defect4j,time,org/joda/time/DateTimeZone,3,910,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.06361,0
defect4j,time,org/joda/time/DateTimeZone,3,912,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.06361,0
defect4j,time,org/joda/time/format/FormatUtils,3,31,"    private static final double LOG_10 = Math.log(10);
",2,0,0,1,2,3,4,0,0,9,50,2,0.06297,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,59,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.06188,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,62,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.06188,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.06188,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,64,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.06188,0
defect4j,time,org/joda/time/field/FieldUtils,3,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.06188,0
defect4j,time,org/joda/time/field/FieldUtils,3,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.06188,0
defect4j,time,org/joda/time/field/FieldUtils,3,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06188,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,543,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.06068,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,552,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.06068,0
defect4j,time,org/joda/time/DateTimeFieldType,3,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.05938,0
defect4j,time,org/joda/time/DateTimeFieldType,3,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.05855,0
defect4j,time,org/joda/time/DateTimeFieldType,3,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.05841,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,164,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,182,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2730,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,60,10,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);
",4,0,0,3,6,0,4,2,0,10,58,10,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2778,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2779,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2780,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2783,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,153,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,154,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,155,"            return (DateTimeParser) f;
",2,0,0,1,2,1,0,2,0,4,26,7,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,217,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,220,"        return append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,1,10,0,0,10,62,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,257,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,258,"        return append0(null, parser);
",0,0,0,1,2,1,4,0,0,5,29,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,305,"        if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,308,"        if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,311,"        int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,312,"        if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,319,"        DateTimeParser[] copyOfParsers = new DateTimeParser[length];
",2,0,1,2,4,0,0,4,0,8,60,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,321,"        for (i = 0; i < length - 1; i++) {
",8,2,0,1,3,0,0,0,0,12,34,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,322,"            if ((copyOfParsers[i] = parsers[i]) == null) {
",0,1,1,4,9,0,0,0,0,10,46,6,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,326,"        copyOfParsers[i] = parsers[i];
",0,0,1,2,4,0,0,0,0,9,30,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,328,"        return append0(printer, new MatchingParser(copyOfParsers));
",2,0,0,2,4,1,4,2,0,8,59,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,345,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};
",4,0,0,3,6,0,0,4,0,8,63,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,347,"        return append0(null, new MatchingParser(parsers));
",2,0,0,2,4,1,2,2,0,8,50,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,357,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,360,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,383,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,384,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,385,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,386,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,464,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,467,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,470,"        return append0(new FixedNumber(fieldType, numDigits, false));
",4,0,0,2,4,1,2,2,0,9,61,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1150,"                    f = parser;
",4,0,0,0,0,0,0,0,0,5,11,10,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1171,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2794,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2795,"            iParsers = parsers;
",4,0,0,0,0,0,0,0,0,5,19,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2796,"            int est = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2797,"            for (int i=parsers.length; --i>=0 ;) {
",8,1,0,1,3,0,0,0,0,10,38,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2798,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2799,"                if (parser != null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2800,"                    int len = parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,6,40,10,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2801,"                    if (len > est) {
",4,1,0,1,3,0,0,0,0,5,16,9,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2802,"                        est = len;
",4,0,0,0,0,0,0,0,0,5,10,11,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2805,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2806,"            iParsedLengthEstimate = est;
",4,0,0,0,0,0,0,0,0,5,28,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2807,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2810,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1522,"            super(fieldType, numDigits, signed, numDigits);
",8,0,0,1,2,0,0,0,0,8,47,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1523,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1136,"    static final class Constants {
",2,0,0,0,1,2,0,0,0,4,30,2,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1138,"            ye = yearElement(),  // year element (yyyy)
",2,0,0,2,4,0,2,0,0,4,43,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1139,"            mye = monthElement(), // monthOfYear element (-MM)
",2,0,0,2,4,0,2,0,0,4,50,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1140,"            dme = dayOfMonthElement(), // dayOfMonth element (-dd)
",2,0,0,2,4,0,2,0,0,4,54,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1141,"            we = weekyearElement(),  // weekyear element (xxxx)
",2,0,0,2,4,0,2,0,0,4,51,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1142,"            wwe = weekElement(), // weekOfWeekyear element (-ww)
",2,0,0,2,4,0,2,0,0,4,52,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1143,"            dwe = dayOfWeekElement(), // dayOfWeek element (-ee)
",2,0,0,2,4,0,2,0,0,4,52,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1144,"            dye = dayOfYearElement(), // dayOfYear element (-DDD)
",2,0,0,2,4,0,2,0,0,4,53,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1145,"            hde = hourElement(), // hourOfDay element (HH)
",2,0,0,2,4,0,2,0,0,4,46,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1146,"            mhe = minuteElement(), // minuteOfHour element (:mm)
",2,0,0,2,4,0,2,0,0,4,52,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1147,"            sme = secondElement(), // secondOfMinute element (:ss)
",2,0,0,2,4,0,2,0,0,4,54,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1148,"            fse = fractionElement(), // fractionOfSecond element (.SSSSSSSSS)
",2,0,0,2,4,0,2,0,0,4,65,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1149,"            ze = offsetElement(),  // zone offset element
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1150,"            lte = literalTElement(), // literal 'T' element
",2,0,0,1,2,0,2,0,0,4,47,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1153,"            ym = yearMonth(),  // year month
",2,0,0,1,2,0,2,0,0,4,32,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1154,"            ymd = yearMonthDay(), // year month day
",2,0,0,1,2,0,2,0,0,4,39,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1157,"            ww = weekyearWeek(),  // weekyear week
",2,0,0,1,2,0,2,0,0,4,38,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1158,"            wwd = weekyearWeekDay(), // weekyear week day
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1161,"            hm = hourMinute(),   // hour minute
",2,0,0,1,2,0,2,0,0,4,35,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1162,"            hms = hourMinuteSecond(),  // hour minute second
",2,0,0,1,2,0,2,0,0,4,48,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1163,"            hmsl = hourMinuteSecondMillis(), // hour minute second millis
",2,0,0,1,2,0,2,0,0,4,61,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1164,"            hmsf = hourMinuteSecondFraction(), // hour minute second fraction
",2,0,0,1,2,0,2,0,0,4,65,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1166,"            dh = dateHour(),    // date hour
",2,0,0,1,2,0,2,0,0,4,32,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1167,"            dhm = dateHourMinute(),   // date hour minute
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1168,"            dhms = dateHourMinuteSecond(),  // date hour minute second
",2,0,0,1,2,0,2,0,0,4,58,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1169,"            dhmsl = dateHourMinuteSecondMillis(), // date hour minute second millis
",2,0,0,1,2,0,2,0,0,4,71,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1170,"            dhmsf = dateHourMinuteSecondFraction(), // date hour minute second fraction
",2,0,0,1,2,0,2,0,0,4,75,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1173,"            t = time(),  // time
",2,0,0,1,2,0,2,0,0,4,20,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1174,"            tx = timeNoMillis(),  // time no millis
",2,0,0,1,2,0,2,0,0,4,39,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1175,"            tt = tTime(),  // Ttime
",2,0,0,1,2,0,2,0,0,4,23,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1176,"            ttx = tTimeNoMillis(),  // Ttime no millis
",2,0,0,1,2,0,2,0,0,4,42,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1177,"            dt = dateTime(), // date time
",2,0,0,1,2,0,2,0,0,4,29,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1178,"            dtx = dateTimeNoMillis(), // date time no millis
",2,0,0,1,2,0,2,0,0,4,48,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1181,"            wdt = weekDateTime(), // week date time
",2,0,0,1,2,0,2,0,0,4,39,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1182,"            wdtx = weekDateTimeNoMillis(), // week date time no millis
",2,0,0,1,2,0,2,0,0,4,58,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1184,"            od = ordinalDate(),  // ordinal date (same as yd)
",2,0,0,2,4,0,2,0,0,4,49,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1185,"            odt = ordinalDateTime(), // ordinal date time
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1186,"            odtx = ordinalDateTimeNoMillis(), // ordinal date time no millis
",2,0,0,1,2,0,2,0,0,4,64,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1188,"            bd = basicDate(),  // basic date
",2,0,0,1,2,0,2,0,0,4,32,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1189,"            bt = basicTime(),  // basic time
",2,0,0,1,2,0,2,0,0,4,32,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1190,"            btx = basicTimeNoMillis(),  // basic time no millis
",2,0,0,1,2,0,2,0,0,4,51,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1191,"            btt = basicTTime(), // basic Ttime
",2,0,0,1,2,0,2,0,0,4,34,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1192,"            bttx = basicTTimeNoMillis(), // basic Ttime no millis
",2,0,0,1,2,0,2,0,0,4,53,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1193,"            bdt = basicDateTime(), // basic date time
",2,0,0,1,2,0,2,0,0,4,41,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1194,"            bdtx = basicDateTimeNoMillis(), // basic date time no millis
",2,0,0,1,2,0,2,0,0,4,60,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1196,"            bod = basicOrdinalDate(),  // basic ordinal date
",2,0,0,1,2,0,2,0,0,4,48,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1197,"            bodt = basicOrdinalDateTime(), // basic ordinal date time
",2,0,0,1,2,0,2,0,0,4,57,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1198,"            bodtx = basicOrdinalDateTimeNoMillis(), // basic ordinal date time no millis
",2,0,0,1,2,0,2,0,0,4,76,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1200,"            bwd = basicWeekDate(),  // basic week date
",2,0,0,1,2,0,2,0,0,4,42,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1201,"            bwdt = basicWeekDateTime(), // basic week date time
",2,0,0,1,2,0,2,0,0,4,51,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1202,"            bwdtx = basicWeekDateTimeNoMillis(), // basic week date time no millis
",2,0,0,1,2,0,2,0,0,4,70,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1204,"            dpe = dateElementParser(), // date parser element
",2,0,0,1,2,0,2,0,0,4,49,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1205,"            tpe = timeElementParser(), // time parser element
",2,0,0,1,2,0,2,0,0,4,49,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1206,"            dp = dateParser(),  // date parser
",2,0,0,1,2,0,2,0,0,4,34,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1207,"            ldp = localDateParser(), // local date parser
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1208,"            tp = timeParser(),  // time parser
",2,0,0,1,2,0,2,0,0,4,34,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1209,"            ltp = localTimeParser(), // local time parser
",2,0,0,1,2,0,2,0,0,4,45,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1210,"            dtp = dateTimeParser(), // date time parser
",2,0,0,1,2,0,2,0,0,4,43,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1211,"            dotp = dateOptionalTimeParser(), // date optional time parser
",2,0,0,1,2,0,2,0,0,4,61,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1212,"            ldotp = localDateOptionalTimeParser(); // local date optional time parser
",2,0,0,1,2,0,2,0,0,4,73,4,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1216,"            if (dp == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1217,"                DateTimeParser tOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,55,7,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1220,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1229,"            if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1230,"                return dateElementParser().withZoneUTC();
",0,0,0,2,4,1,4,0,0,4,41,8,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1236,"            if (dpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1237,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1259,"            return dpe;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1263,"            if (tp == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1264,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1274,"            if (ltp == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1275,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1284,"            if (tpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1286,"                DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,7,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1297,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1333,"            return tpe;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1337,"            if (dtp == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1340,"                DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,7,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1345,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1353,"            if (dotp == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1354,"                DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,7,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1359,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1368,"            if (ldotp == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1369,"                DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,7,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1373,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1383,"            if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1384,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1389,"            return t;
",2,0,0,0,0,1,0,0,0,2,9,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1393,"            if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1394,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1399,"            return tx;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1403,"            if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1404,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1409,"            return tt;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1413,"            if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1414,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1419,"            return ttx;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1423,"            if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1424,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1433,"            if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1434,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1443,"            if (od == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1444,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1449,"            return od;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1453,"            if (odt == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1454,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1463,"            if (odtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1464,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1473,"            if (wdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1474,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1483,"            if (wdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1484,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1494,"            if (bd == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1495,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1501,"            return bd;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1505,"            if (bt == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1506,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,16,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1515,"            return bt;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1519,"            if (btx == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1520,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,14,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1527,"            return btx;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1531,"            if (btt == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1532,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1537,"            return btt;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1541,"            if (bttx == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1542,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1547,"            return bttx;
",2,0,0,0,0,1,0,0,0,2,12,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1551,"            if (bdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1552,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1561,"            if (bdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1562,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1571,"            if (bod == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1572,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1577,"            return bod;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1581,"            if (bodt == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1582,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1591,"            if (bodtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1592,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1601,"            if (bwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1602,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,14,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1609,"            return bwd;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1613,"            if (bwdt == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1614,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1623,"            if (bwdtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1624,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1634,"            if (ym == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1635,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1644,"            if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1645,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1655,"            if (ww == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1656,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1665,"            if (wwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1666,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1676,"            if (hm == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1677,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1682,"            return hm;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1686,"            if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1687,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1693,"            return hms;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1697,"            if (hmsl == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1698,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,15,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1706,"            return hmsl;
",2,0,0,0,0,1,0,0,0,2,12,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1710,"            if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1711,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,14,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1718,"            return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1722,"            if (dh == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1723,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1733,"            if (dhm == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1734,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1744,"            if (dhms == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1745,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1755,"            if (dhmsl == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1756,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1766,"            if (dhmsf == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1767,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,13,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1778,"            if (ye == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1779,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1783,"            return ye;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1787,"            if (mye == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1788,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1793,"            return mye;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1797,"            if (dme == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1798,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1803,"            return dme;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1807,"            if (we == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1808,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1812,"            return we;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1816,"            if (wwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1817,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1822,"            return wwe;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1826,"            if (dwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1827,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1832,"            return dwe;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1836,"            if (dye == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1837,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1842,"            return dye;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1846,"            if (lte == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1847,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1851,"            return lte;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1855,"            if (hde == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1856,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1860,"            return hde;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1864,"            if (mhe == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1865,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1870,"            return mhe;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1874,"            if (sme == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1875,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1880,"            return sme;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1884,"            if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1885,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,12,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1892,"            return fse;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1896,"            if (ze == null) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1897,"                return new DateTimeFormatterBuilder()
",0,0,0,1,2,1,0,2,0,2,37,11,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1901,"            return ze;
",2,0,0,0,0,1,0,0,0,2,10,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,662,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,784,"        return Constants.wwd;
",4,0,0,0,0,1,0,0,0,4,21,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,995,"        return Constants.ymd;
",4,0,0,0,0,1,0,0,0,4,21,5,0.05760,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1033,"        return Constants.hde;
",4,0,0,0,0,1,0,0,0,4,21,5,0.05760,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2623,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.05734,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2624,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.05734,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.05734,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2139,"                est += iMinFields - 1;
",4,1,0,0,0,0,0,0,0,6,22,7,0.05734,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1299,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.05721,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,408,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,411,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,417,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,570,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,573,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,576,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));
",6,0,0,2,4,1,2,2,0,10,62,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2137,"            int est = 1 + iMinFields << 1;
",4,2,0,0,0,0,0,0,0,6,30,6,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2138,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2141,"            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
",4,3,0,2,5,0,4,0,0,11,74,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2144,"            return est;
",2,0,0,0,0,1,0,0,0,2,11,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2274,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1895,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1896,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1898,"            if (maxDigits > 18) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1901,"            iMinDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1902,"            iMaxDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1906,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2064,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1270,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1271,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1272,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1275,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1401,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1405,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.05708,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.05695,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.05669,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.05669,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,68,5,0.05631,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1091,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.05618,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.05618,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2121,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2122,"            iZeroOffsetPrintText = zeroOffsetPrintText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2123,"            iZeroOffsetParseText = zeroOffsetParseText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2124,"            iShowSeparators = showSeparators;
",4,0,0,0,0,0,0,0,0,5,33,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2125,"            if (minFields <= 0 || maxFields < minFields) {
",6,3,0,1,3,0,0,0,0,9,46,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2128,"            if (minFields > 4) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2132,"            iMinFields = minFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2133,"            iMaxFields = maxFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2134,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05568,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1142,"                Object printer = iElementPairs.get(0);
",2,0,0,1,2,0,4,2,0,8,38,8,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1143,"                Object parser = iElementPairs.get(1);
",2,0,0,1,2,0,4,2,0,8,37,8,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1145,"                if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1146,"                    if (printer == parser || parser == null) {
",6,3,0,1,3,0,0,0,0,9,42,10,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1147,"                        f = printer;
",4,0,0,0,0,0,0,0,0,5,12,12,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1169,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.05543,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1179,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.05543,0
defect4j,time,org/joda/time/DateTimeFieldType,3,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.05507,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,486,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.05459,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,489,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.05459,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,492,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.05459,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,495,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.05459,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));
",6,0,0,2,4,1,2,2,0,11,72,7,0.05459,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.05459,0
defect4j,time,org/joda/time/DateTimeFieldType,3,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.05447,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,67,5,0.05435,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,310,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.05423,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,330,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.05423,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,333,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.05423,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.05308,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,137,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,138,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,139,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,140,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,141,"        iOffsetParsed = offsetParsed;
",4,0,0,0,0,0,0,0,0,5,29,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,142,"        iChrono = chrono;
",4,0,0,0,0,0,0,0,0,5,17,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,143,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,144,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,145,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,69,5,0.05208,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,66,5,0.05208,0
defect4j,time,org/joda/time/field/FieldUtils,3,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.05112,0
defect4j,time,org/joda/time/field/FieldUtils,3,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.05112,0
defect4j,time,org/joda/time/field/FieldUtils,3,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,434,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04980,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,437,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.04980,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,440,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.04980,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,443,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04980,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));
",6,0,0,2,4,1,2,2,0,11,73,7,0.04980,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1468,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.04960,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1326,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.04960,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1463,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1464,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1465,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1319,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1320,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1321,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1322,"            iSigned = signed;
",4,0,0,0,0,0,0,0,0,5,17,5,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1323,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04950,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2626,"                int size = printerList.size();
",2,0,0,1,2,0,4,0,0,6,30,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2627,"                iPrinters = new DateTimePrinter[size];
",2,0,1,1,2,0,0,2,0,7,38,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2628,"                int printEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2629,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2630,"                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
",2,0,0,2,4,0,6,4,0,12,63,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2631,"                    printEst += printer.estimatePrintedLength();
",2,0,0,1,2,0,4,0,0,7,44,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2632,"                    iPrinters[i] = printer;
",2,0,1,1,2,0,0,0,0,7,23,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2634,"                iPrintedLengthEstimate = printEst;
",4,0,0,0,0,0,0,0,0,5,34,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2641,"                int size = parserList.size();
",2,0,0,1,2,0,4,0,0,6,29,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2642,"                iParsers = new DateTimeParser[size];
",2,0,1,1,2,0,0,2,0,7,36,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2643,"                int parseEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2644,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2645,"                    DateTimeParser parser = (DateTimeParser) parserList.get(i);
",2,0,0,2,4,0,6,4,0,12,59,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2646,"                    parseEst += parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,7,42,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2647,"                    iParsers[i] = parser;
",2,0,1,1,2,0,0,0,0,7,21,9,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2649,"                iParsedLengthEstimate = parseEst;
",4,0,0,0,0,0,0,0,0,5,33,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2761,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2762,"                if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2765,"                    printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,10,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2768,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2769,"                if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,8,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2772,"                    parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,10,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1212,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1236,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04941,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,397,"        return append0(new CharacterLiteral(c));
",2,0,0,2,4,1,2,2,0,6,40,5,0.04931,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1207,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04931,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1208,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.04931,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1209,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04931,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2615,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2617,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2618,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2620,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2622,"            if (printerList.contains(null) || printerList.isEmpty()) {
",0,1,0,3,7,0,8,0,0,9,58,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2637,"            if (parserList.contains(null) || parserList.isEmpty()) {
",0,1,0,3,7,0,8,0,0,9,56,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2651,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2747,"            return iPrinters != null;
",2,1,0,0,0,1,0,0,0,3,25,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2751,"            return iParsers != null;
",2,1,0,0,0,1,0,0,0,3,24,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2759,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2760,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2775,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1155,"                f = new Composite(iElementPairs);
",4,0,0,1,2,0,0,2,0,7,33,8,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1167,"                return ((Composite)f).isPrinter();
",2,0,0,3,6,1,2,2,0,6,34,9,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1177,"                return ((Composite)f).isParser();
",2,0,0,3,6,1,2,2,0,6,33,9,0.04921,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,118,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,119,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,120,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,121,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,122,"        iOffsetParsed = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,123,"        iChrono = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,124,"        iZone = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,125,"        iPivotYear = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,126,"        iDefaultYear = 2000;
",2,0,0,0,0,0,0,0,0,3,20,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,105,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,106,"        DateTimePrinter printer = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,107,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,108,"            printer = (DateTimePrinter) f;
",4,0,0,1,2,0,0,2,0,7,30,6,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,110,"        DateTimeParser parser = null;
",2,0,0,0,0,0,0,2,0,4,29,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,111,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,112,"            parser = (DateTimeParser) f;
",4,0,0,1,2,0,0,2,0,7,28,6,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,114,"        if (printer != null || parser != null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,115,"            return new DateTimeFormatter(printer, parser);
",4,0,0,1,2,1,0,2,0,6,46,7,0.04780,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,374,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.04771,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,376,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.04771,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,377,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.04771,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,378,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04771,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1138,"        Object f = iFormatter;
",4,0,0,0,0,0,0,2,0,6,22,4,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1140,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1141,"            if (iElementPairs.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,32,6,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1154,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1158,"            iFormatter = f;
",4,0,0,0,0,0,0,0,0,5,15,6,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1161,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1165,"        if (f instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1166,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1175,"        if (f instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1176,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.04762,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,84,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04753,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,85,"        iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,4,0.04753,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04753,0
defect4j,time,org/joda/time/DateTimeFieldType,3,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.04318,0
defect4j,time,org/joda/time/DateTimeFieldType,3,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.04318,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,81,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.04013,0
defect4j,time,org/joda/time/base/BaseDateTime,3,304,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.03900,0
defect4j,time,org/joda/time/base/BaseDateTime,3,295,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.03201,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1543,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.03181,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1579,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.03079,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.02969,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.02969,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.02854,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02677,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,57,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.02646,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,542,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02640,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.02604,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,113,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.02604,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,134,"        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
",4,3,0,3,6,1,4,0,0,11,69,6,0.02599,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,466,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,467,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,56,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02599,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,97,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,301,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,304,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,305,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.02599,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,310,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.02599,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,132,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.02596,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,83,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.02591,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,85,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.02591,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,560,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.02585,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,79,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.02583,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,81,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.02583,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02583,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,493,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.02577,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,494,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.02577,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,559,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02577,0
defect4j,time,org/joda/time/field/FieldUtils,3,233,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.02523,0
defect4j,time,org/joda/time/field/FieldUtils,3,238,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02523,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,160,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1536,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1537,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1573,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1574,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1575,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1576,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,103,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,140,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,141,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,142,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,143,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,144,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,145,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,146,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,148,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,152,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,153,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,155,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,156,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,158,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,159,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,166,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,180,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,177,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,178,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,181,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,182,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,196,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,197,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,198,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.02500,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,200,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.02500,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1531,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.02498,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1532,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.02498,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1533,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.02498,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.02488,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,443,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.02480,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,73,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.02480,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.02392,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,80,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.02356,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.02356,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.02352,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.02328,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.02328,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.02323,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02319,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.02317,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02317,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,456,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.02317,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,457,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.02317,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,458,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.02317,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,48,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.02317,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.02315,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.02315,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,476,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.02315,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,477,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.02315,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,478,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.02315,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,55,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.02315,0
defect4j,time,org/joda/time/base/BaseDateTime,3,256,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.02311,0
defect4j,time,org/joda/time/base/BaseDateTime,3,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,407,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,408,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,409,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,412,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,414,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,415,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,417,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,419,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.02311,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,436,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02311,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.02311,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.02311,0
defect4j,time,org/joda/time/base/BaseDateTime,3,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02302,0
defect4j,time,org/joda/time/base/BaseDateTime,3,253,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.02302,0
defect4j,time,org/joda/time/base/BaseDateTime,3,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,75,5,0.02302,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.02287,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,614,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.02287,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.02285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.02285,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,611,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.02283,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.02283,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,690,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.02283,0
defect4j,time,org/joda/time/field/FieldUtils,3,251,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.02283,0
defect4j,time,org/joda/time/field/FieldUtils,3,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02283,0
defect4j,time,org/joda/time/DurationFieldType,3,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.02273,0
defect4j,time,org/joda/time/DateTimeUtils,3,547,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,548,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,549,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,100,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,101,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,114,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,115,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,161,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,162,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02187,0
defect4j,time,org/joda/time/DateTimeUtils,3,165,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02187,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,393,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.02178,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,394,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.02178,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,395,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.02178,0
defect4j,time,org/joda/time/DateTimeZone,3,175,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,176,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,179,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,182,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,183,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,184,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02163,0
defect4j,time,org/joda/time/DateTimeZone,3,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02163,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,368,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,746,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,747,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,748,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,749,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,751,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,779,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,780,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,781,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.02146,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,782,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02146,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02119,0
defect4j,time,org/joda/time/DateTimeZone,3,148,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02113,0
defect4j,time,org/joda/time/DateTimeZone,3,134,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,135,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,136,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,137,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,138,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,139,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,142,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,143,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,144,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,149,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,154,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,155,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,158,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,160,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02111,0
defect4j,time,org/joda/time/DateTimeZone,3,162,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02111,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,123,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.02068,0
defect4j,time,org/joda/time/base/BaseDateTime,3,284,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02056,0
defect4j,time,org/joda/time/base/BaseDateTime,3,270,"        return DateTimeUtils.getChronology(chronology);
",0,0,0,1,2,1,6,0,0,6,47,5,0.02042,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02037,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02037,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,129,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,6,0.02029,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,57,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02002,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,59,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.02002,0
defect4j,time,org/joda/time/DateTimeZone,3,1273,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.01998,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,281,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,282,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,285,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,286,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,287,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,295,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,81,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,55,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,58,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,59,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,62,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,65,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,71,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,85,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,154,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,155,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,156,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,157,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,158,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,159,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,160,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,162,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,163,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,164,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,165,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,166,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,170,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,174,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,180,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,197,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,198,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,200,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,201,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,204,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,205,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,209,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,212,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,215,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,220,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,221,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,404,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,405,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,408,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,409,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,410,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,411,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,412,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,413,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.01998,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,414,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01998,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,128,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.01998,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,132,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01998,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.01998,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01997,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01997,0
defect4j,time,org/joda/time/field/BaseDurationField,3,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01997,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,128,"        if (iRangeDurationField != null) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.01997,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,173,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01997,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,180,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01997,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.01997,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.01997,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.01997,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01997,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,102,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.01997,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,112,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.01997,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,95,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.01997,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,335,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.01997,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,209,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01997,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,221,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.01997,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,161,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.01997,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.01997,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.01997,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.01997,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.01997,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01997,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01997,0
defect4j,time,org/joda/time/field/MillisDurationField,3,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.01997,0
defect4j,time,org/joda/time/field/MillisDurationField,3,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.01997,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,123,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01995,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,52,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.01995,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,96,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01995,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,316,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.01995,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,142,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01990,0
defect4j,time,org/joda/time/base/AbstractInstant,3,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01987,0
defect4j,time,org/joda/time/base/AbstractInstant,3,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01987,0
defect4j,time,org/joda/time/DateTimeUtils,3,287,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01984,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,173,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,175,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,177,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.01981,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,48,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,42,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,53,"        return GregorianChronology.getInstanceUTC().eras();
",0,0,0,2,4,1,6,0,0,6,51,5,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,94,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01981,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,98,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.01981,0
defect4j,time,org/joda/time/DateTimeUtils,3,284,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01978,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.01976,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.01975,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.01965,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01958,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01958,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.01956,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01956,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,699,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.01956,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.01955,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,58,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,60,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,64,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,65,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,66,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,70,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,49,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,51,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,55,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,56,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,60,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,151,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,155,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01955,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,250,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,251,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,252,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,253,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,254,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,255,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,256,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,258,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,259,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,260,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,261,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,262,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,263,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,264,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,265,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,266,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,267,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,268,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,273,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,277,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,279,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,281,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,283,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,285,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,288,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,289,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,290,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,291,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,292,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,293,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,294,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,296,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,298,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,303,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,304,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,305,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,306,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.01955,0
defect4j,time,org/joda/time/field/BaseDurationField,3,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01955,0
defect4j,time,org/joda/time/field/BaseDurationField,3,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDurationField,3,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01955,0
defect4j,time,org/joda/time/field/BaseDurationField,3,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/BaseDurationField,3,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,58,"        this(field, field.getRangeDurationField(), type, divisor);
",6,0,0,2,4,0,4,0,0,10,58,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,72,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,73,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,76,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,77,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,80,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,83,"        iRangeDurationField = rangeField;
",4,0,0,0,0,0,0,0,0,5,33,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,84,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,85,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,86,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,87,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,88,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,89,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,90,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,211,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,56,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,59,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,62,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,71,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,87,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,91,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,82,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,83,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,86,"        iRangeField = rangeField;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,87,"        iDurationField = field.getDurationField();
",2,0,0,1,2,0,4,0,0,7,42,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,88,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,98,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,109,"        this(dividedField, dividedField.getWrappedField().getDurationField(), type);
",4,0,0,3,6,0,6,0,0,10,76,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,122,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,123,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,124,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,125,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,189,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01955,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,199,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.01955,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,42,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,42,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01955,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01955,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,46,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,47,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.01955,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.01955,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,760,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,46,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.01955,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,120,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,56,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,57,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,58,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,138,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,42,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,48,"        return iChronology.eras();
",0,0,0,1,2,1,4,0,0,4,26,5,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,100,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01955,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,104,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,47,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,59,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,74,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,76,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,80,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,82,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,83,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,87,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,88,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,175,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,184,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,47,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.01955,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,48,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,46,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,38,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.01955,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,52,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.01955,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,53,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,54,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,55,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,45,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,43,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,44,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01955,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,152,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,153,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01955,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,154,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01955,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.01955,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01955,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01955,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01955,0
defect4j,time,org/joda/time/field/MillisDurationField,3,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01955,0
defect4j,time,org/joda/time/DateTimeFieldType,3,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.01955,0
defect4j,time,org/joda/time/DurationFieldType,3,278,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.01953,0
defect4j,time,org/joda/time/DurationField,3,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.01953,0
defect4j,time,org/joda/time/DateTimeField,3,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.01953,0
defect4j,time,org/joda/time/DateTimeFieldType,3,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01953,0
defect4j,time,org/joda/time/DateTimeFieldType,3,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01953,0
defect4j,time,org/joda/time/DateTimeFieldType,3,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.01953,0
defect4j,time,org/joda/time/DateTimeFieldType,3,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.01953,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01953,0
defect4j,time,org/joda/time/Chronology,3,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.01952,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01952,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01952,0
defect4j,time,org/joda/time/DurationFieldType,3,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01950,0
defect4j,time,org/joda/time/DateTimeFieldType,3,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01950,0
defect4j,time,org/joda/time/DurationFieldType,3,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01949,0
defect4j,time,org/joda/time/DurationFieldType,3,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01949,0
defect4j,time,org/joda/time/DateTimeUtils,3,41,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,43,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,49,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();
",2,0,0,1,2,0,0,12,0,14,74,4,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,50,"        map.put(""UT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,32,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,51,"        map.put(""UTC"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,52,"        map.put(""GMT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,53,"        put(map, ""EST"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,54,"        put(map, ""EDT"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,55,"        put(map, ""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,56,"        put(map, ""CDT"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,57,"        put(map, ""MST"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,58,"        put(map, ""MDT"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,59,"        put(map, ""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,60,"        put(map, ""PDT"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,61,"        cZoneNames = Collections.unmodifiableMap(map);
",2,0,0,1,2,0,6,0,0,9,46,4,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,65,"            map.put(name, DateTimeZone.forID(id));
",0,0,0,2,4,0,12,0,0,12,38,7,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,68,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01925,0
defect4j,time,org/joda/time/DateTimeUtils,3,526,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.01925,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01920,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,714,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,715,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,718,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,719,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,116,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,117,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,205,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,208,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,211,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,212,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,213,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,443,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,444,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,446,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,447,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,451,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,457,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,458,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,459,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,471,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,474,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");
",2,0,0,1,2,0,4,2,0,9,81,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,475,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,484,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,486,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,488,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,491,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,494,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,498,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,539,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,540,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,542,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,543,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,554,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,557,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,566,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,568,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,569,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,572,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01920,0
defect4j,time,org/joda/time/DateTimeZone,3,731,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1179,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1180,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1181,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1182,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1169,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1503,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1504,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1505,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1506,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1507,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1508,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1509,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1344,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1345,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1346,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1347,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1350,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1351,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1352,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1353,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1354,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1356,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1357,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1358,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1359,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1362,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1363,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1367,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1370,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1373,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1374,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1375,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1378,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,84,"    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,2,4,3,0,4,0,12,73,2,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.01920,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,135,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,139,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,140,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,144,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,146,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,149,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,151,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,152,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,153,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,154,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,173,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,195,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,198,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,199,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,200,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,204,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,213,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,223,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,225,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,226,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,227,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,228,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,235,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,236,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,239,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,251,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,252,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,254,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,257,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,261,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,262,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,273,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,274,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,275,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,276,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,280,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,281,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,283,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,286,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,288,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.01920,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.01920,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.01920,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.01920,0
defect4j,time,org/joda/time/DurationFieldType,3,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00389,0
defect4j,time,org/joda/time/DurationFieldType,3,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00389,0
defect4j,time,org/joda/time/DateTimeUtils,3,556,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,75,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,66,"        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,88,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,129,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,130,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,131,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,133,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,148,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,149,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,151,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,152,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,153,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,163,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,179,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,197,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,201,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,219,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,220,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,221,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,222,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,223,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,225,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,226,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,228,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,243,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,244,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,246,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,247,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,248,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,250,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,266,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,267,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,268,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,270,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,285,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,301,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,302,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,304,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,318,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,319,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,321,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,335,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,336,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,338,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,366,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,367,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,369,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,370,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,371,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,372,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,373,"                if (loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType) {
",2,3,0,4,9,0,10,0,0,15,107,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,374,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,377,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,379,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,397,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,398,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,399,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,400,"            return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,429,"        return cZoneNames;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,441,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
",4,0,0,2,4,0,4,6,0,15,83,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,442,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,468,"        double epochDay = epochMillis / 86400000d;
",4,1,0,0,0,0,0,0,0,5,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,469,"        return epochDay + 2440587.5d;
",2,1,0,0,0,1,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,488,"        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
",0,1,0,3,6,1,8,0,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,501,"        double epochDay = julianDay - 2440587.5d;
",4,1,0,0,0,0,0,0,0,5,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,502,"        return (long) (epochDay * 86400000d);
",2,1,0,2,4,1,0,0,0,3,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,571,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,572,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,573,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,580,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,885,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,886,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,887,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,888,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,889,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,890,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,892,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,893,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,894,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,895,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,896,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,897,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,900,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,901,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,902,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,903,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,904,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,905,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,908,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,912,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,916,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,920,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,924,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,931,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,932,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,934,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,92,"            FixedDateTimeZone other = (FixedDateTimeZone) obj;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,3,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,716,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,146,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,150,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,152,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,156,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,206,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,209,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,216,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,217,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,218,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,220,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,221,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,238,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,273,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,274,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,276,"        if (hoursOffset < -23 || hoursOffset > 23) {
",4,3,0,1,3,0,0,0,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);
",2,1,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,279,"        if (minutesOffset < -59 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,8,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,282,"        if (hoursOffset > 0 && minutesOffset < 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,102,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,285,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,287,"            int hoursInMinutes = hoursOffset * 60;
",4,1,0,0,0,0,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,288,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,289,"                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
",4,1,0,1,2,0,6,0,0,12,57,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,291,"                minutesOffset = hoursInMinutes + minutesOffset;
",6,1,0,0,0,0,0,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,296,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,294,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,295,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,297,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,307,"        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
",8,3,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);
",2,1,0,1,2,0,0,2,0,6,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,310,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,311,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,330,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,331,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,333,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,334,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,335,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,339,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,340,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,341,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,342,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,344,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,345,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,347,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,348,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,352,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,353,"            convId = zone.getID();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,355,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,356,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,357,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,358,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,360,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,361,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,377,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,378,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,380,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,384,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,385,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,386,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,387,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,388,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,393,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,402,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,415,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,429,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,430,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,433,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,434,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,448,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,477,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,480,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,478,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,479,"                    throw new RuntimeException(ex);
",2,0,0,1,2,0,0,2,0,4,31,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,482,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,489,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,490,"                ex.printStackTrace();
",0,0,0,1,2,0,4,0,0,4,21,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,495,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,511,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,525,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,526,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,529,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,559,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,562,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,560,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,561,"                    throw new RuntimeException(ex);
",2,0,0,1,2,0,0,2,0,4,31,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,564,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,583,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,584,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,586,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,587,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,588,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,589,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,590,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,591,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,592,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,593,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,594,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,595,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,596,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,597,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,598,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,599,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,600,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,601,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,602,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,603,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,604,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,605,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,606,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,607,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,608,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,609,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,610,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,611,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,612,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,613,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,614,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,615,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,616,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,617,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,618,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,619,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,620,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,622,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,628,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,643,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,656,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,657,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,658,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,660,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,661,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,664,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,666,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,668,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,669,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,671,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,672,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,673,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,676,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,677,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,679,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,680,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,681,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,684,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,686,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,695,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,696,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,700,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,754,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,769,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,770,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,772,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,773,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,774,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,777,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,778,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,780,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,794,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,809,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,810,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,812,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,813,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,814,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,816,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,817,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,818,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,820,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,838,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,839,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,841,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,869,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,915,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,919,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,920,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,921,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,922,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,924,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,935,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,949,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,950,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,952,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,955,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,976,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,977,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,978,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,979,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,980,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,982,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,999,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1001,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1003,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1007,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1009,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1010,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1011,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1013,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1014,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1015,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1017,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1019,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1021,"                        throw new IllegalInstantException(instantLocal, getID());
",2,0,0,2,4,0,2,2,0,6,57,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1026,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1032,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1034,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1037,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1051,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1052,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1054,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1055,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1057,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1168,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1169,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1172,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1173,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1174,"        } catch (IllegalInstantException ex) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1175,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1190,"        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1191,"        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1192,"        long offsetBefore = getOffset(instantBefore);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1193,"        long offsetAfter = getOffset(instantAfter);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1194,"        if (offsetBefore <= offsetAfter) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)
",2,0,0,1,2,1,0,0,0,2,77,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1199,"        long diff = offsetBefore - offsetAfter;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1200,"        long transition = nextTransition(instantBefore);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1201,"        long overlapStart = transition - diff;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1202,"        long overlapEnd = transition + diff;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1203,"        if (instant < overlapStart || instant >= overlapEnd) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1204,"          return instant;  // not an overlap
",2,0,0,0,0,1,0,0,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1208,"        long afterStart = instant - overlapStart;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1209,"        if (afterStart >= diff) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1211,"          return earlierOrLater ? instant : instant - diff;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1214,"          return earlierOrLater ? instant + diff : instant;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1256,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1281,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1291,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,3,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,3,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,53,"        super(message);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,63,"        super(createMessage(instantLocal, zoneId));
",0,0,0,2,4,0,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));
",4,0,0,3,6,0,6,4,0,15,111,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");
",6,2,0,2,4,0,0,2,0,13,58,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;
",4,1,0,1,2,1,0,0,0,6,115,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,80,"        if (ex instanceof IllegalInstantException) {
",2,0,0,1,3,0,0,2,0,4,44,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,81,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,83,"        while (ex.getCause() != null && ex.getCause() != ex) {
",2,3,0,3,7,0,8,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,84,"            return isIllegalInstant(ex.getCause());
",0,0,0,2,4,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,3,86,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,628,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,631,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,634,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,637,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,640,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,3,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,155,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,173,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,198,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,199,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,201,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,212,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,231,"        if (iOffsetParsed == true) {
",2,1,0,1,3,0,0,0,0,4,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,232,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,234,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,245,"        return iOffsetParsed;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,266,"        if (iChrono == chrono) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,267,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,269,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,279,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,290,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,331,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,343,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,377,"        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
",6,4,0,3,7,0,6,0,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,378,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,380,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,414,"        return withPivotYear(Integer.valueOf(pivotYear));
",0,0,0,2,4,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,424,"      return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,447,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,458,"      return iDefaultYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,481,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,482,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,483,"        printTo(out, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,484,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,494,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,495,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,506,"        printTo(buf, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,507,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,517,"        printTo(out, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,529,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,543,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,544,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,545,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,547,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,548,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,560,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,561,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,562,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,564,"        printer.printTo(out, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,578,"        appendable.append(print(partial));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,579,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,607,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,608,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,609,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,622,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,623,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,624,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,637,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,638,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,639,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,645,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,646,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,649,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,650,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,651,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,652,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,654,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,655,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,656,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,658,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,659,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,669,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,709,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,710,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,711,"            throw new IllegalArgumentException(""Instant must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,714,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,715,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,716,"        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);
",2,0,0,3,6,0,12,0,0,14,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,717,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,718,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,720,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,722,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,723,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,724,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,725,"            int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,726,"            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,727,"            chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,728,"        } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,729,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,731,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,732,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,733,"            instant.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,735,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,751,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,753,"        Chronology chrono = selectChronology(iChrono);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,754,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,755,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,756,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,757,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,758,"                return bucket.computeMillis(true, text);
",0,0,0,1,2,1,6,0,0,7,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,761,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,763,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,781,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,799,"        return parseLocalDateTime(text).toLocalTime();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,817,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,819,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,820,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,821,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,822,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,823,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,824,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,825,"                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,83,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,826,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,827,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,828,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,829,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,830,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,832,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,835,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,837,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,858,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,860,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,861,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,862,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,863,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,864,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,865,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,866,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,867,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,868,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,869,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,870,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,871,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,873,"                DateTime dt = new DateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,874,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,875,"                    dt = dt.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,24,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,877,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,880,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,882,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,903,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,905,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,906,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,907,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,908,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,909,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,910,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,911,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,912,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,913,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,914,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,915,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,916,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,918,"                MutableDateTime dt = new MutableDateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,919,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,920,"                    dt.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,18,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,922,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,925,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,927,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,936,"        DateTimeParser parser = iParser;
",4,0,0,0,0,0,0,2,0,6,32,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,937,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,938,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,940,"        return parser;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,953,"            chrono = iChrono;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,3,956,"            chrono = chrono.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,965,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,966,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,967,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,968,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,973,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,974,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,975,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,976,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,977,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,978,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,979,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,980,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,950,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,951,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,952,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,984,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,988,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,989,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,992,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,993,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,994,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,997,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,998,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1000,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1003,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1004,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1005,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1014,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1016,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1021,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1027,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1028,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1029,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1032,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1033,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1035,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1036,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1037,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1040,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1041,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1045,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1046,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1047,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1048,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1050,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1052,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1056,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1064,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1066,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1069,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1070,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1085,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1088,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1089,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1091,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1092,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1093,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1094,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1095,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1096,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1097,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1101,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1103,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1104,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1106,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1108,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1109,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1113,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1114,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1118,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1119,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1121,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1123,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1127,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1134,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1135,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1137,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1144,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1145,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1146,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1147,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1157,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1161,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,191,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,192,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,194,"        if (obj instanceof ISOChronology) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,195,"            ISOChronology chrono = (ISOChronology) obj;
",4,0,0,1,2,0,0,4,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,196,"            return getZone().equals(chrono.getZone());
",0,0,0,3,6,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,198,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,217,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,824,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,828,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,833,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,837,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,841,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,845,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,847,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,848,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,851,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,852,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,854,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,857,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,859,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,862,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,865,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,867,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,868,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,869,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,871,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,875,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1186,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1194,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1198,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1213,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1215,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1218,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1220,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1228,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1230,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1233,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1235,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1257,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1259,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1262,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1264,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1272,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1274,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1277,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1279,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1286,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1287,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1289,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1290,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1291,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1297,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1301,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1302,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1303,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1304,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1316,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1319,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1321,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1327,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1330,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1332,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1365,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1368,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1369,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1392,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1393,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1394,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1397,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1398,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1399,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1400,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1402,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1403,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1404,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1406,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1407,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1410,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1411,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1412,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1413,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1415,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1420,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1421,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1422,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1423,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1424,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1425,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1429,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1431,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1432,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1433,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1434,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1435,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1436,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1437,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1438,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1439,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1446,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1447,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1448,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1451,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1452,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1453,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1454,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1455,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1460,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1461,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1463,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1464,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1467,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1468,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1474,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1483,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1512,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1513,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1514,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1515,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1517,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1518,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1519,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1520,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1522,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1524,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1525,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1527,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1534,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1538,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1539,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1541,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1544,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1550,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1551,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1552,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1553,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1555,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1556,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1557,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1558,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1560,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1562,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1563,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1565,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1569,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1577,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1580,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1584,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1593,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1594,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1596,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1600,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1601,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1602,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1603,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1606,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1614,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1615,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1616,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1618,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1622,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1623,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1625,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1626,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1627,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1637,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1641,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1644,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1645,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1646,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1649,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1650,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1651,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1653,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1654,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1655,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1656,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1660,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1661,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1662,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1665,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1667,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1668,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1669,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1670,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1673,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1674,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1675,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1676,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1677,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1679,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1681,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1686,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1687,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1688,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1690,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1693,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1694,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1696,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1697,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1698,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1703,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1704,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1706,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1707,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1708,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1709,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1710,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1714,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1715,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1716,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1717,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1724,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1728,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,95,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,99,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,107,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,111,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,115,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,130,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,131,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,136,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,141,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,157,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,161,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,182,"        ex.printStackTrace();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,196,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,202,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,205,"                StringBuilder buf = new StringBuilder(40)
",2,0,0,1,2,0,0,4,0,6,41,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,210,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,238,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,229,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,230,"            uncaughtException(ex);
",0,0,0,1,2,0,4,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,231,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,232,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,234,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,258,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,260,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,256,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,284,"            } catch (ArrayIndexOutOfBoundsException ex) {
",2,0,0,1,4,0,0,2,0,4,45,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,3,285,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,186,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,187,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,188,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,190,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,192,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,206,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,207,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,208,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,210,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,212,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,3,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,266,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,267,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,272,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,288,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,290,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,296,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,300,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,306,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,308,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,311,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,321,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,323,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,325,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,327,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,329,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,331,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,333,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,335,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,337,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,339,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,341,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,343,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,345,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,348,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,3,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DurationField,3,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,3,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,3,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,3,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,3,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,3,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2638,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2639,"                iParsedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2662,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2679,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2680,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2681,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2684,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2686,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2689,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2690,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2693,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2696,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2697,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2698,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2701,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2703,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2706,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2707,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2708,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2710,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2713,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2714,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2715,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2718,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2720,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2723,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2724,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2725,"                elements[i].printTo(out, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2727,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2734,"            DateTimeParser[] elements = iParsers;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2735,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2736,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2739,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2740,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2741,"                position = elements[i].parseInto(bucket, text, position);
",2,0,1,2,4,0,8,0,0,15,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2743,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,133,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,134,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,135,"            return (DateTimePrinter) f;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,137,"        throw new UnsupportedOperationException(""Printing is not supported"");
",0,0,0,1,2,0,0,2,0,3,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");
",0,0,0,1,2,0,0,2,0,3,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,168,"        return isFormatter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,178,"        return isPrinter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,188,"        return isParser(getFormatter());
",0,0,0,2,4,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,197,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,198,"        iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,218,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,238,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,239,"        return append0(printer, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,276,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,277,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,278,"        return append0(printer, parser);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,306,"            checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,309,"            throw new IllegalArgumentException(""No parsers supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,313,"            if (parsers[0] == null) {
",0,1,1,2,5,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,314,"                throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,316,"            return append0(printer, parsers[0]);
",0,0,1,2,4,1,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,323,"                throw new IllegalArgumentException(""Incomplete parser array"");
",0,0,0,1,2,0,0,2,0,3,62,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,358,"            throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,368,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,369,"            throw new IllegalArgumentException(""No printer supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,371,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,409,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,413,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,415,"                return append0(new CharacterLiteral(text.charAt(0)));
",0,0,0,3,6,1,6,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,435,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,438,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,441,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,465,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,487,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,490,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,493,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));
",4,0,0,2,4,1,2,2,0,9,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,516,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,517,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,519,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,522,"        return append0(new FixedNumber(fieldType, numDigits, true));
",4,0,0,2,4,1,2,2,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,534,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,535,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,537,"        return append0(new TextField(fieldType, false));
",2,0,0,2,4,1,2,2,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,549,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,550,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,552,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,571,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,574,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,577,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,851,"        return appendTwoDigitYear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,891,"        return appendTwoDigitWeekyear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,955,"        return appendText(DateTimeFieldType.halfdayOfDay());
",0,0,0,2,4,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,965,"        return appendText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,976,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,987,"        return appendText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,997,"        return appendShortText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1007,"        return appendText(DateTimeFieldType.era());
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,72,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1032,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,73,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1058,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
",8,0,0,1,2,1,2,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1118,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1132,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1133,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1181,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1185,"        return (isPrinter(f) || isParser(f));
",0,1,0,3,6,1,8,0,0,9,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1189,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1190,"            buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1192,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1195,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1196,"            out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2814,"            DateTimeParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2815,"            int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2817,"            final Object originalState = bucket.saveState();
",2,0,0,1,2,1,4,2,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2818,"            boolean isOptional = false;
",2,0,0,0,0,0,0,0,0,3,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2820,"            int bestValidPos = position;
",4,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2821,"            Object bestValidState = null;
",2,0,0,0,0,0,0,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2823,"            int bestInvalidPos = position;
",4,0,0,0,0,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2825,"            for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2826,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2827,"                if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2829,"                    if (bestValidPos <= position) {
",4,1,0,1,3,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2830,"                        return position;
",2,0,0,0,0,1,0,0,0,2,16,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2832,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2833,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2835,"                int parsePos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,56,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2836,"                if (parsePos >= position) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2837,"                    if (parsePos > bestValidPos) {
",4,1,0,1,3,0,0,0,0,5,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2838,"                        if (parsePos >= text.length() ||
",2,3,0,1,3,0,4,0,0,9,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2843,"                            return parsePos;
",2,0,0,0,0,1,0,0,0,2,16,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2845,"                        bestValidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,24,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2846,"                        bestValidState = bucket.saveState();
",2,0,0,1,2,0,4,0,0,7,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2849,"                    if (parsePos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2850,"                        parsePos = ~parsePos;
",4,0,0,0,0,0,0,0,0,6,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2851,"                        if (parsePos > bestInvalidPos) {
",4,1,0,1,3,0,0,0,0,5,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2852,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2856,"                bucket.restoreState(originalState);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2859,"            if (bestValidPos > position || (bestValidPos == position && isOptional)) {
",10,4,0,2,5,0,0,0,0,14,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2861,"                if (bestValidState != null) {
",2,1,0,1,3,0,0,0,0,3,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2862,"                    bucket.restoreState(bestValidState);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2864,"                return bestValidPos;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2867,"            return ~bestInvalidPos;
",2,0,0,0,0,1,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,172,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,173,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,185,"        super(zone);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,199,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,200,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,210,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,211,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,223,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,224,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,237,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,238,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,257,"        super(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,280,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,281,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,300,"        super(instant, DateTimeUtils.getChronology(chronology));
",2,0,0,2,4,0,6,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,301,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,324,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
",14,0,0,1,2,0,0,0,0,14,94,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,325,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,380,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,382,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,106,"        return new MutableDateTime();
",0,0,0,1,2,1,0,2,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,118,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,119,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,121,"        return new MutableDateTime(zone);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,133,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,134,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,136,"        return new MutableDateTime(chronology);
",2,0,0,1,2,1,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,150,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
",0,0,0,3,6,1,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,161,"        return formatter.parseDateTime(str).toMutableDateTime();
",0,0,0,2,4,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,392,"        return iRoundingField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,402,"        return iRoundingMode;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,418,"        setRounding(field, MutableDateTime.ROUND_FLOOR);
",4,0,0,1,2,0,4,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,419,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,436,"        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {
",10,5,0,2,5,0,0,0,0,15,69,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,437,"            throw new IllegalArgumentException(""Illegal rounding mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,69,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,439,"        iRoundingField = (mode == ROUND_NONE ? null : field);
",8,1,0,1,2,0,0,0,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,440,"        iRoundingMode = (field == null ? ROUND_NONE : mode);
",8,1,0,1,2,0,0,0,0,10,52,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,441,"        setMillis(getMillis());
",0,0,0,2,4,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,442,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,458,"                instant = iRoundingField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,45,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,459,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,461,"                instant = iRoundingField.roundCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,47,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,462,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,464,"                instant = iRoundingField.roundHalfFloor(instant);
",2,0,0,1,2,0,6,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,465,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,467,"                instant = iRoundingField.roundHalfCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,468,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,470,"                instant = iRoundingField.roundHalfEven(instant);
",2,0,0,1,2,0,6,0,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,485,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,486,"        setMillis(instantMillis);  // set via this class not super
",0,0,0,1,2,0,4,0,0,4,58,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,487,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,497,"        setMillis(FieldUtils.safeAdd(getMillis(), duration));  // set via this class not super
",0,0,0,3,6,0,10,0,0,10,86,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,498,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,509,"        add(duration, 1);
",0,0,0,1,2,0,4,0,0,4,17,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,510,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,522,"        if (duration != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,523,"            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));
",0,0,0,3,6,0,12,0,0,12,59,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,525,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,536,"        add(period, 1);
",0,0,0,1,2,0,4,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,537,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,549,"        if (period != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,550,"            setMillis(getChronology().add(period, getMillis(), scalar));  // set via this class not super
",0,0,0,4,8,0,12,0,0,12,93,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,563,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,564,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,582,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,583,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,584,"        if (chrono.getZone() != newZone) {
",2,1,0,2,5,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,585,"            setChronology(chrono.withZone(newZone));  // set via this class not super
",0,0,0,2,4,0,8,0,0,8,73,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,587,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,601,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,602,"        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());
",2,0,0,2,4,0,6,2,0,10,61,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,603,"        if (newZone == originalZone) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,604,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,607,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());
",2,0,0,2,4,0,8,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,608,"        setChronology(getChronology().withZone(newZone));  // set via this class not super
",0,0,0,3,6,0,8,0,0,8,82,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,609,"        setMillis(millis);
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,610,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,621,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,622,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,624,"        setMillis(type.getField(getChronology()).set(getMillis(), value));
",0,0,0,5,10,0,14,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,625,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,637,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,650,"        setMillis(getChronology().year().set(getMillis(), year));
",0,0,0,5,10,0,12,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,651,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,671,"        setMillis(getChronology().weekyear().set(getMillis(), weekyear));
",0,0,0,5,10,0,12,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,672,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,681,"            setMillis(getChronology().weekyears().add(getMillis(), weekyears));
",0,0,0,5,10,0,12,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,682,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,692,"        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
",0,0,0,5,10,0,12,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,693,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,713,"        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
",0,0,0,5,10,0,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,714,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,734,"        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
",0,0,0,5,10,0,12,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,735,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,744,"        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
",0,0,0,5,10,0,12,0,0,12,69,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,745,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,754,"        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
",0,0,0,5,10,0,12,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,755,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,775,"        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));
",0,0,0,5,10,0,12,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,776,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,796,"        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));
",0,0,0,5,10,0,12,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,797,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,806,"        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));
",0,0,0,5,10,0,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,807,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,816,"            setMillis(getChronology().minutes().add(getMillis(), minutes));
",0,0,0,5,10,0,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,817,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,827,"        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));
",0,0,0,5,10,0,12,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,828,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,837,"        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));
",0,0,0,5,10,0,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,838,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,847,"            setMillis(getChronology().seconds().add(getMillis(), seconds));
",0,0,0,5,10,0,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,848,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,858,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));
",0,0,0,5,10,0,12,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,859,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,868,"        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));
",0,0,0,5,10,0,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,869,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,880,"            setMillis(getChronology().millis().add(getMillis(), millis));
",0,0,0,5,10,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,time,org/joda/time/MutableDateTime,3,892,"        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));
",0,0,0,5,10,0,12,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,893,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,906,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,907,"        if (instant instanceof ReadableDateTime) {
",2,0,0,1,3,0,0,2,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,908,"            ReadableDateTime rdt = (ReadableDateTime) instant;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,909,"            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());
",2,0,0,2,4,0,8,2,0,12,76,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,910,"            DateTimeZone zone = instantChrono.getZone();
",2,0,0,1,2,0,4,2,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,911,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,912,"                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);
",2,0,0,2,4,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,915,"        setDate(instantMillis);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,916,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,931,"        Chronology c = getChronology();
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,932,"        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,933,"        setDate(instantMidnight);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,934,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,945,"        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);
",2,0,0,3,6,0,10,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,946,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));
",0,0,0,5,10,0,12,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,947,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,957,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,958,"        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,959,"        DateTimeZone zone = instantChrono.getZone();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,960,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,961,"            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);
",6,0,0,1,2,0,6,0,0,13,73,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,963,"        setTime(instantMillis);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,964,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,981,"        long instant = getChronology().getDateTimeMillis(
",2,0,0,1,3,0,4,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,983,"        setMillis(instant);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,984,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1006,"        long instant = getChronology().getDateTimeMillis(
",2,0,0,1,3,0,4,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1008,"        setMillis(instant);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1009,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1021,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1022,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1024,"        DateTimeField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1025,"        if (field.isSupported() == false) {
",0,1,0,2,5,0,4,0,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1026,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1028,"        return new Property(this, field);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1037,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1046,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1055,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1064,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1073,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1082,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1091,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1100,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1109,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1120,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1131,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1141,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1150,"        return new Property(this, getChronology().minuteOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1159,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1168,"        return new Property(this, getChronology().secondOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1177,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1186,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1195,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1205,"        return (MutableDateTime) clone();
",0,0,0,2,4,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1216,"            return super.clone();
",2,0,0,1,2,1,0,0,0,2,21,7,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1217,"        } catch (CloneNotSupportedException ex) {
",2,0,0,1,4,0,0,2,0,4,41,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1218,"            throw new InternalError(""Clone error"");
",0,0,0,1,2,0,0,2,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,97,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,124,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,125,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,126,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,168,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,169,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));
",2,0,0,2,4,0,10,0,0,13,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);
",2,0,0,2,4,0,12,0,0,15,85,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,3,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,66,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,69,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,79,"        return getChronology().era().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,88,"        return getChronology().centuryOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,97,"        return getChronology().yearOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,106,"        return getChronology().yearOfCentury().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,115,"        return getChronology().year().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,130,"        return getChronology().weekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,139,"        return getChronology().monthOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,153,"        return getChronology().weekOfWeekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,162,"        return getChronology().dayOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,173,"        return getChronology().dayOfMonth().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,184,"        return getChronology().dayOfWeek().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,194,"        return getChronology().hourOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,203,"        return getChronology().minuteOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,212,"        return getChronology().minuteOfHour().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,221,"        return getChronology().secondOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,230,"        return getChronology().secondOfMinute().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,239,"        return getChronology().millisOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,248,"        return getChronology().millisOfSecond().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,270,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,271,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,273,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
",2,0,0,2,4,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,275,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,276,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,294,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,295,"        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
",2,0,0,2,4,0,4,4,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,296,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,297,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,308,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,309,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,311,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,322,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,323,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,3,325,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,89,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,92,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,104,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,106,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,124,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,127,"        return field.get(getMillis());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,146,"        return new DateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,165,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,166,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,167,"        return new DateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,191,"        return new MutableDateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,210,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,211,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,212,"        return new MutableDateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,222,"        return new MutableDateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,235,"        return new Date(getMillis());
",0,0,0,2,4,1,2,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,259,"        if (this == readableInstant) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,278,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,296,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,297,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,300,"        long otherMillis = other.getMillis();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,301,"        long thisMillis = getMillis();
",2,0,0,1,2,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,304,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,305,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,307,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,308,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,310,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,323,"        return (getMillis() > instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,333,"        return isAfter(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,344,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,345,"        return isAfter(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,357,"        return (getMillis() < instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,367,"        return isBefore(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,378,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,379,"        return isBefore(instantMillis);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,391,"        return (getMillis() == instant);
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,401,"        return isEqual(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,412,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,413,"        return isEqual(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,436,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,437,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,439,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,3,55,"public abstract class AbstractInstant implements ReadableInstant {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1526,"            int newPos = super.parseInto(bucket, text, position);
",10,0,0,1,2,0,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1527,"            if (newPos < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1528,"                return newPos;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1530,"            int expectedPos = position + iMaxParsedDigits;
",6,1,0,0,0,0,0,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1531,"            if (newPos != expectedPos) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1532,"                if (iSigned) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1533,"                    char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1534,"                    if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1535,"                        expectedPos++;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1538,"                if (newPos > expectedPos) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1540,"                    return ~(expectedPos + 1);
",2,1,0,1,2,1,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1541,"                } else if (newPos < expectedPos) {
",4,1,0,1,4,0,0,0,0,5,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1543,"                    return ~newPos;
",2,0,0,0,0,1,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1546,"            return newPos;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1477,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1478,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1486,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,75,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1490,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1488,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1489,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1491,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1494,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1499,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1497,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1498,"                    appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1501,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1503,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1506,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,80,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1511,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1509,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1510,"                    printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1513,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,65,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1332,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1333,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1334,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1335,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1336,"                if (length == 0 && (c == '-' || c == '+') && iSigned) {
",8,6,0,2,5,0,0,0,0,16,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1337,"                    negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1340,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1343,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1346,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1347,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1350,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1353,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1354,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1356,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1357,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1359,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1362,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1363,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1367,"            if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1370,"                value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1372,"                int i = position;
",4,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1373,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1374,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1377,"                    value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1380,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1378,"                } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1379,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1381,"                position += length;
",4,0,0,0,0,0,0,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1382,"                while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1383,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1385,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1386,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1390,"            bucket.saveField(iFieldType, value);
",0,0,0,1,2,0,8,0,0,8,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1391,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2544,"    static enum TimeZoneId
",2,0,0,0,0,1,0,0,0,3,22,2,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2547,"        INSTANCE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2548,"        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
",2,0,0,1,2,2,4,4,0,12,66,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2551,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2552,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2553,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2554,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2555,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2556,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2559,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2566,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2571,"            out.write(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2572,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2576,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2580,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2583,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2587,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2588,"            String best = null;
",2,0,0,0,0,0,0,2,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2589,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2590,"                if (str.startsWith(id)) {
",0,0,0,2,5,0,6,0,0,6,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2591,"                    if (best == null || id.length() > best.length()) {
",2,3,0,3,7,0,8,0,0,13,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2592,"                        best = id;
",4,0,0,0,0,0,0,0,0,5,10,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2595,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2596,"            if (best != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2597,"                bucket.setZone(DateTimeZone.forID(best));
",0,0,0,2,4,0,10,0,0,10,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2598,"                return position + best.length();
",2,1,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2600,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2477,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2478,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2479,"            iParseLookup = parseLookup;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2480,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2483,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2490,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2495,"            out.write(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2496,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2499,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2500,"                return """";  // no zone
",0,0,0,0,0,1,0,0,0,1,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2502,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2504,"                    return displayZone.getName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2506,"                    return displayZone.getShortName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2508,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2513,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2517,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2520,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;
",4,0,0,0,0,0,0,6,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2525,"            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());
",6,1,0,2,4,0,4,0,0,12,92,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2526,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2527,"            String matched = null;
",2,0,0,0,0,0,0,2,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2528,"            for (String name : parseLookup.keySet()) {
",2,0,0,2,5,0,4,2,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2529,"                if (str.startsWith(name)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2530,"                    if (matched == null || name.length() > matched.length()) {
",2,3,0,3,7,0,8,0,0,13,58,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2531,"                        matched = name;
",4,0,0,0,0,0,0,0,0,5,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2534,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2535,"            if (matched != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2536,"                bucket.setZone(parseLookup.get(matched));
",0,0,0,2,4,0,10,0,0,10,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2537,"                return position + matched.length();
",2,1,0,1,2,1,4,0,0,7,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2539,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2126,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2129,"                minFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2130,"                maxFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2142,"                est = iZeroOffsetPrintText.length();
",2,0,0,1,2,0,4,0,0,7,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2151,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2154,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2155,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2160,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2161,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2171,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2180,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2187,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2188,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2189,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2192,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2193,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2195,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2196,"            if (displayOffset == 0 && iMinFields <= 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2197,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2200,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2201,"                buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2204,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2209,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2210,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2212,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2213,"                out.write(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2214,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2216,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2217,"                out.write('+');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2219,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2220,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2223,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);
",0,0,0,1,2,0,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2225,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2226,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2228,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2229,"            if (displayOffset == 0 && iMinFields == 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2230,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2233,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2234,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2235,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2238,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2239,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2241,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2242,"            if (displayOffset == 0 && iMinFields == 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2243,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2246,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2247,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2248,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2251,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2252,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2254,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2255,"            if (displayOffset == 0 && iMinFields == 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2256,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2259,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2260,"                out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2263,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2267,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2278,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2281,"            if (iZeroOffsetParseText != null) {
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2282,"                if (iZeroOffsetParseText.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2284,"                    if (limit > 0) {
",2,1,0,1,3,0,0,0,0,3,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2285,"                        char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2286,"                        if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2287,"                            break zeroOffset;
",2,0,0,0,0,0,0,0,0,2,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2290,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2291,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
",0,0,0,3,7,0,12,0,0,13,97,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2294,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2295,"                    return position + iZeroOffsetParseText.length();
",2,1,0,1,2,1,4,0,0,7,48,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2301,"            if (limit <= 1) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2302,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2306,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2307,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2312,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2332,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2339,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2341,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2342,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2343,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2349,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2350,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2354,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2355,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2359,"                } else if (c >= '0' && c <= '9') {
",4,3,0,1,4,0,0,0,0,9,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2360,"                    expectSeparators = false;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2367,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2368,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2369,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2370,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2372,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2376,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2377,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2379,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2380,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2381,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2385,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2389,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2390,"                    if (text.charAt(position) != ':') {
",0,1,0,2,5,0,6,0,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2391,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2393,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2394,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2397,"                count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2398,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2399,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2400,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2402,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2406,"                if (seconds > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2407,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2409,"                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2410,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2411,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2415,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2416,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2419,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {
",0,3,0,3,7,0,12,0,0,17,67,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2421,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2423,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2424,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2427,"                count = digitCount(text, position, 3);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2428,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2429,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2430,"                } else if (count < 1) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2432,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2435,"                offset += (text.charAt(position++) - '0') * 100;
",4,2,0,2,4,0,4,0,0,13,48,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2436,"                if (count > 1) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2437,"                    offset += (text.charAt(position++) - '0') * 10;
",4,2,0,2,4,0,4,0,0,13,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2438,"                    if (count > 2) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2439,"                        offset += text.charAt(position++) - '0';
",4,1,0,1,2,0,4,0,0,12,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2444,"            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));
",6,0,0,2,4,0,8,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2445,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2453,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2454,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2455,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2456,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2457,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2458,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2460,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2462,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1899,"                maxDigits = 18;
",2,0,0,0,0,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1914,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1922,"            printTo(null, out, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1923,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1928,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1930,"                printTo(buf, null, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1933,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1931,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1934,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1939,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1940,"            printTo(null, out, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1941,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1952,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1953,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1954,"                    appendUnknownString(buf, minDigits);
",0,0,0,1,2,0,6,0,0,6,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1956,"                    printUnknownString(out, minDigits);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1958,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1967,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1968,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1975,"            long[] fractionData = getFractionData(fraction, field);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1976,"            long scaled = fractionData[0];
",2,0,1,1,2,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1977,"            int maxDigits = (int) fractionData[1];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1979,"            if ((scaled & 0x7fffffff) == scaled) {
",4,2,0,2,5,0,0,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1980,"                str = Integer.toString((int) scaled);
",4,0,0,2,4,0,4,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1982,"                str = Long.toString(scaled);
",2,0,0,1,2,0,6,0,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1985,"            int length = str.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1986,"            int digits = maxDigits;
",4,0,0,0,0,0,0,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1987,"            while (length < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1988,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1989,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1991,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1993,"                minDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1994,"                digits--;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1997,"            if (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1999,"                while (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2000,"                    if (length <= 1 || str.charAt(length - 1) != '0') {
",4,4,0,2,5,0,4,0,0,13,51,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2001,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2003,"                    digits--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2004,"                    length--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2006,"                if (length < str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2007,"                    if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2008,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2009,"                            buf.append(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,26,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2012,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2013,"                            out.write(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,25,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2016,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2020,"            if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2021,"                buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2023,"                out.write(str);
",0,0,0,1,2,0,6,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2025,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2028,"            long rangeMillis = field.getDurationField().getUnitMillis();
",2,0,0,2,4,0,6,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2030,"            int maxDigits = iMaxDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2032,"                switch (maxDigits) {
",2,0,0,1,3,0,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2033,"                default: scalar = 1L; break;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2034,"                case 1:  scalar = 10L; break;
",2,0,0,0,0,0,0,0,0,3,29,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2035,"                case 2:  scalar = 100L; break;
",2,0,0,0,0,0,0,0,0,3,30,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2036,"                case 3:  scalar = 1000L; break;
",2,0,0,0,0,0,0,0,0,3,31,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2037,"                case 4:  scalar = 10000L; break;
",2,0,0,0,0,0,0,0,0,3,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2038,"                case 5:  scalar = 100000L; break;
",2,0,0,0,0,0,0,0,0,3,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2039,"                case 6:  scalar = 1000000L; break;
",2,0,0,0,0,0,0,0,0,3,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2040,"                case 7:  scalar = 10000000L; break;
",2,0,0,0,0,0,0,0,0,3,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2041,"                case 8:  scalar = 100000000L; break;
",2,0,0,0,0,0,0,0,0,3,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2042,"                case 9:  scalar = 1000000000L; break;
",2,0,0,0,0,0,0,0,0,3,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2043,"                case 10: scalar = 10000000000L; break;
",2,0,0,0,0,0,0,0,0,3,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2044,"                case 11: scalar = 100000000000L; break;
",2,0,0,0,0,0,0,0,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2045,"                case 12: scalar = 1000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2046,"                case 13: scalar = 10000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2047,"                case 14: scalar = 100000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2048,"                case 15: scalar = 1000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2049,"                case 16: scalar = 10000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2050,"                case 17: scalar = 100000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2051,"                case 18: scalar = 1000000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2053,"                if (((rangeMillis * scalar) / scalar) == rangeMillis) {
",8,3,0,3,7,0,0,0,0,11,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2054,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2057,"                maxDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};
",8,2,0,2,4,1,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2068,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2072,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2073,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2074,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2075,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2076,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2077,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2078,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2080,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2081,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2082,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2083,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2084,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2086,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2088,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2089,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2092,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2093,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2096,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2101,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2103,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1755,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1756,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1757,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1760,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1767,"                buf.append(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1770,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1768,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1769,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1771,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1777,"                out.write(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1780,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1778,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1779,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1781,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1785,"                buf.append(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1788,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1786,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1787,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1789,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1793,"                out.write(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1796,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1794,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1795,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1800,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1801,"            if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1802,"                return field.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1804,"                return field.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1809,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1810,"                DateTimeField field = iFieldType.getField(partial.getChronology());
",2,0,0,2,4,0,8,2,0,12,67,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1811,"                if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1812,"                    return field.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,45,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1814,"                    return field.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1817,"                return ""\ufffd"";
",0,0,0,0,0,1,0,0,0,1,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1822,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1827,"            Locale locale = bucket.getLocale();
",2,0,0,1,2,0,4,2,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1830,"            Set<String> validValues = null;
",2,0,0,0,0,0,0,4,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1831,"            int maxLength = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1832,"            synchronized (cParseCache) {
",2,0,0,1,3,0,0,0,0,2,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
",2,0,0,2,4,0,6,6,0,14,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1834,"                if (innerMap == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();
",2,0,0,2,4,0,0,6,0,9,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1836,"                    cParseCache.put(locale, innerMap);
",0,0,0,1,2,0,8,0,0,8,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1838,"                Object[] array = innerMap.get(iFieldType);
",2,0,0,2,4,0,6,2,0,10,42,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1839,"                if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1840,"                    validValues = new HashSet<String>(32);
",2,0,0,1,2,0,0,4,0,7,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
",6,0,0,1,2,0,0,4,0,10,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1842,"                    Property property = dt.property(iFieldType);
",2,0,0,1,2,0,6,2,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1843,"                    int min = property.getMinimumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1844,"                    int max = property.getMaximumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1845,"                    if (max - min > 32) {  // protect against invalid fields
",4,2,0,1,3,0,0,0,0,6,56,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1846,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1848,"                    maxLength = property.getMaximumTextLength(locale);
",2,0,0,1,2,0,6,0,0,9,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1849,"                    for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1850,"                        property.set(i);
",0,0,0,1,2,0,6,0,0,6,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1851,"                        validValues.add(property.getAsShortText(locale));
",0,0,0,2,4,0,10,0,0,10,49,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1852,"                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1853,"                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1854,"                        validValues.add(property.getAsText(locale));
",0,0,0,2,4,0,10,0,0,10,44,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1855,"                        validValues.add(property.getAsText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1856,"                        validValues.add(property.getAsText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
",2,2,0,4,9,0,10,0,0,15,81,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1860,"                        validValues.add(""BCE"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1861,"                        validValues.add(""bce"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1862,"                        validValues.add(""CE"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1863,"                        validValues.add(""ce"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1864,"                        maxLength = 3;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};
",4,0,0,3,6,0,6,2,0,13,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1867,"                    innerMap.put(iFieldType, array);
",0,0,0,1,2,0,8,0,0,8,32,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1868,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1869,"                    validValues = (Set<String>) array[0];
",2,0,1,2,4,0,0,4,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1870,"                    maxLength = ((Integer) array[1]).intValue();
",2,0,1,4,8,0,2,2,0,9,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1872,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1874,"            int limit = Math.min(text.length(), position + maxLength);
",6,1,0,2,4,0,8,0,0,15,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1875,"            for (int i = limit; i > position; i--) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1876,"                String match = text.substring(position, i);
",2,0,0,1,2,0,8,2,0,12,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1877,"                if (validValues.contains(match)) {
",0,0,0,2,5,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1878,"                    bucket.saveField(iFieldType, match, locale);
",0,0,0,1,2,0,10,0,0,10,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1879,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1882,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1561,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1562,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1563,"            iPivot = pivot;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1564,"            iLenientParse = lenientParse;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1565,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1568,"            return iLenientParse ? 4 : 2;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1572,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1574,"            if (!iLenientParse) {
",2,0,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1575,"                limit = Math.min(2, limit);
",2,0,0,1,2,0,6,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1576,"                if (limit < 2) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1577,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1580,"                boolean hasSignChar = false;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1581,"                boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1582,"                int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1583,"                while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1584,"                    char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1585,"                    if (length == 0 && (c == '-' || c == '+')) {
",6,5,0,2,5,0,0,0,0,13,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1586,"                        hasSignChar = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1587,"                        negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1588,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1589,"                            length++;
",2,0,0,0,0,0,0,0,0,3,9,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1592,"                            position++;
",2,0,0,0,0,0,0,0,0,3,11,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1593,"                            limit--;
",2,0,0,0,0,0,0,0,0,3,8,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1595,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1597,"                    if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1598,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1600,"                    length++;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1601,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1603,"                if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1604,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1607,"                if (hasSignChar || length != 2) {
",4,2,0,1,3,0,0,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1609,"                    if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1612,"                        value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1614,"                        int i = position;
",4,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1615,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1616,"                            i++;
",2,0,0,0,0,0,0,0,0,3,4,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1619,"                            value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1622,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1620,"                        } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1621,"                            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1623,"                        position += length;
",4,0,0,0,0,0,0,0,0,5,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1624,"                        while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1625,"                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1627,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1628,"                            value = -value;
",4,0,0,0,0,0,0,0,0,6,15,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1632,"                    bucket.saveField(iType, value);
",0,0,0,1,2,0,8,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1633,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1638,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1639,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1640,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1642,"            year = c - '0';
",4,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1643,"            c = text.charAt(position + 1);
",4,1,0,1,2,0,4,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1644,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1645,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1647,"            year = ((year << 3) + (year << 1)) + c - '0';
",8,5,0,3,6,0,0,0,0,15,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1649,"            int pivot = iPivot;
",4,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1651,"            if (bucket.getPivotYear() != null) {
",0,1,0,2,5,0,4,0,0,5,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1652,"                pivot = bucket.getPivotYear().intValue();
",2,0,0,2,4,0,6,0,0,9,41,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1655,"            int low = pivot - 50;
",4,1,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1658,"            if (low >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1659,"                t = low % 100;
",4,1,0,0,0,0,0,0,0,6,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1661,"                t = 99 + ((low + 1) % 100);
",4,3,0,2,4,0,0,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1664,"            year += low + ((year < t) ? 100 : 0) - t;
",10,3,0,2,4,0,0,0,0,14,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1666,"            bucket.saveField(iType, year);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1667,"            return position + 2;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1671,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1677,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1678,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1679,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1680,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1684,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1689,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1690,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1691,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1692,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1694,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1696,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1700,"                int year = iType.getField(chrono).get(instant);
",2,0,0,2,4,0,10,0,0,12,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1701,"                if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1702,"                    year = -year;
",4,0,0,0,0,0,0,0,0,6,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1704,"                return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1705,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1706,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1711,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1712,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1713,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1714,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1718,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1721,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1722,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1723,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1724,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1726,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1728,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1731,"            if (partial.isSupported(iType)) {
",0,0,0,2,5,0,6,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1733,"                    int year = partial.get(iType);
",2,0,0,1,2,0,6,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1734,"                    if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1735,"                        year = -year;
",4,0,0,0,0,0,0,0,0,6,13,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1737,"                    return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1738,"                } catch (RuntimeException e) {}
",2,0,0,2,5,0,0,2,0,4,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1740,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1281,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1282,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1287,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1291,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1292,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1295,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1296,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {
",0,0,0,3,7,0,12,0,0,13,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1304,"                return position + iValue.length();
",2,1,0,1,2,1,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1306,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1412,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,59,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1416,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1414,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1415,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1417,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1423,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,58,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1427,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1425,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1426,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1428,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1431,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,64,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1436,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1434,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1435,"                    buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1438,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1443,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,63,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1448,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1446,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1447,"                    out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1450,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1452,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1225,"            return dp;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1232,"            return ldp;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1270,"            return tp;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1280,"            return ltp;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1349,"            return dtp;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1364,"            return dotp;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1378,"            return ldotp;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1429,"            return dt;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1439,"            return dtx;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1459,"            return odt;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1469,"            return odtx;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1479,"            return wdt;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1489,"            return wdtx;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1557,"            return bdt;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1567,"            return bdtx;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1587,"            return bodt;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1597,"            return bodtx;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1619,"            return bwdt;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1629,"            return bwdtx;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1640,"            return ym;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1651,"            return ymd;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1661,"            return ww;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1672,"            return wwd;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1729,"            return dh;
",2,0,0,0,0,1,0,0,0,2,10,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1740,"            return dhm;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1751,"            return dhms;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1762,"            return dhmsl;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1773,"            return dhmsf;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,71,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,156,"        if (fields == null || fields.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,157,"            throw new IllegalArgumentException(""The fields must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,75,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,159,"        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);
",4,0,0,1,2,0,0,8,0,12,78,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,160,"        int inputSize = workingFields.size();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,161,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,162,"        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,164,"        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,165,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,166,"        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,167,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,69,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,168,"        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,72,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,169,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,170,"        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,68,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,171,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,172,"        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,173,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,174,"        } else if (workingFields.remove(DateTimeFieldType.year())) {
",0,0,0,3,8,0,8,0,0,8,60,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,175,"            bld.append(Constants.ye);
",4,0,0,1,2,0,4,0,0,8,25,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,176,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,177,"        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,8,0,8,0,0,8,64,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,178,"            bld.append(Constants.we);
",4,0,0,1,2,0,4,0,0,8,25,13,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,179,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,181,"        boolean datePresent = (workingFields.size() < inputSize);
",4,1,0,2,4,0,4,0,0,9,57,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,184,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);
",0,0,0,1,2,0,14,0,0,14,72,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,187,"        if (bld.canBuildFormatter() == false) {
",0,1,0,2,5,0,4,0,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,188,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,194,"            fields.retainAll(workingFields);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,197,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,195,"        } catch (UnsupportedOperationException ex) {
",2,0,0,1,4,0,0,2,0,4,44,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,198,"        return bld.toFormatter();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,219,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,220,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,221,"            bld.append(Constants.ye);
",4,0,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,222,"            if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,223,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,225,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,226,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,227,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,228,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,231,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,232,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,233,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,236,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,238,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,239,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,240,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,241,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,244,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,248,"        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,8,0,8,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,249,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,250,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,251,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,252,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,254,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,255,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,258,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,260,"        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,262,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,263,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,264,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,265,"            bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,267,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,287,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,288,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,289,"            bld.append(Constants.ye);
",4,0,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,290,"            if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,7,0,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,292,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,293,"                bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,296,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,299,"        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,301,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,302,"            bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,304,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,324,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,325,"        if (fields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,326,"            bld.append(Constants.we);
",4,0,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,327,"            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,329,"                bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,330,"                bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,331,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,333,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,334,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,337,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,340,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,342,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,343,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,344,"                    bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,345,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,346,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,349,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,353,"        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,354,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,355,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,356,"            bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,357,"            if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,359,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,360,"                bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,363,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,365,"        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,367,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,368,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,369,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,370,"            bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,372,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,396,"        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());
",2,0,0,2,4,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,397,"        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());
",2,0,0,2,4,0,8,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,398,"        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());
",2,0,0,2,4,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,399,"        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());
",2,0,0,2,4,0,8,0,0,10,66,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,400,"        if (!hour && !minute && !second && !milli) {
",8,1,0,1,3,0,0,0,0,13,44,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,401,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,403,"        if (hour || minute || second || milli) {
",8,1,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,404,"            if (strictISO && reducedPrec) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,405,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);
",2,1,0,1,2,0,0,2,0,6,119,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,407,"            if (datePresent) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,408,"                bld.appendLiteral('T');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,411,"        if (hour && minute && second || (hour && !second && !milli)) {
",12,3,0,2,5,0,0,0,0,17,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,414,"            if (strictISO && datePresent) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,415,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);
",2,1,0,1,2,0,0,2,0,6,111,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,417,"            if (!hour && (minute && second || (minute && !milli) || second)) {
",12,5,0,3,7,0,0,0,0,19,66,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,420,"                if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,421,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,425,"        if (hour) {
",2,0,0,1,3,0,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,426,"            bld.appendHourOfDay(2);
",0,0,0,1,2,0,4,0,0,4,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,427,"        } else if (minute || second || milli) {
",6,1,0,1,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,428,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,430,"        if (extended && hour && minute) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,431,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,433,"        if (minute) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,434,"            bld.appendMinuteOfHour(2);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,435,"        } else if (second || milli) {
",4,1,0,1,4,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,436,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,438,"        if (extended && minute && second) {
",6,1,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,439,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,441,"        if (second) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,442,"            bld.appendSecondOfMinute(2);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,443,"        } else if (milli) {
",2,0,0,1,4,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,444,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,446,"        if (milli) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,447,"            bld.appendLiteral('.');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,448,"            bld.appendMillisOfSecond(3);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,450,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,461,"        if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,462,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,464,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,475,"        if (extended) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,476,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,478,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,495,"        return Constants.dp;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,512,"        return Constants.ldp;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,527,"        return Constants.dpe;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,545,"        return Constants.tp;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,564,"        return Constants.ltp;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,580,"        return Constants.tpe;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,604,"        return Constants.dtp;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,627,"        return Constants.dotp;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,651,"        return Constants.ldotp;
",4,0,0,0,0,1,0,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,675,"        return Constants.t;
",4,0,0,0,0,1,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,687,"        return Constants.tx;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,700,"        return Constants.tt;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,713,"        return Constants.ttx;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,737,"        return Constants.dtx;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,748,"        return Constants.od;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,761,"        return Constants.odt;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,774,"        return Constants.odtx;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,796,"        return Constants.wdt;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,808,"        return Constants.wdtx;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,819,"        return Constants.bd;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,832,"        return Constants.bt;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,844,"        return Constants.btx;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,857,"        return Constants.btt;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,870,"        return Constants.bttx;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,882,"        return Constants.bdt;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,894,"        return Constants.bdtx;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,905,"        return Constants.bod;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,918,"        return Constants.bodt;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,931,"        return Constants.bodtx;
",4,0,0,0,0,1,0,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,941,"        return Constants.bwd;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,953,"        return Constants.bwdt;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,965,"        return Constants.bwdtx;
",4,0,0,0,0,1,0,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,975,"        return Constants.ye;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,985,"        return Constants.ym;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1004,"        return Constants.we;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1014,"        return Constants.ww;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1024,"        return Constants.wwd;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1043,"        return Constants.hm;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1053,"        return Constants.hms;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1065,"        return Constants.hmsl;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1077,"        return Constants.hmsf;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1087,"        return Constants.dh;
",4,0,0,0,0,1,0,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1097,"        return Constants.dhm;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1108,"        return Constants.dhms;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1120,"        return Constants.dhmsl;
",4,0,0,0,0,1,0,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,1132,"        return Constants.dhmsf;
",4,0,0,0,0,1,0,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,36,"    private FormatUtils() {
",2,0,0,1,3,1,0,0,0,3,23,2,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,51,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,52,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,53,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,55,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,56,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,59,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,69,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,85,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,88,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,105,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,106,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,107,"            appendPaddedInteger(buf, intValue, size);
",0,0,0,1,2,0,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,108,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,109,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,111,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,112,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,113,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,114,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,116,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,117,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,119,"                    buf.append(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,34,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,120,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,123,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,124,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,125,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,127,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,144,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,145,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,146,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,147,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,149,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,150,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,152,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,153,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,156,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,157,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,158,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,160,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,161,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,162,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,163,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,168,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,169,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,171,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,172,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,174,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,175,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,176,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,177,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,179,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,181,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,182,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,184,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,201,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,202,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,203,"            writePaddedInteger(out, intValue, size);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,204,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,205,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,207,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,208,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,209,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,210,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,212,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,213,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,215,"                    out.write(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,33,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,216,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,219,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,220,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,221,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,223,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,236,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,242,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,245,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,246,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,256,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,269,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,270,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,271,"            appendUnpaddedInteger(buf, intValue);
",0,0,0,1,2,0,6,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,273,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,275,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,288,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,289,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,290,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,291,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,293,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,294,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,297,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,298,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,299,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,303,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,304,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,306,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,307,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,308,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,323,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,324,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,325,"            writeUnpaddedInteger(out, intValue);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,327,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,336,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,340,"                return 20;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,343,"        return 
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,352,"        int value = text.charAt(position) - '0';
",2,1,0,1,2,0,6,0,0,10,40,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,353,"        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
",6,6,0,4,8,1,4,0,0,17,71,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,357,"        int sampleLen = errorPos + 32;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,359,"        if (text.length() <= sampleLen + 3) {
",2,2,0,2,5,0,4,0,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,360,"            sampleText = text;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");
",2,0,0,2,4,0,8,0,0,12,56,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,365,"        if (errorPos <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,366,"            return ""Invalid format: \"""" + sampleText + '""';
",2,1,0,0,0,1,0,0,0,5,47,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,369,"        if (errorPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";
",2,1,0,0,0,1,0,0,0,5,61,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,3,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +
",2,1,0,0,0,1,0,0,0,5,68,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1224,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1225,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1228,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1229,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1232,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1233,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1240,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1241,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1244,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1245,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1247,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1248,"                a = Character.toUpperCase(a);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1249,"                b = Character.toUpperCase(b);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1250,"                if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1251,"                    a = Character.toLowerCase(a);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1252,"                    b = Character.toLowerCase(b);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1253,"                    if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1254,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1259,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,61,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,67,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,83,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,96,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,97,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,100,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,3,144,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,52,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,57,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,67,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,93,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,94,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,96,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,97,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,110,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,111,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,112,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,114,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,130,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,3,164,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,3,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,3,532,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,3,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,3,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,3,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1307,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1308,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1309,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1312,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1313,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1316,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1317,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,3,1320,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1269,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1270,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1271,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1272,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1278,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1279,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1280,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1286,"            iInstant = (MutableDateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1287,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1288,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1289,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1298,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1307,"            return iInstant.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1317,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1326,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1338,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));
",0,0,0,4,8,0,14,0,0,14,64,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1339,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1350,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));
",0,0,0,4,8,0,14,0,0,14,64,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1351,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1362,"            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));
",0,0,0,4,8,0,14,0,0,14,73,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1363,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1375,"            iInstant.setMillis(getField().set(iInstant.getMillis(), value));
",0,0,0,4,8,0,14,0,0,14,64,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1376,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1389,"            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));
",0,0,0,4,8,0,16,0,0,16,71,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1390,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1402,"            set(text, null);
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1403,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1414,"            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));
",0,0,0,4,8,0,12,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1415,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1425,"            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));
",0,0,0,4,8,0,12,0,0,12,66,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1426,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1437,"            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));
",0,0,0,4,8,0,12,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1438,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1449,"            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));
",0,0,0,4,8,0,12,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1450,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1461,"            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));
",0,0,0,4,8,0,12,0,0,12,67,6,0.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,1462,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,197,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,198,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,200,"        if (obj != null && getClass() == obj.getClass()) {
",2,3,0,3,7,0,6,0,0,12,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,201,"            BasicChronology chrono = (BasicChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,202,"            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&
",0,2,0,2,4,1,6,0,0,8,75,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,205,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,215,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,226,"        StringBuilder sb = new StringBuilder(60);
",2,0,0,1,2,0,0,4,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,227,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,228,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,229,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,230,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,232,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,233,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,234,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,235,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,236,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,238,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,239,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,240,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,242,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,243,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,315,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,325,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,335,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,336,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,337,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,347,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,348,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,350,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,352,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,356,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,379,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,380,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,381,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,410,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,418,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,422,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,423,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,425,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,428,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,430,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,432,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,485,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,501,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,502,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,503,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,504,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,505,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,506,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,508,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,516,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,524,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,525,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,526,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,528,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,529,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,530,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,532,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,545,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,547,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,548,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,562,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,573,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,583,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,584,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,585,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,598,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,283,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,291,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,299,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,303,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,307,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,311,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,321,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,322,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,323,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,327,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,328,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,334,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,335,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,361,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,366,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,367,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,368,"            } else if (obj instanceof ZonedDurationField) {
",2,0,0,1,4,0,0,2,0,4,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,369,"                ZonedDurationField other = (ZonedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,370,"                return iField.equals(other.iField) &&
",4,1,0,1,2,1,4,0,0,9,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,373,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,378,"            return iField.hashCode() ^ iZone.hashCode();
",0,1,0,2,4,1,8,0,0,9,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,3,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,56,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,89,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,93,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,94,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,96,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,97,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,99,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,100,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,102,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,109,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,128,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,142,"            throw new IllegalInstantException(localInstant, zone.getID());
",2,0,0,2,4,0,4,2,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,210,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,213,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,234,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,235,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,237,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,238,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,240,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,241,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,253,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,406,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,417,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,421,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,422,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,426,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,427,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,431,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,432,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,436,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,440,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,444,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,445,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,446,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,447,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,449,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,450,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,451,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,456,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,457,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,458,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,459,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,461,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,462,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,463,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,468,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,469,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,470,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,471,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,473,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,474,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,475,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,480,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,481,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,483,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,484,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());
",4,0,0,2,4,0,4,4,0,12,90,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,485,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());
",2,0,0,4,8,0,14,4,0,20,125,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,486,"                ex.initCause(cause);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,487,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,489,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,494,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,495,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,496,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,500,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,501,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,507,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,508,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,514,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,518,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,522,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,523,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,527,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,528,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,532,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,536,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,537,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,538,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,539,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,541,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,542,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,543,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,548,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,549,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,550,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,551,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,553,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,554,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,555,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,560,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,561,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,565,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,569,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,570,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,574,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,578,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,582,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,586,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,587,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,591,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,595,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,599,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,603,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,607,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,608,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,610,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,611,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,613,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,618,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,619,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,620,"            } else if (obj instanceof ZonedDateTimeField) {
",2,0,0,1,4,0,0,2,0,4,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,621,"                ZonedDateTimeField other = (ZonedDateTimeField) obj;
",4,0,0,1,2,0,0,4,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,622,"                return iField.equals(other.iField) &&
",4,1,0,1,2,1,4,0,0,9,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,627,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,632,"            return iField.hashCode() ^ iZone.hashCode();
",0,1,0,2,4,1,8,0,0,9,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,3,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,74,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,78,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,101,"        this(remainderField, null, type);
",4,0,0,1,2,0,0,0,0,4,33,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,113,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,114,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,115,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,116,"        iRangeDurationField = rangeField;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,117,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,118,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,119,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,120,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,121,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,122,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,123,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,131,"        return super.getRangeDurationField();
",2,0,0,1,2,1,0,0,0,2,37,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,141,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,142,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,143,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,145,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,158,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,170,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,182,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,186,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,190,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,202,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,203,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,204,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,220,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,229,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,233,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,234,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,238,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,247,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,251,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,252,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,3,254,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,57,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,60,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,75,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,79,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,83,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,95,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,99,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,3,103,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,54,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,56,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,57,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,60,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,61,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,62,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,64,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,67,"        iDurationField = field.getDurationField();
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,68,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,84,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,136,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,137,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,138,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,140,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,154,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,166,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,167,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,168,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,203,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,207,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,211,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,215,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,219,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,223,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,232,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,236,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,237,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,3,239,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,3,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,53,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,61,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,65,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,69,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,70,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,74,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,75,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,76,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,78,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,82,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,83,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,84,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,85,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,86,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,89,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,93,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,94,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,3,101,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,60,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,64,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,68,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,69,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,70,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,71,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,72,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,74,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,76,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,80,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,81,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,82,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,83,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,84,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,85,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,86,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,87,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,90,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,93,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,104,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,3,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,48,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,53,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,54,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,55,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,57,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,61,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,65,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,69,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,73,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,77,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,81,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,85,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,86,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,87,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,88,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,90,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,94,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,98,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,111,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,120,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,129,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,138,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,158,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,168,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,178,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,182,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,186,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,190,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,194,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,198,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,3,202,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,763,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,3,771,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,68,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,76,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,77,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,79,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,89,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,90,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,92,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,100,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,104,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,105,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,107,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,116,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,124,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,128,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,129,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,130,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,132,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,134,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,138,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,145,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,92,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,119,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,120,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,123,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,124,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,126,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,127,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,128,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,129,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,131,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,132,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,134,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,146,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,52,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,53,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,54,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,56,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,60,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,64,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,68,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,92,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,93,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,94,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,96,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,108,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,112,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,116,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,3,123,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,77,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,85,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,90,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,101,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,113,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,114,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,115,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,127,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,128,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,129,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,141,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,154,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,158,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,162,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,166,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,188,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,192,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,196,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,200,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,204,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,208,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,3,217,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,52,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,61,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,62,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,64,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,69,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,81,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,83,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,84,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,85,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,86,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,88,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,93,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,97,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,98,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,100,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,105,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,106,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,108,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,114,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,119,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,124,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,136,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,140,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,144,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,3,151,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,68,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,79,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,91,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,104,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,113,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,123,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,133,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,3,140,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,43,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,48,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,53,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,58,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,3,63,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,60,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,118,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,119,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,120,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,122,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,123,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,125,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,127,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,128,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,140,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,152,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,153,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,154,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,159,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,161,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,162,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,165,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,166,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,167,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,168,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,170,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,171,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,172,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,173,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,174,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,176,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,177,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,178,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,182,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,185,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,189,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,190,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,192,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,193,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,194,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,195,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,198,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,200,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,207,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,208,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,210,"        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
",2,4,0,5,11,0,14,0,0,20,111,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,212,"            int curMonth0 = partial.getValue(0) - 1;
",2,1,0,1,2,0,4,0,0,7,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,213,"            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
",6,4,0,3,6,0,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,214,"            return set(partial, 0, values, newMonth);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,216,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,217,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,218,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,219,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,221,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,222,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,224,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,239,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,244,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,245,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,248,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,249,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,250,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,251,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,253,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,257,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,259,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,261,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,263,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,267,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,272,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,274,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,277,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,278,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,281,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,307,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,321,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,322,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,323,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,325,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,330,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,340,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,345,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,350,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,351,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,352,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,357,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,365,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,61,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,73,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,74,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,76,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,80,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,93,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,97,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,98,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,101,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,102,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,104,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,105,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,108,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,109,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,112,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,113,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,114,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,116,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,134,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,135,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,136,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,141,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,145,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,146,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,147,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,155,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,156,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,157,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,163,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,169,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,174,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,180,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,181,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,182,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,183,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,190,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,192,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,205,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,213,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,217,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,225,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,229,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,235,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,236,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,237,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,238,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,240,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,244,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,3,251,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,55,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,66,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,71,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,76,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,84,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,88,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,89,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,93,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,94,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,95,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,97,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,101,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,102,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,103,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,104,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,105,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,108,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,112,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,119,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,57,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,58,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,62,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,66,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,70,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,74,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,78,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,82,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,86,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,87,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,88,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,90,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,102,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,106,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,110,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,3,117,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,157,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,165,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,170,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,175,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,179,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,187,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,191,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,196,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,225,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,226,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,227,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,230,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,234,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,235,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,240,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,3,241,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,3,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,3,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,123,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,136,"        switch (val2) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,138,"                if (val1 == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,141,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,143,"                return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,145,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,147,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,148,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,151,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,163,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,164,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,166,"        if (val1 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,167,"            return val2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,169,"        if (val1 == 0 || val2 == 0) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,170,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,172,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,173,"        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
",22,10,0,1,3,0,0,0,0,34,107,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,176,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,189,"        if (dividend == Long.MIN_VALUE && divisor == -1L) {
",8,3,0,1,3,0,0,0,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,190,"            throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);
",4,1,0,1,2,0,0,2,0,9,96,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,192,"        return dividend / divisor;
",4,1,0,0,0,1,0,0,0,5,26,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,203,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,204,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,206,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,218,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,219,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,234,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,252,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,268,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,269,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,273,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,292,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,308,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,309,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,312,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,313,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,315,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,316,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,319,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,321,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,322,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,324,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,337,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,338,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,340,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,341,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,3,343,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,3,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,475,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,3,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
