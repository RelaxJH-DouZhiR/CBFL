dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,1,-1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,1,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.16667,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,83,5,0.12500,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,"                    sum -= 4; // remove three digits and decimal point
",2,0,0,0,0,0,0,0,0,3,50,9,0.12500,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,84,5,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,"                sum += iText.length();
",2,0,0,1,2,0,4,0,0,7,22,8,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);
",2,0,0,1,2,0,6,0,0,9,23,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,"                sum++;
",2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,"                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
",4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,"                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,60,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,"                buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,9,0.06667,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,"                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);
",8,1,0,2,4,0,0,0,0,10,64,7,0.06667,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0,-1
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0,-1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0,-1
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,-1
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0,-1
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.95522,0,-1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,0.91429,0,-1
defect4j,time,org/joda/time/MonthDay,14,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.91429,0,-1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.90000,0,-1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.90000,0,-1
defect4j,time,org/joda/time/MonthDay,14,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.87671,0,-1
defect4j,time,org/joda/time/MonthDay,14,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.87671,0,-1
defect4j,time,org/joda/time/MonthDay,14,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.82051,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,-1
defect4j,time,org/joda/time/MonthDay,14,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.66667,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,14,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,16,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,1,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.83051,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.83051,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.75385,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.75385,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.73134,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0,-1
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0,-1
