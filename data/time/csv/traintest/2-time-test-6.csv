dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1,1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);
",0,0,0,1,2,1,6,0,0,7,52,8,0.00000,1,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00426,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.00413,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.00413,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00380,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.00380,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.00380,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,574,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00379,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,0.00375,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0,0
defect4j,time,org/joda/time/base/BaseDateTime,20,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00368,0,1
defect4j,time,org/joda/time/base/BaseDateTime,20,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00365,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00362,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1206,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00333,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1207,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00333,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00333,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1345,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00330,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00330,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,"        return new Period(getMillis());
",0,0,0,2,4,1,2,2,0,4,31,5,0.50000,0,1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,1
defect4j,time,org/joda/time/Period,22,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,1
defect4j,time,org/joda/time/Period,22,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0,1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,1
defect4j,time,org/joda/time/DateTimeZone,22,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.08511,0,1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);
",2,0,0,1,2,0,0,0,0,2,27,4,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,22,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.07143,0,1
defect4j,time,org/joda/time/DateTimeZone,22,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.05970,0,0
defect4j,time,org/joda/time/DateTimeZone,22,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.05970,0,0
defect4j,time,org/joda/time/DateTimeZone,22,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.05970,0,1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,1
defect4j,time,org/joda/time/field/FieldUtils,22,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,124,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.04762,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.04167,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.04040,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.04040,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.03960,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.03960,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.03960,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.03960,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.03960,0,1
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.03636,0,1
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);
",4,0,0,2,4,1,4,0,0,8,69,5,0.03636,0,1
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.03571,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.03008,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.03008,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.03008,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,1
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.02548,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,330,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.02439,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.02439,0,1
defect4j,time,org/joda/time/DurationFieldType,22,278,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.02381,0,1
defect4j,time,org/joda/time/field/BaseDurationField,22,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.02105,0,1
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.02105,0,1
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.02105,0,1
defect4j,time,org/joda/time/DurationFieldType,22,290,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.02094,0,1
defect4j,time,org/joda/time/DurationFieldType,22,288,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.02041,0,1
defect4j,time,org/joda/time/field/FieldUtils,22,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.01970,0,1
defect4j,time,org/joda/time/field/FieldUtils,22,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.01970,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01970,0,1
defect4j,time,org/joda/time/DurationFieldType,22,274,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.01914,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.01762,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.01762,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.01762,0,0
defect4j,time,org/joda/time/DurationFieldType,22,286,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.01606,0,1
defect4j,time,org/joda/time/field/FieldUtils,22,185,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.01594,0,1
defect4j,time,org/joda/time/format/FormatUtils,22,63,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.01575,0,1
defect4j,time,org/joda/time/format/FormatUtils,22,64,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,9,0.01575,0,1
defect4j,time,org/joda/time/format/FormatUtils,22,66,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.01575,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,184,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.01556,0,0
defect4j,time,org/joda/time/DurationFieldType,22,276,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.01509,0,1
defect4j,time,org/joda/time/PeriodType,22,674,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.01493,0,0
defect4j,time,org/joda/time/PeriodType,22,675,"        return (realIndex == -1 ? 0 : period.getValue(realIndex));
",2,1,0,2,4,1,6,0,0,10,58,6,0.01493,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.01476,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.01476,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.01476,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.01476,0,1
defect4j,time,org/joda/time/DurationFieldType,22,280,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.01404,0,1
defect4j,time,org/joda/time/DurationFieldType,22,284,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.01389,0,1
defect4j,time,org/joda/time/format/FormatUtils,22,50,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01370,0,1
defect4j,time,org/joda/time/format/FormatUtils,22,62,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01370,0,1
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0,1
defect4j,time,org/joda/time/DateTimeZone,23,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0,1
defect4j,time,org/joda/time/DateTimeZone,23,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.14286,0,0
defect4j,time,org/joda/time/DateTimeZone,23,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,569,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,570,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,571,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,572,"            map.put(""IET"", ""America/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,39,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,573,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,574,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,575,"            map.put(""AGT"", ""America/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,39,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,576,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,577,"            map.put(""WET"", ""Europe/London"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,578,"            map.put(""ECT"", ""Europe/Paris"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,579,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,580,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.14286,0,1
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0,0
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0,0
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,570,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,573,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,574,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,1,0,1
defect4j,time,org/joda/time/LocalDate,24,575,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,1,0,1
defect4j,time,org/joda/time/LocalDate,24,576,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,1,0,1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,1,0,1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,396,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,397,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,399,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,400,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,1,0,1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,862,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1,0,1
defect4j,time,org/joda/time/DateTimeZone,24,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1,0,1
defect4j,time,org/joda/time/DateTimeZone,24,1031,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,1,0,1
defect4j,time,org/joda/time/LocalDate,24,281,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0,0
defect4j,time,org/joda/time/LocalDate,24,284,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,285,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,286,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0,0
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,59,2,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,275,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0,0
defect4j,time,org/joda/time/LocalDateTime,24,278,"        iLocalMillis = localMillis;
",4,0,0,0,0,0,0,0,0,5,27,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,279,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0,1
defect4j,time,org/joda/time/LocalDate,24,548,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.96078,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,953,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.96078,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,954,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.96078,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,959,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.96078,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.94231,0,1
defect4j,time,org/joda/time/LocalDate,24,557,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.92453,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,919,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.90741,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,920,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.90741,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,925,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.90741,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,499,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.90741,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,503,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.90741,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,517,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.90741,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,550,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.90741,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,567,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.90741,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,883,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.89091,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,884,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.89091,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,889,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.89091,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.89091,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.89091,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.89091,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.89091,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1410,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.87500,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1411,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.87500,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,24,1417,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.87500,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,24,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.80645,0,0
defect4j,time,org/joda/time/LocalDateTime,24,586,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.76563,0,1
defect4j,time,org/joda/time/LocalDateTime,24,595,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.74242,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.74242,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.70000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.70000,0,1
defect4j,time,org/joda/time/LocalDate,24,95,"    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
",2,0,0,1,2,3,0,8,0,13,99,2,0.68056,0,0
defect4j,time,org/joda/time/LocalDate,24,97,"        DATE_DURATION_TYPES.add(DurationFieldType.days());
",0,0,0,2,4,0,8,0,0,8,50,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,98,"        DATE_DURATION_TYPES.add(DurationFieldType.weeks());
",0,0,0,2,4,0,8,0,0,8,51,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,99,"        DATE_DURATION_TYPES.add(DurationFieldType.months());
",0,0,0,2,4,0,8,0,0,8,52,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,100,"        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
",0,0,0,2,4,0,8,0,0,8,55,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,101,"        DATE_DURATION_TYPES.add(DurationFieldType.years());
",0,0,0,2,4,0,8,0,0,8,51,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,102,"        DATE_DURATION_TYPES.add(DurationFieldType.centuries());
",0,0,0,2,4,0,8,0,0,8,55,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,104,"        DATE_DURATION_TYPES.add(DurationFieldType.eras());
",0,0,0,2,4,0,8,0,0,8,50,5,0.68056,0,1
defect4j,time,org/joda/time/LocalDate,24,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.68056,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,474,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.68056,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.64474,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.64474,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});
",8,0,0,3,6,0,0,2,0,10,62,4,0.62025,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.62025,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
",6,0,0,1,2,0,6,0,0,13,75,6,0.62025,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,221,"            chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,6,0.62025,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,464,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.62025,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,465,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.60494,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.60494,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0,1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0,1
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10000,0,1
defect4j,time,org/joda/time/DateTime,25,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.06618,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06429,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06429,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.04265,0,1
defect4j,time,org/joda/time/DateTimeZone,25,893,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.04167,0,1
defect4j,time,org/joda/time/DateTimeZone,25,894,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.04167,0,1
defect4j,time,org/joda/time/DateTimeZone,25,895,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.04167,0,1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.04167,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.04000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.03422,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03422,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.03409,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03358,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.03273,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.03273,0,1
