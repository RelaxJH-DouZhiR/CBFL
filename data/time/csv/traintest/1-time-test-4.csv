dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1,1
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,1
defect4j,time,org/joda/time/chrono/GJChronology,18,367,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,1,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,"                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;
",10,2,0,2,4,0,0,0,0,13,72,6,0.04348,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.03333,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.02703,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,"                        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,11,0.02632,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,"                return type.isSupported(DurationFieldType.seconds()) ||
",0,1,0,2,4,1,8,0,0,9,55,6,0.02500,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02439,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02326,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.02326,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,"                sum += iSuffix.calculatePrintedLength(value);
",2,0,0,1,2,0,6,0,0,9,45,7,0.02222,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0,1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0,1
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,1
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0,1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.95522,0,1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,0.91429,0,0
defect4j,time,org/joda/time/MonthDay,14,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.91429,0,1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.90000,0,1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.90000,0,0
defect4j,time,org/joda/time/MonthDay,14,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.87671,0,1
defect4j,time,org/joda/time/MonthDay,14,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.87671,0,1
defect4j,time,org/joda/time/MonthDay,14,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.82051,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,1
defect4j,time,org/joda/time/MonthDay,14,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.66667,0,0
defect4j,time,org/joda/time/base/AbstractPartial,14,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0
defect4j,time,org/joda/time/MonthDay,14,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.64646,0,1
defect4j,time,org/joda/time/MonthDay,14,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,0.62136,0,0
defect4j,time,org/joda/time/MonthDay,14,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.52033,0,1
defect4j,time,org/joda/time/field/FieldUtils,14,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.48000,0,1
defect4j,time,org/joda/time/base/BasePartial,14,237,"        return (int[]) iValues.clone();
",0,0,0,3,6,1,4,0,0,4,31,6,0.47407,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.44755,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,0.44444,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.44444,0,1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.41830,0,1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.41830,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.41830,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.37895,0,1
defect4j,time,org/joda/time/field/FieldUtils,14,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.36364,0,0
defect4j,time,org/joda/time/field/FieldUtils,14,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.36364,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.34973,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.34409,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.33684,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33684,0,1
defect4j,time,org/joda/time/MonthDay,14,780,"        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
",2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,781,"        fields.add(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,0,8,0,0,8,44,5,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,782,"        fields.add(DateTimeFieldType.dayOfMonth());
",0,0,0,2,4,0,8,0,0,8,43,5,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);
",0,0,0,2,4,1,8,0,0,10,67,5,0.33333,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.31304,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,1,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.75385,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.75385,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.73134,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.69014,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.69014,0,1
defect4j,time,org/joda/time/MutableDateTime,16,1224,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.62821,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.57647,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.57647,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.55172,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,1
defect4j,time,org/joda/time/MutableDateTime,16,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.42982,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.42609,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,474,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.37895,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.37895,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.28571,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.28000,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.28000,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,"        } else if (iZone != null) {
",2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,"            int offset = iZone.getOffsetFromLocal(millis);
",2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,"            millis -= offset;
",4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,"            if (offset != iZone.getOffset(millis)) {
",2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,"        if (instantBefore == instantAfter) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.50000,0,1
defect4j,time,org/joda/time/DateTimeZone,17,1174,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.50000,0,1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
",6,0,0,1,2,1,4,0,0,11,86,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.50000,0,0
defect4j,time,org/joda/time/DateTime,17,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.50000,0,0
defect4j,time,org/joda/time/DateTime,17,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.05882,0,1
defect4j,time,org/joda/time/DateTime,17,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,1
defect4j,time,org/joda/time/DateTime,17,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.05000,0,1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.05000,0,0
defect4j,time,org/joda/time/DateTime,17,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.05000,0,1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.01887,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.01639,0,0
