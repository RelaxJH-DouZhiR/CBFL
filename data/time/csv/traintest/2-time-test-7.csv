dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.03273,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03273,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.03273,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.03273,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02980,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02980,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02980,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02885,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02885,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02813,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.02813,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.02795,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1849,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.02769,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1450,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02761,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02761,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1659,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02761,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1667,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02761,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1879,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.02671,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1892,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02671,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0,1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.02550,0,1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02528,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,854,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.02446,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1326,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02413,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02413,0,1
defect4j,time,org/joda/time/DateTimeZone,25,889,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.02320,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,74,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.02320,0,0
defect4j,time,org/joda/time/format/FormatUtils,25,75,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.02320,0,0
defect4j,time,org/joda/time/format/FormatUtils,25,77,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.02320,0,0
defect4j,time,org/joda/time/format/FormatUtils,25,78,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.02320,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1151,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.02308,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1152,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02308,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2511,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2515,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2521,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.02284,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.02284,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2524,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1408,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1412,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,581,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.02267,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.02267,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,458,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.02261,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.02261,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02261,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,83,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,82,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.02233,0,1
defect4j,time,org/joda/time/DateTimeFieldType,25,503,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.02233,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.02228,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,620,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.02228,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.02228,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,622,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.02228,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.02228,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.02228,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,630,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02228,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,80,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.02206,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,87,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.02206,0,1
defect4j,time,org/joda/time/format/FormatUtils,25,90,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.02206,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,"        if (lte == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02027,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1622,"            lte = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02027,0,1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,1,0,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,1.00000,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0,1
defect4j,time,org/joda/time/DateTime,26,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.62500,0,1
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.58140,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.58140,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.58140,0,1
defect4j,time,org/joda/time/DateTime,26,518,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.57143,0,1
defect4j,time,org/joda/time/DateTime,26,519,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.57143,0,0
defect4j,time,org/joda/time/DateTime,26,522,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.57143,0,1
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.57143,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,"            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
",4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.56818,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.52083,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.50000,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.50000,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.50000,0,1
defect4j,time,org/joda/time/DateTimeZone,26,843,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.50000,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.48039,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.47170,0,1
defect4j,time,org/joda/time/base/BaseDateTime,26,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.47170,0,1
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.44444,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.44444,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.36842,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.36842,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.36364,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.36364,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.36364,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.36364,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.36364,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.36364,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.36364,0,1
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,"        return ISOChronology.getInstance(zone);
",0,0,0,1,2,1,6,0,0,6,39,5,0.35211,0,1
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.34783,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.34722,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.34722,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.34722,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2034,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,224,"        saveField(new SavedField(field, value));
",4,0,0,2,4,0,2,2,0,8,40,5,0.34722,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.34722,0,1
defect4j,time,org/joda/time/convert/StringConverter,26,63,"        String str = (String) object;
",4,0,0,1,2,0,0,4,0,8,29,4,0.33784,0,1
defect4j,time,org/joda/time/convert/StringConverter,26,64,"        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();
",2,0,0,1,2,0,4,2,0,8,57,4,0.33784,0,1
defect4j,time,org/joda/time/convert/StringConverter,26,65,"        return p.withChronology(chrono).parseMillis(str);
",0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.31250,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.31250,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.31250,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2263,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2275,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2287,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2300,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2303,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2309,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2312,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2314,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2318,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2319,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2377,"            bucket.setOffset(negative ? -offset : offset);
",6,0,0,1,2,0,4,0,0,11,46,6,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2378,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2386,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2387,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2388,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2389,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2390,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.30864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2393,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.30864,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2395,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.30864,0,1
defect4j,time,org/joda/time/format/FormatUtils,26,352,"        int value = text.charAt(position) - '0';
",2,1,0,1,2,0,6,0,0,10,40,5,0.30864,0,1
defect4j,time,org/joda/time/format/FormatUtils,26,353,"        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
",6,6,0,4,8,1,4,0,0,17,71,4,0.30864,0,0
defect4j,time,org/joda/time/base/AbstractInstant,26,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.30622,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2239,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.29070,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2240,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.29070,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,766,"        if (dtp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.26316,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,769,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.26316,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,774,"            dtp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.26316,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,778,"        return dtp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.26316,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2115,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.25000,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2116,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.25000,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.25000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2109,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.24903,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2090,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2097,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.23881,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2099,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2102,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.23881,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2103,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.23881,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2107,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.23881,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2108,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2112,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.23881,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,1239,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.22936,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2243,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.22857,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2706,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.22523,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,254,"            SavedField[] newArray = new SavedField
",2,0,0,1,2,0,0,4,0,6,38,6,0.22523,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,256,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);
",0,0,0,1,2,0,10,0,0,10,64,7,0.22523,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,257,"            iSavedFields = savedFields = newArray;
",6,0,0,0,0,0,0,0,0,8,38,6,0.22523,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,258,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.22523,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,799,"        if (dotp == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.22321,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,800,"            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.22321,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,805,"            dotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.22321,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,810,"        return dotp;
",2,0,0,0,0,1,0,0,0,2,12,4,0.22321,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,936,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.21695,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,26,937,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.21695,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1.00000,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,1.00000,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,1.00000,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.16667,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));
",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);
",0,0,0,1,2,0,6,0,0,6,33,9,0.14286,0,1
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);
",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0,1
defect4j,time,org/joda/time/MutablePeriod,27,926,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0,1
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);
",4,0,0,2,4,0,4,0,0,8,51,5,0.04545,0,1
defect4j,time,org/joda/time/MutablePeriod,27,948,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,"            } else if (fractPos < 0) {
",2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,"                period.setSeconds(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.04545,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,"                period.setMillis(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,"                    break search;
",2,0,0,0,0,0,0,0,0,2,13,9,0.03226,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,"                        position += parsedForm.length();
",2,0,0,1,2,0,4,0,0,7,32,11,0.02941,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,"                        found = true;
",2,0,0,0,0,0,0,0,0,4,13,11,0.02941,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02941,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02439,0,1
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,"        return new Period(this);
",0,0,0,1,2,1,0,2,0,2,24,6,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,"                return period;
",2,0,0,0,0,1,0,0,0,2,14,8,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,67,6,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,"                return position + textLength;
",4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,"                    if (!mustParse) {
",2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,"                        return ~suffixPos;
",2,0,0,0,0,1,0,0,0,3,18,11,0.02326,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,"                    return pos;
",2,0,0,0,0,1,0,0,0,2,11,10,0.02326,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.02273,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,"            int sourceLength = periodStr.length();
",2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,"            for (int pos = position; pos < sourceLength; pos++) {
",10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,62,9,0.02273,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,"                switch (periodStr.charAt(pos)) {
",0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,"        return parseMutablePeriod(text).toPeriod();
",0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {
",0,0,0,3,7,0,12,0,0,13,72,6,0.02174,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,"                return position + iText.length();
",2,1,0,1,2,1,4,0,0,7,33,7,0.02174,0,1
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);
",2,0,0,1,2,0,0,0,0,3,26,3,0.02128,0,1
defect4j,time,org/joda/time/Period,27,595,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02128,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);
",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);
",2,0,0,2,4,0,10,0,0,12,61,5,0.02128,0,1
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02128,0,1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,"        ReadablePeriod period = (ReadablePeriod) object;
",4,0,0,1,2,0,0,4,0,8,48,4,0.02000,0,1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,71,"        return period.getPeriodType();
",0,0,0,1,2,1,4,0,0,4,30,5,0.02000,0,1
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);
",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0,1
defect4j,time,org/joda/time/MutablePeriod,27,173,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01961,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,418,"        iValues = newValues;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01852,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,419,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01852,0,1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01852,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,"            if (found && position == oldPos) {
",6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,"            if (position > oldPos && !found && !iUseBefore) {
",8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,404,"            setPeriodInternal(period);
",0,0,0,1,2,0,4,0,0,4,26,7,0.01818,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,412,"        int[] newValues = new int[size()];
",2,0,0,3,6,0,2,0,0,4,34,5,0.01818,0,0
defect4j,time,org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,4,0.01818,0,0
defect4j,time,org/joda/time/base/BasePeriod,27,414,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.01818,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,415,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.01818,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);
",0,0,0,1,2,0,8,0,0,8,39,7,0.01818,0,1
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,58,"        duration.setPeriod((ReadablePeriod) object);
",2,0,0,2,4,0,4,2,0,8,44,5,0.01818,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,"                    mustParse = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.01818,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);
",6,1,0,1,2,0,6,0,0,14,57,7,0.01818,0,0
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);
",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,466,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0,1
defect4j,time,org/joda/time/MutablePeriod,27,399,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,"            int oldPos = position;
",4,0,0,0,0,0,0,0,0,4,22,6,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);
",2,0,0,1,2,0,12,0,0,15,72,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,"            if (position < 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,"            boolean found = false;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,"            if (position > oldPos) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1712,"                String[] parsedForms = iParsedForms;
",4,0,0,1,2,0,0,2,0,6,36,7,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1713,"                int length = parsedForms.length;
",6,0,0,0,0,0,0,0,0,6,32,8,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1714,"                for (int i=0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1715,"                    String parsedForm = parsedForms[i];
",2,0,1,1,2,0,0,2,0,8,35,9,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1716,"                    if ((parsedForm == null || parsedForm.length() == 0) ||
",2,4,0,2,5,0,4,0,0,10,55,9,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1727,"            oldPos = position;
",4,0,0,0,0,0,0,0,0,5,18,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);
",2,0,0,1,2,0,12,0,0,15,71,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1730,"            if (position < 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1212,"                suffixPos = iSuffix.scan(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1213,"                if (suffixPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1246,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1248,"                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {
",8,6,0,2,5,0,0,0,0,17,68,7,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1269,"                if (c >= '0' && c <= '9') {
",4,3,0,1,3,0,0,0,0,9,27,7,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1270,"                    hasDigits = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1285,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1286,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1292,"            if (suffixPos >= 0 && position + length != suffixPos) {
",8,4,0,1,3,0,0,0,0,12,55,5,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1300,"            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {
",8,3,0,1,3,0,0,0,0,11,76,5,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1333,"            position += length;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1335,"            if (position >= 0 && iSuffix != null) {
",4,3,0,1,3,0,0,0,0,7,39,5,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1339,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1349,"            if (length >= 10) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1498,"            switch (field) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1526,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,252,"            iValues = new MutablePeriod(period, type, chrono).getValues();
",8,0,0,2,4,0,2,2,0,13,62,6,0.01754,0,0
defect4j,time,org/joda/time/base/BasePeriod,27,484,"            values[index] = value;
",2,0,1,1,2,0,0,0,0,7,22,6,0.01754,0,0
defect4j,time,org/joda/time/MutablePeriod,27,398,"        super(period, type, chrono);
",6,0,0,1,2,0,0,0,0,6,28,4,0.01754,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01724,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,486,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01724,0,1
defect4j,time,org/joda/time/MutablePeriod,27,441,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {
",2,1,0,3,7,0,8,0,0,13,69,5,0.01724,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1235,"            if (suffixPos > 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1242,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1243,"            int fractPos = -1;
",2,0,0,0,0,0,0,0,0,3,18,6,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1244,"            boolean hasDigits = false;
",2,0,0,0,0,0,0,0,0,3,26,6,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1245,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.01724,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1288,"            if (!hasDigits) {
",2,0,0,1,3,0,0,0,0,3,17,5,0.01724,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,401,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01695,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,477,"        int index = indexOf(field);
",2,0,0,1,2,0,4,0,0,6,27,5,0.01695,0,1
defect4j,time,org/joda/time/base/BasePeriod,27,478,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.01695,0,1
defect4j,time,org/joda/time/convert/ConverterSet,27,56,"            if (e.iType == type) {
",6,1,0,1,3,0,0,0,0,7,22,6,0.01695,0,1
