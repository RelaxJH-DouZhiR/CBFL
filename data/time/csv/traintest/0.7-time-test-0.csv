dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/Partial,1,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00714,1,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,1,1
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,"        if (durationField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.16667,0,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,1
defect4j,time,org/joda/time/DurationFieldType,1,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.10000,0,1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.10000,0,1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.04545,0,1
defect4j,time,org/joda/time/Partial,1,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0,1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);
",4,0,0,1,2,0,0,0,0,4,26,4,0.01316,0,1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.01020,0,1
defect4j,time,org/joda/time/Partial,1,218,"                if (compare < 0) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,1
defect4j,time,org/joda/time/Partial,1,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00714,0,1
defect4j,time,org/joda/time/Partial,1,250,"        iValues = (int[]) values.clone();
",2,0,0,3,6,0,4,0,0,7,33,4,0.00667,0,0
defect4j,time,org/joda/time/Partial,1,251,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00667,0,1
defect4j,time,org/joda/time/Partial,1,248,"        iTypes = (DateTimeFieldType[]) types.clone();
",2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,0
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,1
defect4j,time,org/joda/time/Partial,1,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,1
defect4j,time,org/joda/time/Partial,1,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00658,0,1
defect4j,time,org/joda/time/Partial,1,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00658,0,1
defect4j,time,org/joda/time/Partial,1,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00658,0,1
defect4j,time,org/joda/time/Partial,1,245,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00658,0,1
defect4j,time,org/joda/time/Partial,1,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00654,0,1
defect4j,time,org/joda/time/Partial,1,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00654,0,0
defect4j,time,org/joda/time/Partial,1,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00649,0,1
defect4j,time,org/joda/time/Partial,1,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00645,0,1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +
",0,1,0,0,1,0,0,2,0,4,79,16,1.00000,0,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.20000,0,1
defect4j,time,org/joda/time/Partial,2,223,"                        if (loopType.getRangeDurationType() == null) {
",0,1,0,2,5,0,4,0,0,5,46,13,0.20000,0,1
defect4j,time,org/joda/time/DurationFieldType,2,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.12500,0,1
defect4j,time,org/joda/time/Partial,2,222,"                    if (types[i - 1].getRangeDurationType() == null) {
",2,2,1,3,7,0,2,0,0,8,50,11,0.07692,0,0
defect4j,time,org/joda/time/Partial,2,140,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,1
defect4j,time,org/joda/time/Partial,2,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);
",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,1
defect4j,time,org/joda/time/Partial,2,159,"        iTypes = new DateTimeFieldType[] {type};
",4,0,0,2,4,0,0,2,0,7,40,4,0.05556,0,1
defect4j,time,org/joda/time/Partial,2,160,"        iValues = new int[] {value};
",4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);
",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,1
defect4j,time,org/joda/time/Partial,2,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05000,0,1
defect4j,time,org/joda/time/Partial,2,154,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.05000,0,1
defect4j,time,org/joda/time/Partial,2,155,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05000,0,1
defect4j,time,org/joda/time/Partial,2,156,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05000,0,1
defect4j,time,org/joda/time/Partial,2,434,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.03704,0,0
defect4j,time,org/joda/time/Partial,2,435,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,438,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,439,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,440,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,460,"            newTypes[i] = fieldType;
",2,0,1,1,2,0,0,0,0,7,24,6,0.03704,0,0
defect4j,time,org/joda/time/Partial,2,461,"            newValues[i] = value;
",2,0,1,1,2,0,0,0,0,7,21,6,0.03704,0,0
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,0
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,0
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);
",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,1
defect4j,time,org/joda/time/Partial,2,432,"        int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,1
defect4j,time,org/joda/time/Partial,2,433,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.03448,0,1
defect4j,time,org/joda/time/Partial,2,429,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01923,0,1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.01370,0,1
defect4j,time,org/joda/time/Partial,2,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,1
defect4j,time,org/joda/time/Partial,2,218,"                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
",4,5,0,3,7,0,4,0,0,14,76,8,0.00719,0,0
defect4j,time,org/joda/time/Partial,2,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00719,0,1
defect4j,time,org/joda/time/Partial,2,346,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,0
defect4j,time,org/joda/time/Partial,2,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00662,0,1
defect4j,time,org/joda/time/Partial,2,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00662,0,1
defect4j,time,org/joda/time/Partial,2,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,0
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,1,0,0
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/DateTimeZone,3,931,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.92593,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.45455,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.45455,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.45455,0,1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.44444,0,1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.43103,0,1
defect4j,time,org/joda/time/MutableDateTime,3,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.43103,0,1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.26042,0,0
defect4j,time,org/joda/time/MutableDateTime,3,1229,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.25510,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.24038,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.22523,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.22523,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.22523,0,1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));
",0,0,0,5,10,0,14,0,0,14,67,5,0.16667,0,0
defect4j,time,org/joda/time/MutableDateTime,3,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0,0
defect4j,time,org/joda/time/MutableDateTime,3,661,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));
",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,0,0
defect4j,time,org/joda/time/MutableDateTime,3,703,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0,0
defect4j,time,org/joda/time/MutableDateTime,3,724,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));
",0,0,0,5,10,0,12,0,0,12,57,5,0.16667,0,0
defect4j,time,org/joda/time/MutableDateTime,3,765,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.16667,0,1
defect4j,time,org/joda/time/MutableDateTime,3,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16340,0,1
defect4j,time,org/joda/time/MutableDateTime,3,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,1
defect4j,time,org/joda/time/MutableDateTime,3,473,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.15723,0,1
defect4j,time,org/joda/time/MutableDateTime,3,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0,1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.15723,0,1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.14368,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.13298,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.50000,0,1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.25000,0,1
defect4j,time,org/joda/time/Partial,4,447,"                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,82,15,0.20000,0,1
defect4j,time,org/joda/time/Partial,4,448,"                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,85,15,0.20000,0,1
defect4j,time,org/joda/time/Partial,4,449,"                            if (rangeField.compareTo(loopRangeField) > 0) {
",0,1,0,2,5,0,6,0,0,7,47,15,0.20000,0,1
defect4j,time,org/joda/time/Partial,4,445,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0,1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.11111,0,1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,1
defect4j,time,org/joda/time/Partial,4,446,"                        } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,13,0.05263,0,1
defect4j,time,org/joda/time/Partial,4,443,"                        int compare = unitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,49,13,0.05000,0,1
