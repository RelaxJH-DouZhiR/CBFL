dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/Partial,1,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00714,1,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,1,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,"        if (durationField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.16667,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.10000,0,-1
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.10000,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.04545,0,-1
defect4j,time,org/joda/time/Partial,1,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0,-1
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);
",4,0,0,1,2,0,0,0,0,4,26,4,0.01316,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.01020,0,-1
defect4j,time,org/joda/time/Partial,1,218,"                if (compare < 0) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0,-1
defect4j,time,org/joda/time/Partial,1,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00714,0,-1
defect4j,time,org/joda/time/Partial,1,250,"        iValues = (int[]) values.clone();
",2,0,0,3,6,0,4,0,0,7,33,4,0.00667,0,-1
defect4j,time,org/joda/time/Partial,1,251,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00667,0,-1
defect4j,time,org/joda/time/Partial,1,248,"        iTypes = (DateTimeFieldType[]) types.clone();
",2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0,-1
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0,-1
defect4j,time,org/joda/time/Partial,1,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,245,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00658,0,-1
defect4j,time,org/joda/time/Partial,1,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00654,0,-1
defect4j,time,org/joda/time/Partial,1,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00654,0,-1
defect4j,time,org/joda/time/Partial,1,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00649,0,-1
defect4j,time,org/joda/time/Partial,1,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00645,0,-1
defect4j,time,org/joda/time/Partial,1,196,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00641,0,-1
defect4j,time,org/joda/time/Partial,1,335,"        return iTypes[index].getField(chrono);
",0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0,-1
defect4j,time,org/joda/time/Partial,1,190,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00637,0,-1
defect4j,time,org/joda/time/Partial,1,191,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0,-1
defect4j,time,org/joda/time/Partial,1,192,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0,-1
defect4j,time,org/joda/time/Partial,1,193,"        if (types == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00637,0,-1
defect4j,time,org/joda/time/Partial,1,323,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00625,0,-1
defect4j,time,org/joda/time/Partial,1,311,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00621,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00457,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,1,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00329,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00327,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00234,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00234,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00233,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00233,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,1,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00233,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00210,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00210,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00197,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00166,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00165,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00164,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00164,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00164,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00164,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00164,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.00156,0,-1
defect4j,time,org/joda/time/DurationFieldType,1,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,-1
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +
",0,1,0,0,1,0,0,2,0,4,79,16,1.00000,0,-1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.20000,0,-1
defect4j,time,org/joda/time/Partial,2,223,"                        if (loopType.getRangeDurationType() == null) {
",0,1,0,2,5,0,4,0,0,5,46,13,0.20000,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.12500,0,-1
defect4j,time,org/joda/time/Partial,2,222,"                    if (types[i - 1].getRangeDurationType() == null) {
",2,2,1,3,7,0,2,0,0,8,50,11,0.07692,0,-1
defect4j,time,org/joda/time/Partial,2,140,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,-1
defect4j,time,org/joda/time/Partial,2,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);
",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0,-1
defect4j,time,org/joda/time/Partial,2,159,"        iTypes = new DateTimeFieldType[] {type};
",4,0,0,2,4,0,0,2,0,7,40,4,0.05556,0,-1
defect4j,time,org/joda/time/Partial,2,160,"        iValues = new int[] {value};
",4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0,-1
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);
",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0,-1
defect4j,time,org/joda/time/Partial,2,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05000,0,-1
defect4j,time,org/joda/time/Partial,2,154,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.05000,0,-1
defect4j,time,org/joda/time/Partial,2,155,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05000,0,-1
defect4j,time,org/joda/time/Partial,2,156,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05000,0,-1
defect4j,time,org/joda/time/Partial,2,434,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,435,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,438,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,439,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,440,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,460,"            newTypes[i] = fieldType;
",2,0,1,1,2,0,0,0,0,7,24,6,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,461,"            newValues[i] = value;
",2,0,1,1,2,0,0,0,0,7,21,6,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);
",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0,-1
defect4j,time,org/joda/time/Partial,2,432,"        int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0,-1
defect4j,time,org/joda/time/Partial,2,433,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.03448,0,-1
defect4j,time,org/joda/time/Partial,2,429,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01923,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.01370,0,-1
defect4j,time,org/joda/time/Partial,2,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0,-1
defect4j,time,org/joda/time/Partial,2,218,"                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
",4,5,0,3,7,0,4,0,0,14,76,8,0.00719,0,-1
defect4j,time,org/joda/time/Partial,2,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00719,0,-1
defect4j,time,org/joda/time/Partial,2,346,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0,-1
defect4j,time,org/joda/time/Partial,2,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,245,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00662,0,-1
defect4j,time,org/joda/time/Partial,2,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00658,0,-1
defect4j,time,org/joda/time/Partial,2,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0,-1
defect4j,time,org/joda/time/Partial,2,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00654,0,-1
defect4j,time,org/joda/time/Partial,2,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00649,0,-1
defect4j,time,org/joda/time/Partial,2,196,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0,-1
defect4j,time,org/joda/time/Partial,2,335,"        return iTypes[index].getField(chrono);
",0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0,-1
defect4j,time,org/joda/time/Partial,2,190,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00641,0,-1
defect4j,time,org/joda/time/Partial,2,191,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00641,0,-1
defect4j,time,org/joda/time/Partial,2,192,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0,-1
defect4j,time,org/joda/time/Partial,2,193,"        if (types == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00641,0,-1
defect4j,time,org/joda/time/Partial,2,323,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00629,0,-1
defect4j,time,org/joda/time/Partial,2,311,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00625,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00459,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,2,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00200,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00199,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00167,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00165,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,2,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,2,89,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00163,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.00156,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,632,"            return iField.hashCode() ^ iZone.hashCode();
",0,1,0,2,4,1,8,0,0,9,44,5,0.00134,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,378,"            return iField.hashCode() ^ iZone.hashCode();
",0,1,0,2,4,1,8,0,0,9,44,5,0.00134,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,2,532,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00131,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00128,0,-1
defect4j,time,org/joda/time/DurationFieldType,2,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00128,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,2,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,209,"                for (int i = chronos.size(); --i >= 0;) {
",4,1,0,2,5,0,4,0,0,10,41,8,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,210,"                    chrono = chronos.get(i);
",2,0,0,1,2,0,6,0,0,9,24,10,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,211,"                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
",2,2,0,1,3,0,4,0,0,8,63,10,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,214,"                        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,12,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,400,"        return iCutoverInstant;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,409,"        return iGregorianChronology.getMinimumDaysInFirstWeek();
",0,0,0,1,2,1,4,0,0,4,56,5,0.00127,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});
",8,0,0,3,6,0,0,2,0,10,62,4,0.00125,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,285,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00125,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
",6,0,0,1,2,0,6,0,0,13,75,8,0.00125,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,225,"                chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,8,0.00125,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,2,490,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00125,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,1,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/DateTimeZone,3,931,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.92593,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.45455,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.45455,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.45455,0,-1
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.44444,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.43103,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.43103,0,-1
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.26042,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,1229,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.25510,0,-1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.24038,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.22523,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.22523,0,-1
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.22523,0,-1
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));
",0,0,0,5,10,0,14,0,0,14,67,5,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,661,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));
",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,703,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,724,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));
",0,0,0,5,10,0,12,0,0,12,57,5,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,765,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.16667,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16340,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,473,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.15723,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.15723,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.14368,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.13298,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.13298,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.13298,0,-1
defect4j,time,org/joda/time/MutableDateTime,3,636,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.12500,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11161,0,-1
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.11062,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.10638,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.10593,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.10549,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.10163,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.10163,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1244,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1246,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1247,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1248,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1253,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1255,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1265,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1268,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1270,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1280,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1282,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1609,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1610,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1611,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.10121,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.10121,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,3,725,"        return Constants.dt;
",4,0,0,0,0,1,0,0,0,4,20,5,0.09470,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.09434,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1916,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09434,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1917,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09434,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,1608,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.09363,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2150,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.09294,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2153,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.09294,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2667,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.09058,0,-1
defect4j,time,org/joda/time/format/FormatUtils,3,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.09058,0,-1
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.50000,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.25000,0,-1
defect4j,time,org/joda/time/Partial,4,447,"                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,82,15,0.20000,0,-1
defect4j,time,org/joda/time/Partial,4,448,"                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,85,15,0.20000,0,-1
defect4j,time,org/joda/time/Partial,4,449,"                            if (rangeField.compareTo(loopRangeField) > 0) {
",0,1,0,2,5,0,6,0,0,7,47,15,0.20000,0,-1
defect4j,time,org/joda/time/Partial,4,445,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.11111,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,-1
defect4j,time,org/joda/time/Partial,4,446,"                        } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,13,0.05263,0,-1
defect4j,time,org/joda/time/Partial,4,443,"                        int compare = unitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,49,13,0.05000,0,-1
defect4j,time,org/joda/time/Partial,4,444,"                        if (compare > 0) {
",2,1,0,1,3,0,0,0,0,3,18,12,0.05000,0,-1
defect4j,time,org/joda/time/Partial,4,439,"                for (; i < iTypes.length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,440,"                    DateTimeFieldType loopType = iTypes[i];
",2,0,1,1,2,0,0,2,0,8,39,10,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,441,"                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,10,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,442,"                    if (loopUnitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,11,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,432,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,433,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,436,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,437,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,438,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,-1
