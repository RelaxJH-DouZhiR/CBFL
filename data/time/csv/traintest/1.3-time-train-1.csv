dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/Partial,1,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00714,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,1
defect4j,time,org/joda/time/Period,5,1634,"                result = result.withMonths(months);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,1
defect4j,time,org/joda/time/chrono/GJChronology,6,1001,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.17391,1
defect4j,time,org/joda/time/DateTimeZone,8,282,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01639,1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,1
defect4j,time,org/joda/time/LocalDateTime,12,237,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.30769,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,"                    buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,10,0.06667,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1
defect4j,time,org/joda/time/chrono/GJChronology,18,367,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,1
defect4j,time,org/joda/time/DateTimeZone,19,900,"        } else if (offsetLocal > 0) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00139,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,1
defect4j,time,org/joda/time/base/BasePeriod,22,224,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);
",0,0,0,1,2,1,6,0,0,7,52,8,0.00000,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,"        if (durationField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0
defect4j,time,org/joda/time/DurationFieldType,1,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.10000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.10000,0
defect4j,time,org/joda/time/DateTimeFieldType,1,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.04545,0
defect4j,time,org/joda/time/Partial,1,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);
",4,0,0,1,2,0,0,0,0,4,26,4,0.01316,0
defect4j,time,org/joda/time/field/BaseDurationField,1,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.01020,0
defect4j,time,org/joda/time/Partial,1,218,"                if (compare < 0) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00714,0
defect4j,time,org/joda/time/Partial,1,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00714,0
defect4j,time,org/joda/time/Partial,1,250,"        iValues = (int[]) values.clone();
",2,0,0,3,6,0,4,0,0,7,33,4,0.00667,0
defect4j,time,org/joda/time/Partial,1,251,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00667,0
defect4j,time,org/joda/time/Partial,1,248,"        iTypes = (DateTimeFieldType[]) types.clone();
",2,0,0,3,6,0,4,2,0,9,45,4,0.00662,0
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00662,0
defect4j,time,org/joda/time/Partial,1,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00658,0
defect4j,time,org/joda/time/Partial,1,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00658,0
defect4j,time,org/joda/time/Partial,1,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00658,0
defect4j,time,org/joda/time/Partial,1,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00658,0
defect4j,time,org/joda/time/Partial,1,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00658,0
defect4j,time,org/joda/time/Partial,1,245,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00658,0
defect4j,time,org/joda/time/Partial,1,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00654,0
defect4j,time,org/joda/time/Partial,1,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00654,0
defect4j,time,org/joda/time/Partial,1,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00649,0
defect4j,time,org/joda/time/Partial,1,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00645,0
defect4j,time,org/joda/time/Partial,1,196,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00641,0
defect4j,time,org/joda/time/Partial,1,335,"        return iTypes[index].getField(chrono);
",0,0,1,2,4,1,4,0,0,8,38,5,0.00641,0
defect4j,time,org/joda/time/Partial,1,190,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00637,0
defect4j,time,org/joda/time/Partial,1,191,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00637,0
defect4j,time,org/joda/time/Partial,1,192,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00637,0
defect4j,time,org/joda/time/Partial,1,193,"        if (types == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00637,0
defect4j,time,org/joda/time/Partial,1,323,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00625,0
defect4j,time,org/joda/time/Partial,1,311,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00621,0
defect4j,time,org/joda/time/DurationFieldType,1,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00457,0
defect4j,time,org/joda/time/DateTimeFieldType,1,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00329,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00327,0
defect4j,time,org/joda/time/field/BaseDurationField,1,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00234,0
defect4j,time,org/joda/time/field/BaseDurationField,1,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00234,0
defect4j,time,org/joda/time/field/BaseDurationField,1,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00233,0
defect4j,time,org/joda/time/field/BaseDurationField,1,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00233,0
defect4j,time,org/joda/time/field/BaseDurationField,1,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00233,0
defect4j,time,org/joda/time/field/BaseDurationField,1,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00233,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00210,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00210,0
defect4j,time,org/joda/time/DurationFieldType,1,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00197,0
defect4j,time,org/joda/time/DurationFieldType,1,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00185,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00166,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +
",0,1,0,0,1,0,0,2,0,4,79,16,1.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.20000,0
defect4j,time,org/joda/time/Partial,2,223,"                        if (loopType.getRangeDurationType() == null) {
",0,1,0,2,5,0,4,0,0,5,46,13,0.20000,0
defect4j,time,org/joda/time/DurationFieldType,2,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.12500,0
defect4j,time,org/joda/time/Partial,2,222,"                    if (types[i - 1].getRangeDurationType() == null) {
",2,2,1,3,7,0,2,0,0,8,50,11,0.07692,0
defect4j,time,org/joda/time/Partial,2,140,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,time,org/joda/time/Partial,2,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);
",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0
defect4j,time,org/joda/time/Partial,2,159,"        iTypes = new DateTimeFieldType[] {type};
",4,0,0,2,4,0,0,2,0,7,40,4,0.05556,0
defect4j,time,org/joda/time/Partial,2,160,"        iValues = new int[] {value};
",4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);
",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0
defect4j,time,org/joda/time/Partial,2,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05000,0
defect4j,time,org/joda/time/Partial,2,154,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,155,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,156,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,434,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.03704,0
defect4j,time,org/joda/time/Partial,2,435,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,438,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,439,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.03704,0
defect4j,time,org/joda/time/Partial,2,440,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,460,"            newTypes[i] = fieldType;
",2,0,1,1,2,0,0,0,0,7,24,6,0.03704,0
defect4j,time,org/joda/time/Partial,2,461,"            newValues[i] = value;
",2,0,1,1,2,0,0,0,0,7,21,6,0.03704,0
defect4j,time,org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,70,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,73,7,0.03704,0
defect4j,time,org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);
",8,0,0,1,2,0,0,4,0,12,67,6,0.03704,0
defect4j,time,org/joda/time/Partial,2,432,"        int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,5,0.03448,0
defect4j,time,org/joda/time/Partial,2,433,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.03448,0
defect4j,time,org/joda/time/Partial,2,429,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.03333,0
defect4j,time,org/joda/time/DateTimeFieldType,2,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01923,0
defect4j,time,org/joda/time/base/AbstractPartial,2,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.01370,0
defect4j,time,org/joda/time/Partial,2,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00719,0
defect4j,time,org/joda/time/Partial,2,218,"                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
",4,5,0,3,7,0,4,0,0,14,76,8,0.00719,0
defect4j,time,org/joda/time/Partial,2,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00719,0
defect4j,time,org/joda/time/Partial,2,346,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00694,0
defect4j,time,org/joda/time/Partial,2,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00662,0
defect4j,time,org/joda/time/Partial,2,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00662,0
defect4j,time,org/joda/time/Partial,2,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00662,0
defect4j,time,org/joda/time/Partial,2,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00662,0
defect4j,time,org/joda/time/Partial,2,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00662,0
defect4j,time,org/joda/time/Partial,2,245,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00662,0
defect4j,time,org/joda/time/Partial,2,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00658,0
defect4j,time,org/joda/time/Partial,2,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00658,0
defect4j,time,org/joda/time/Partial,2,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00654,0
defect4j,time,org/joda/time/Partial,2,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00649,0
defect4j,time,org/joda/time/Partial,2,196,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00645,0
defect4j,time,org/joda/time/Partial,2,335,"        return iTypes[index].getField(chrono);
",0,0,1,2,4,1,4,0,0,8,38,5,0.00645,0
defect4j,time,org/joda/time/Partial,2,190,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00641,0
defect4j,time,org/joda/time/Partial,2,191,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00641,0
defect4j,time,org/joda/time/Partial,2,192,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00641,0
defect4j,time,org/joda/time/Partial,2,193,"        if (types == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00641,0
defect4j,time,org/joda/time/Partial,2,323,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00629,0
defect4j,time,org/joda/time/Partial,2,311,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00625,0
defect4j,time,org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00478,0
defect4j,time,org/joda/time/base/AbstractPartial,2,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00478,0
defect4j,time,org/joda/time/DurationFieldType,2,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00459,0
defect4j,time,org/joda/time/DateTimeFieldType,2,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00342,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1544,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00200,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,2,1580,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00199,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,2,86,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00178,0
defect4j,time,org/joda/time/field/BaseDateTimeField,2,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00167,0
defect4j,time,org/joda/time/field/BaseDateTimeField,2,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00166,0
defect4j,time,org/joda/time/field/BaseDateTimeField,2,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00165,0
defect4j,time,org/joda/time/field/BaseDateTimeField,2,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00165,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00165,0
defect4j,time,org/joda/time/chrono/BaseChronology,2,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00165,0
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,1,0
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/DateTimeZone,3,931,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.92593,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.45455,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.44444,0
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.43103,0
defect4j,time,org/joda/time/MutableDateTime,3,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.43103,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.26042,0
defect4j,time,org/joda/time/MutableDateTime,3,1229,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.25510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.24038,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.22523,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.22523,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,3,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.19685,0
defect4j,time,org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));
",0,0,0,5,10,0,14,0,0,14,67,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,661,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));
",0,0,0,5,10,0,12,0,0,12,61,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,703,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));
",0,0,0,5,10,0,12,0,0,12,59,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,724,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));
",0,0,0,5,10,0,12,0,0,12,57,5,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,765,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.16667,0
defect4j,time,org/joda/time/MutableDateTime,3,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16340,0
defect4j,time,org/joda/time/MutableDateTime,3,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.15723,0
defect4j,time,org/joda/time/MutableDateTime,3,473,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.15723,0
defect4j,time,org/joda/time/MutableDateTime,3,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0
defect4j,time,org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.15723,0
defect4j,time,org/joda/time/base/BaseDateTime,3,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2158,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.14368,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1962,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1963,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1964,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.13298,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,1971,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.13298,0
defect4j,time,org/joda/time/MutableDateTime,3,636,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.12500,0
defect4j,time,org/joda/time/base/BaseDateTime,3,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11161,0
defect4j,time,org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.11062,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2182,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2183,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2184,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.10638,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2176,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.10593,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2157,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2164,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2166,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2169,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2170,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2174,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2175,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.10549,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,3,2179,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10549,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.10163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.10163,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10121,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,3,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.10121,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.50000,0
defect4j,time,org/joda/time/DateTimeFieldType,4,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.25000,0
defect4j,time,org/joda/time/Partial,4,447,"                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,82,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,448,"                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,85,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,449,"                            if (rangeField.compareTo(loopRangeField) > 0) {
",0,1,0,2,5,0,6,0,0,7,47,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,445,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0
defect4j,time,org/joda/time/field/BaseDurationField,4,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.11111,0
defect4j,time,org/joda/time/DateTimeFieldType,4,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0
defect4j,time,org/joda/time/Partial,4,446,"                        } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,13,0.05263,0
defect4j,time,org/joda/time/Partial,4,443,"                        int compare = unitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,49,13,0.05000,0
defect4j,time,org/joda/time/Partial,4,444,"                        if (compare > 0) {
",2,1,0,1,3,0,0,0,0,3,18,12,0.05000,0
defect4j,time,org/joda/time/Partial,4,439,"                for (; i < iTypes.length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0
defect4j,time,org/joda/time/Partial,4,440,"                    DateTimeFieldType loopType = iTypes[i];
",2,0,1,1,2,0,0,2,0,8,39,10,0.04348,0
defect4j,time,org/joda/time/Partial,4,441,"                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,10,0.04348,0
defect4j,time,org/joda/time/Partial,4,442,"                    if (loopUnitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,11,0.04348,0
defect4j,time,org/joda/time/Partial,4,432,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.04167,0
defect4j,time,org/joda/time/Partial,4,433,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.04167,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.09091,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.08333,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,0.07273,0
defect4j,time,org/joda/time/chrono/BasicChronology,7,419,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.07143,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.06780,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05405,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.05405,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.05000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04651,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.04651,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.04545,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.04545,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.04545,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.04000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.03738,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.03738,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.03636,0
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.03636,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.03361,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03077,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.03077,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03077,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.03077,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.03030,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.03030,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.03030,0
defect4j,time,org/joda/time/DateTimeFieldType,7,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02260,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.01923,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01923,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01887,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.01709,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.01569,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01569,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.01563,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.01476,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.01476,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.01429,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.01429,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0
defect4j,time,org/joda/time/DateTimeZone,8,218,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,8,274,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,8,660,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,8,661,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,8,383,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,8,384,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,8,385,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0
defect4j,time,org/joda/time/DateTimeZone,8,216,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,8,217,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,8,220,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.03448,0
defect4j,time,org/joda/time/DateTimeZone,8,629,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,631,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,634,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,629,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,643,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,695,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,696,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,8,700,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03333,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03125,0
defect4j,time,org/joda/time/DateTimeZone,8,288,"                minutesOffset = hoursInMinutes + minutesOffset;
",6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0
defect4j,time,org/joda/time/DateTimeZone,8,273,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,276,"        if (hoursOffset < -23 || hoursOffset > 23) {
",4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,279,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,284,"            int hoursInMinutes = hoursOffset * 60;
",4,1,0,0,0,0,0,0,0,5,38,7,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,285,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,293,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,294,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,8,304,"        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
",8,3,0,1,3,0,0,0,0,12,62,4,0.01408,0
defect4j,time,org/joda/time/DateTimeZone,8,307,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.01408,0
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.01282,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0
defect4j,time,org/joda/time/DateTimeZone,9,256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,9,265,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.20000,0
defect4j,time,org/joda/time/DateTimeZone,9,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,9,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,9,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,9,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,9,361,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0
defect4j,time,org/joda/time/DateTimeZone,9,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,221,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.03448,0
defect4j,time,org/joda/time/DateTimeZone,9,605,"            public DateTimeZone getZone() {
",2,0,0,1,3,1,0,2,0,5,31,8,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,607,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,610,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,605,"            public DateTimeZone getZone() {
",2,0,0,1,3,1,0,2,0,5,31,8,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,619,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)
",0,0,0,1,2,0,2,0,0,3,39,9,0.03333,0
defect4j,time,org/joda/time/DateTimeZone,9,676,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03125,0
defect4j,time,org/joda/time/DateTimeZone,9,267,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01754,0
defect4j,time,org/joda/time/DateTimeZone,9,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,261,"        try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,273,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0
defect4j,time,org/joda/time/DateTimeZone,9,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01408,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.01282,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,1,0
defect4j,time,org/joda/time/MonthDay,10,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,1,0
defect4j,time,org/joda/time/MonthDay,10,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,1,0
defect4j,time,org/joda/time/MonthDay,10,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,1,0
defect4j,time,org/joda/time/MonthDay,10,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/MonthDay,10,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/MonthDay,10,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,1,0
defect4j,time,org/joda/time/MonthDay,10,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,1,0
defect4j,time,org/joda/time/MonthDay,10,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.66667,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.66667,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.66667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.57143,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.50000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,1,0
defect4j,time,org/joda/time/LocalDateTime,12,2016,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,612,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDateTime,12,615,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,1,0
defect4j,time,org/joda/time/LocalDate,12,1805,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,597,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,600,"        return type.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,60,5,0.80000,0
defect4j,time,org/joda/time/LocalDate,12,548,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,567,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,569,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,571,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,573,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,575,"                return getChronology().millisOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,542,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,545,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,567,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.66667,0
defect4j,time,org/joda/time/LocalDate,12,560,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.61538,0
defect4j,time,org/joda/time/LocalDate,12,563,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0
defect4j,time,org/joda/time/LocalDate,12,564,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,0.61538,0
defect4j,time,org/joda/time/LocalDateTime,12,199,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0
defect4j,time,org/joda/time/LocalDateTime,12,200,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.57143,0
defect4j,time,org/joda/time/LocalDate,12,210,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0
defect4j,time,org/joda/time/LocalDate,12,211,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0
defect4j,time,org/joda/time/LocalDateTime,12,196,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,time,org/joda/time/LocalDate,12,207,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,time,org/joda/time/LocalDateTime,12,546,"                return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,548,"                return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,550,"                return chrono.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0
defect4j,time,org/joda/time/DateTimeFieldType,12,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,529,"        return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,542,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,544,"                return chrono.year();
",0,0,0,1,2,1,4,0,0,4,21,6,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,669,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.32000,0
defect4j,time,org/joda/time/LocalDateTime,12,666,"        if (partial instanceof LocalDateTime) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,667,"            LocalDateTime other = (LocalDateTime) partial;
",4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,668,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.30769,0
defect4j,time,org/joda/time/LocalDate,12,244,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,663,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.30189,0
defect4j,time,org/joda/time/LocalDateTime,12,233,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0
defect4j,time,org/joda/time/LocalDate,12,240,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.27350,0
defect4j,time,org/joda/time/LocalDate,12,628,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0
defect4j,time,org/joda/time/LocalDate,12,622,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,625,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,626,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,627,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.25806,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.21918,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.21918,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.20847,0
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,0,0,10,68,4,0.20253,0
defect4j,time,org/joda/time/LocalDate,12,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20253,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.19104,0
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0
defect4j,time,org/joda/time/LocalDateTime,12,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17778,0
defect4j,time,org/joda/time/DateTimeFieldType,12,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.17021,0
defect4j,time,org/joda/time/DateTimeFieldType,12,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0
defect4j,time,org/joda/time/DateTimeFieldType,12,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.12800,0
defect4j,time,org/joda/time/base/BaseLocal,12,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0
defect4j,time,org/joda/time/base/BaseLocal,12,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();
",0,0,0,3,6,1,8,0,0,8,50,5,0.12308,0
defect4j,time,org/joda/time/LocalDateTime,12,499,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,500,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,503,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,504,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11679,0
defect4j,time,org/joda/time/DateTimeFieldType,12,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0
defect4j,time,org/joda/time/Period,13,967,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,1.00000,0
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,1.00000,0
defect4j,time,org/joda/time/format/FormatUtils,13,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.50000,0
defect4j,time,org/joda/time/format/FormatUtils,13,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.50000,0
defect4j,time,org/joda/time/format/FormatUtils,13,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.20000,0
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.16667,0
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,83,5,0.12500,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,"                    sum -= 4; // remove three digits and decimal point
",2,0,0,0,0,0,0,0,0,3,50,9,0.12500,0
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,84,5,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,"                sum += iText.length();
",2,0,0,1,2,0,4,0,0,7,22,8,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);
",2,0,0,1,2,0,6,0,0,9,23,7,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,"                sum++;
",2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,"                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
",4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,"                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,60,7,0.07143,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,"                buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,9,0.06667,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,"                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);
",8,1,0,2,4,0,0,0,0,10,64,7,0.06667,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,"                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
",6,1,0,3,6,0,6,0,0,13,75,8,0.06667,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,"                if (iFieldType == SECONDS_MILLIS || dp > 0) {
",6,3,0,1,3,0,0,0,0,9,45,7,0.06667,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);
",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0
defect4j,time,org/joda/time/PeriodType,13,692,"        values[realIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,29,4,0.05263,0
defect4j,time,org/joda/time/PeriodType,13,693,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0
defect4j,time,org/joda/time/PeriodType,13,688,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.05000,0
defect4j,time,org/joda/time/PeriodType,13,689,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.05000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.05000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.04762,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,"                int seconds = period.get(DurationFieldType.seconds());
",2,0,0,2,4,0,8,0,0,10,54,7,0.04348,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,"                int millis = period.get(DurationFieldType.millis());
",2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,"                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;
",10,2,0,2,4,0,0,0,0,13,72,6,0.04348,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.03333,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.02703,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,"                        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,11,0.02632,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,"                return type.isSupported(DurationFieldType.seconds()) ||
",0,1,0,2,4,1,8,0,0,9,55,6,0.02500,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02439,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,"                sum += iSuffix.calculatePrintedLength(value);
",2,0,0,1,2,0,6,0,0,9,45,7,0.02222,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1147,"                iSuffix.printTo(buf, value);
",0,0,0,1,2,0,8,0,0,8,28,8,0.02174,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1633,"            PeriodPrinter before = iBeforePrinter;
",4,0,0,0,0,0,0,2,0,6,38,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,"            PeriodPrinter after = iAfterPrinter;
",4,0,0,0,0,0,0,2,0,6,36,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1636,"            int sum = before.calculatePrintedLength(period, locale)
",2,0,0,1,2,0,8,0,0,10,55,6,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,"            if (iUseBefore) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,"            PeriodPrinter before = iBeforePrinter;
",4,0,0,0,0,0,0,2,0,6,38,5,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1659,"            PeriodPrinter after = iAfterPrinter;
",4,0,0,0,0,0,0,2,0,6,36,5,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1661,"            before.printTo(buf, period, locale);
",0,0,0,1,2,0,10,0,0,10,36,6,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1662,"            if (iUseBefore) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1676,"            after.printTo(buf, period, locale);
",0,0,0,1,2,0,10,0,0,10,35,6,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1677,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02083,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1412,"                value = period.get(DurationFieldType.minutes());
",2,0,0,2,4,0,8,0,0,11,48,6,0.02041,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02041,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1403,"                value = period.get(DurationFieldType.weeks());
",2,0,0,2,4,0,8,0,0,11,46,6,0.01961,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1404,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01961,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/base/AbstractPartial,14,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.95522,0
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,0.91429,0
defect4j,time,org/joda/time/MonthDay,14,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.91429,0
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.90000,0
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.90000,0
defect4j,time,org/joda/time/MonthDay,14,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.87671,0
defect4j,time,org/joda/time/MonthDay,14,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.87671,0
defect4j,time,org/joda/time/MonthDay,14,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0
defect4j,time,org/joda/time/base/AbstractPartial,14,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.82051,0
defect4j,time,org/joda/time/base/AbstractPartial,14,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0
defect4j,time,org/joda/time/base/AbstractPartial,14,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0
defect4j,time,org/joda/time/MonthDay,14,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.66667,0
defect4j,time,org/joda/time/base/AbstractPartial,14,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0
defect4j,time,org/joda/time/MonthDay,14,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.64646,0
defect4j,time,org/joda/time/MonthDay,14,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,0.62136,0
defect4j,time,org/joda/time/MonthDay,14,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.52033,0
defect4j,time,org/joda/time/field/FieldUtils,14,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.48000,0
defect4j,time,org/joda/time/base/BasePartial,14,237,"        return (int[]) iValues.clone();
",0,0,0,3,6,1,4,0,0,4,31,6,0.47407,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.44755,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,0.44444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.44444,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.41830,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.41830,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.41830,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.37895,0
defect4j,time,org/joda/time/field/FieldUtils,14,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.36364,0
defect4j,time,org/joda/time/field/FieldUtils,14,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.36364,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.34973,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.34409,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.33684,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33684,0
defect4j,time,org/joda/time/MonthDay,14,780,"        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
",2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,781,"        fields.add(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,0,8,0,0,8,44,5,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,782,"        fields.add(DateTimeFieldType.dayOfMonth());
",0,0,0,2,4,0,8,0,0,8,43,5,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);
",0,0,0,2,4,1,8,0,0,10,67,5,0.33333,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31304,0
defect4j,time,org/joda/time/base/AbstractPartial,14,267,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.30769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.30769,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.30189,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.28800,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.28571,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.27586,0
defect4j,time,org/joda/time/field/FieldUtils,15,142,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.04000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0
defect4j,time,org/joda/time/MutableDateTime,16,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/field/BaseDurationField,16,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,1,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.83051,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.83051,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.75385,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.75385,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.73134,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.72059,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.69014,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.69014,0
defect4j,time,org/joda/time/MutableDateTime,16,1224,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.62821,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.57647,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.57647,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.55172,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.55172,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.55172,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0
defect4j,time,org/joda/time/MutableDateTime,16,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.42982,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.42609,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.42609,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.42609,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42609,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.42609,0
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0
defect4j,time,org/joda/time/base/BaseDateTime,16,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0
defect4j,time,org/joda/time/MutableDateTime,16,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.40833,0
defect4j,time,org/joda/time/MutableDateTime,16,474,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.40833,0
defect4j,time,org/joda/time/MutableDateTime,16,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.37895,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.37895,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.28571,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.28000,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.28000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,"        } else if (iZone != null) {
",2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,"            int offset = iZone.getOffsetFromLocal(millis);
",2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,"            millis -= offset;
",4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,"            if (offset != iZone.getOffset(millis)) {
",2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.25654,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.20588,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.20588,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.20588,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.19679,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.19679,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.19600,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.19600,0
defect4j,time,org/joda/time/base/AbstractInstant,16,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0
defect4j,time,org/joda/time/base/AbstractInstant,16,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.18702,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,"        if (instantBefore == instantAfter) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
",6,0,0,1,2,1,4,0,0,11,86,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.05882,0
defect4j,time,org/joda/time/DateTime,17,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,time,org/joda/time/DateTime,17,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.05000,0
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.05000,0
defect4j,time,org/joda/time/DateTime,17,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.05000,0
defect4j,time,org/joda/time/base/AbstractInstant,17,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.01887,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.01639,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00862,0
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00500,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00476,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00476,0
defect4j,time,org/joda/time/base/AbstractInstant,17,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00383,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00383,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00383,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00383,0
defect4j,time,org/joda/time/base/AbstractInstant,17,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00370,0
defect4j,time,org/joda/time/base/AbstractInstant,17,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00370,0
defect4j,time,org/joda/time/base/AbstractInstant,17,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00370,0
defect4j,time,org/joda/time/base/BaseDateTime,17,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00339,0
defect4j,time,org/joda/time/base/BaseDateTime,17,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00337,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00275,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,17,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00273,0
defect4j,time,org/joda/time/DateTimeFieldType,17,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00242,0
defect4j,time,org/joda/time/DateTime,17,220,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00204,0
defect4j,time,org/joda/time/DateTime,17,221,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00204,0
defect4j,time,org/joda/time/DateTimeUtils,17,167,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00177,0
defect4j,time,org/joda/time/DateTimeUtils,17,168,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00177,0
defect4j,time,org/joda/time/DateTimeUtils,17,171,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00177,0
defect4j,time,org/joda/time/DateTimeUtils,17,164,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00169,0
defect4j,time,org/joda/time/DateTimeUtils,17,149,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00166,0
defect4j,time,org/joda/time/DateTimeUtils,17,146,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00158,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,147,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00152,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,139,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00150,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,140,"        int offset = zone.getOffsetFromLocal(instant);
",2,0,0,1,2,0,6,0,0,8,46,5,0.00150,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,141,"        instant -= offset;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00150,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,142,"        if (offset != zone.getOffset(instant)) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00150,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,119,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00150,0
defect4j,time,org/joda/time/DateTimeFieldType,17,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00148,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00140,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00140,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,4,0.05556,0
defect4j,time,org/joda/time/field/FieldUtils,18,233,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.05556,0
defect4j,time,org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);
",8,0,0,1,2,0,0,0,0,8,61,4,0.03333,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.01961,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.01563,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01471,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.01282,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.01282,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01282,0
defect4j,time,org/joda/time/IllegalFieldValueException,18,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.01282,0
defect4j,time,org/joda/time/DateTimeFieldType,18,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00833,0
defect4j,time,org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,0.00541,0
defect4j,time,org/joda/time/chrono/GJChronology,18,194,"            cutoverInstant = gregorianCutover.toInstant();
",2,0,0,1,2,0,4,0,0,7,46,6,0.00129,0
defect4j,time,org/joda/time/Instant,18,144,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00129,0
defect4j,time,org/joda/time/chrono/JulianChronology,18,224,"            leapYears = (relativeYear + 3) >> 2;
",4,2,0,1,2,0,0,0,0,7,36,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,90,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,496,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,102,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,498,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),
",4,0,0,1,3,0,4,2,0,11,73,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,500,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.00104,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,18,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00104,0
defect4j,time,org/joda/time/field/BaseDateTimeField,18,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00104,0
defect4j,time,org/joda/time/field/BaseDateTimeField,18,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00104,0
defect4j,time,org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00104,0
defect4j,time,org/joda/time/field/BaseDateTimeField,18,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,62,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,923,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);
",8,0,0,1,2,0,0,0,0,9,71,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,934,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,944,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);
",8,0,0,1,2,0,0,0,0,8,69,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,946,"            if (durationField == null) {
",2,1,0,1,3,0,0,0,0,3,28,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);
",4,0,0,1,2,0,0,2,0,7,62,7,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,949,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,56,5,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,601,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,610,"                     long cutoverMillis, boolean convertByWeekyear) {
",4,0,0,0,2,0,0,0,0,4,48,4,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,611,"            super(gregorianField.getType());
",0,0,0,2,4,0,4,0,0,4,32,6,0.00104,0
defect4j,time,org/joda/time/chrono/GJChronology,18,612,"            iJulianField = julianField;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00104,0
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0
defect4j,time,org/joda/time/DateTime,19,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,19,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00877,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2116,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00800,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00800,0
defect4j,time,org/joda/time/base/AbstractInstant,19,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00446,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1924,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1925,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1926,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.00422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1933,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00422,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,19,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00412,0
defect4j,time,org/joda/time/base/BaseDateTime,19,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00341,0
defect4j,time,org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00339,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,953,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00319,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,954,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00319,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,959,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00319,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,916,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00310,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,917,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00310,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,922,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00310,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.00302,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1878,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00302,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1879,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00302,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,879,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00302,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,880,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.00302,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,885,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00302,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1482,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00299,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1483,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00299,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1490,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00299,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1691,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00299,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1692,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00299,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1699,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00299,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2112,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00294,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2115,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00294,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1908,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00289,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1909,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00289,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1913,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00289,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1921,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00289,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1923,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00289,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00276,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,19,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00274,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,866,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.00258,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1358,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00255,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1359,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00255,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,19,1365,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00255,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2621,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00253,0
defect4j,time,org/joda/time/format/FormatUtils,19,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00244,0
defect4j,time,org/joda/time/format/FormatUtils,19,74,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00244,0
defect4j,time,org/joda/time/format/FormatUtils,19,75,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.00244,0
defect4j,time,org/joda/time/format/FormatUtils,19,77,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.00244,0
defect4j,time,org/joda/time/format/FormatUtils,19,78,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00244,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1180,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1181,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00243,0
defect4j,time,org/joda/time/DateTimeFieldType,19,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00242,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2614,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2615,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2619,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2624,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2625,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,2628,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1437,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1441,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,19,1442,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,581,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,582,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,583,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,458,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,459,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00239,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00239,0
defect4j,time,org/joda/time/format/FormatUtils,19,83,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00236,0
defect4j,time,org/joda/time/format/FormatUtils,19,82,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,19,617,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00235,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,"                if (str.startsWith(id)) {
",0,0,0,2,5,0,6,0,0,6,25,8,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,"                    bucket.setZone(DateTimeZone.forID(id));
",0,0,0,2,4,0,10,0,0,10,39,10,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,"                    return position + id.length();
",2,1,0,1,2,1,4,0,0,7,30,9,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
",8,0,0,1,2,1,2,0,0,10,57,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,"    static enum TimeZoneId
",2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,"        INSTANCE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,"        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
",2,0,0,1,2,2,4,4,0,12,66,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.10000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.10000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,time,org/joda/time/DateTimeZone,20,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.09091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,5,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.06250,0
defect4j,time,org/joda/time/DateTime,20,409,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,"                builder.appendMinuteOfHour(tokenLen);
",0,0,0,1,2,0,6,0,0,6,37,8,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01639,0
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +
",2,1,0,0,0,1,0,0,0,5,68,4,0.01316,0
defect4j,time,org/joda/time/format/FormatUtils,20,369,"        if (errorPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,"                builder.appendHourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01020,0
defect4j,time,org/joda/time/format/FormatUtils,20,357,"        int sampleLen = errorPos + 32;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,359,"        if (text.length() <= sampleLen + 3) {
",2,2,0,2,5,0,4,0,0,8,37,4,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,360,"            sampleText = text;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,365,"        if (errorPos <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00990,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00917,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,847,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00575,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00575,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00546,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00546,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00500,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.00444,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.00442,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00442,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00441,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,"        return new Period(getMillis());
",0,0,0,2,4,1,2,2,0,4,31,5,0.50000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0
defect4j,time,org/joda/time/Period,22,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0
defect4j,time,org/joda/time/Period,22,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0
defect4j,time,org/joda/time/DateTimeZone,22,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.08511,0
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);
",2,0,0,1,2,0,0,0,0,2,27,4,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,22,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.07143,0
defect4j,time,org/joda/time/DateTimeZone,22,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0
defect4j,time,org/joda/time/DateTimeZone,22,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.05970,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0
defect4j,time,org/joda/time/field/FieldUtils,22,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0
defect4j,time,org/joda/time/field/FieldUtils,22,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.04938,0
defect4j,time,org/joda/time/field/FieldUtils,22,124,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.04762,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.04167,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.04040,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.04040,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.03960,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.03960,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.03960,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.03960,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.03960,0
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.03636,0
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);
",4,0,0,2,4,1,4,0,0,8,69,5,0.03636,0
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.03571,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.03008,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.03008,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.03008,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.03008,0
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.02548,0
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,23,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0
defect4j,time,org/joda/time/DateTimeZone,23,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,565,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,566,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,567,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,568,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,569,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.14286,0
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/LocalDate,24,570,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/LocalDate,24,573,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,1,0
defect4j,time,org/joda/time/LocalDate,24,574,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,1,0
defect4j,time,org/joda/time/LocalDate,24,575,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,1,0
defect4j,time,org/joda/time/LocalDate,24,576,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,1,0
defect4j,time,org/joda/time/field/BaseDurationField,24,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,404,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,1,0
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,1,0
defect4j,time,org/joda/time/LocalDate,24,396,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,time,org/joda/time/LocalDate,24,397,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,1,0
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,1,0
defect4j,time,org/joda/time/LocalDate,24,399,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0
defect4j,time,org/joda/time/LocalDate,24,400,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0
defect4j,time,org/joda/time/LocalDate,24,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,632,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,852,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,853,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,1,0
defect4j,time,org/joda/time/DateTimeFieldType,24,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,851,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,862,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1,0
defect4j,time,org/joda/time/DateTimeZone,24,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1,0
defect4j,time,org/joda/time/DateTimeZone,24,1031,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,1,0
defect4j,time,org/joda/time/LocalDate,24,281,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0
defect4j,time,org/joda/time/LocalDate,24,284,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,1,0
defect4j,time,org/joda/time/LocalDate,24,285,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,1,0
defect4j,time,org/joda/time/LocalDate,24,286,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0
defect4j,time,org/joda/time/LocalDate,24,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,59,2,1,0
defect4j,time,org/joda/time/LocalDateTime,24,275,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0
defect4j,time,org/joda/time/LocalDateTime,24,278,"        iLocalMillis = localMillis;
",4,0,0,0,0,0,0,0,0,5,27,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,279,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10000,0
defect4j,time,org/joda/time/DateTime,25,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.06618,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06429,0
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0
defect4j,time,org/joda/time/base/BaseDateTime,25,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.04265,0
defect4j,time,org/joda/time/DateTimeZone,25,893,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,894,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,895,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.04167,0
defect4j,time,org/joda/time/base/AbstractInstant,25,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.04167,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.04000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.03409,0
defect4j,time,org/joda/time/base/BaseDateTime,25,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03358,0
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02813,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.02813,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1849,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.02769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1450,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1659,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1667,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02761,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1879,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1892,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.02550,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02528,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,854,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.02446,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1326,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02413,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02413,0
defect4j,time,org/joda/time/DateTimeZone,25,889,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0
defect4j,time,org/joda/time/format/FormatUtils,25,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.02320,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,1,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,1.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0
defect4j,time,org/joda/time/DateTime,26,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.62500,0
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.58140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.58140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.58140,0
defect4j,time,org/joda/time/DateTime,26,518,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.57143,0
defect4j,time,org/joda/time/DateTime,26,519,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.57143,0
defect4j,time,org/joda/time/DateTime,26,522,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.57143,0
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.57143,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,"            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
",4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.56818,0
defect4j,time,org/joda/time/base/BaseDateTime,26,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.52083,0
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.50000,0
defect4j,time,org/joda/time/base/BaseDateTime,26,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.50000,0
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,26,843,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.50000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.48039,0
defect4j,time,org/joda/time/base/BaseDateTime,26,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.47170,0
defect4j,time,org/joda/time/base/BaseDateTime,26,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.47170,0
defect4j,time,org/joda/time/base/AbstractInstant,26,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.44444,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,220,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.44444,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.36842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.36842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.36842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.36364,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.36364,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.36364,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.36364,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,26,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.36364,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,115,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.36364,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,214,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.36364,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,215,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.36364,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,216,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.36364,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,218,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.36364,0
defect4j,time,org/joda/time/convert/AbstractConverter,26,67,"        return ISOChronology.getInstance(zone);
",0,0,0,1,2,1,6,0,0,6,39,5,0.35211,0
defect4j,time,org/joda/time/DateTime,26,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.34783,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2001,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2005,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2006,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2007,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2008,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2009,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2010,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2013,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2014,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2015,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2016,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2017,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2019,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2021,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2025,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2029,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2034,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.34722,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2036,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,133,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.34722,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,224,"        saveField(new SavedField(field, value));
",4,0,0,2,4,0,2,2,0,8,40,5,0.34722,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.34722,0
defect4j,time,org/joda/time/convert/StringConverter,26,63,"        String str = (String) object;
",4,0,0,1,2,0,0,4,0,8,29,4,0.33784,0
defect4j,time,org/joda/time/convert/StringConverter,26,64,"        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();
",2,0,0,1,2,0,4,2,0,8,57,4,0.33784,0
defect4j,time,org/joda/time/convert/StringConverter,26,65,"        return p.withChronology(chrono).parseMillis(str);
",0,0,0,2,4,1,10,0,0,10,49,5,0.33784,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2289,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.31250,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2290,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.31250,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2291,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.31250,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2248,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2249,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2263,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2271,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2274,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2275,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2276,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2282,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2287,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2288,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2300,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2301,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2303,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2309,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2312,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2313,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2314,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.30864,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2318,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.30864,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.16667,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));
",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);
",0,0,0,1,2,0,6,0,0,6,33,9,0.14286,0
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);
",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,926,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);
",4,0,0,2,4,0,4,0,0,8,51,5,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,948,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,"            } else if (fractPos < 0) {
",2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,"                period.setSeconds(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,"                period.setMillis(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,898,"                    break search;
",2,0,0,0,0,0,0,0,0,2,13,9,0.03226,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,901,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.03226,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1720,"                        position += parsedForm.length();
",2,0,0,1,2,0,4,0,0,7,32,11,0.02941,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1721,"                        found = true;
",2,0,0,0,0,0,0,0,0,4,13,11,0.02941,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1722,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02941,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,896,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02439,0
defect4j,time,org/joda/time/base/AbstractPeriod,27,124,"        return new Period(this);
",0,0,0,1,2,1,0,2,0,2,24,6,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,321,"                return period;
",2,0,0,0,0,1,0,0,0,2,14,8,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,874,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,875,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,67,6,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,877,"                return position + textLength;
",4,1,0,0,0,1,0,0,0,5,29,7,0.02381,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,320,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1218,"                    if (!mustParse) {
",2,0,0,1,3,0,0,0,0,3,17,9,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1222,"                        return ~suffixPos;
",2,0,0,0,0,1,0,0,0,3,18,11,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,889,"                    return pos;
",2,0,0,0,0,1,0,0,0,2,11,10,0.02326,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,883,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,884,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,885,"            int sourceLength = periodStr.length();
",2,0,0,1,2,0,4,0,0,6,38,6,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,887,"            for (int pos = position; pos < sourceLength; pos++) {
",10,1,0,1,3,0,0,0,0,12,53,6,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,62,9,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,892,"                switch (periodStr.charAt(pos)) {
",0,0,0,2,5,0,6,0,0,6,32,9,0.02273,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,304,"        return parseMutablePeriod(text).toPeriod();
",0,0,0,2,4,1,6,0,0,6,43,5,0.02222,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,302,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.02174,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {
",0,0,0,3,7,0,12,0,0,13,72,6,0.02174,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1566,"                return position + iText.length();
",2,1,0,1,2,1,4,0,0,7,33,7,0.02174,0
defect4j,time,org/joda/time/Period,27,594,"        super(period, null, null);
",2,0,0,1,2,0,0,0,0,3,26,3,0.02128,0
defect4j,time,org/joda/time/Period,27,595,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,315,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);
",4,0,0,1,2,0,0,4,0,8,56,4,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);
",2,0,0,2,4,0,10,0,0,12,61,5,0.02128,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,319,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02128,0
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,70,"        ReadablePeriod period = (ReadablePeriod) object;
",4,0,0,1,2,0,0,4,0,8,48,4,0.02000,0
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,71,"        return period.getPeriodType();
",0,0,0,1,2,1,4,0,0,4,30,5,0.02000,0
defect4j,time,org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);
",4,0,0,1,2,0,0,0,0,5,28,3,0.01961,0
defect4j,time,org/joda/time/MutablePeriod,27,173,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01961,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1744,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.01887,0
defect4j,time,org/joda/time/base/BasePeriod,27,418,"        iValues = newValues;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01852,0
defect4j,time,org/joda/time/base/BasePeriod,27,419,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01852,0
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01852,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1734,"            if (found && position == oldPos) {
",6,2,0,1,3,0,0,0,0,8,34,5,0.01852,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1739,"            if (position > oldPos && !found && !iUseBefore) {
",8,3,0,1,3,0,0,0,0,13,49,5,0.01852,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.01852,0
defect4j,time,org/joda/time/base/BasePeriod,27,404,"            setPeriodInternal(period);
",0,0,0,1,2,0,4,0,0,4,26,7,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,412,"        int[] newValues = new int[size()];
",2,0,0,3,6,0,2,0,0,4,34,5,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,4,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,414,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,415,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);
",0,0,0,1,2,0,8,0,0,8,39,7,0.01818,0
defect4j,time,org/joda/time/convert/ReadablePeriodConverter,27,58,"        duration.setPeriod((ReadablePeriod) object);
",2,0,0,2,4,0,4,2,0,8,44,5,0.01818,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1215,"                    mustParse = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.01818,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);
",6,1,0,1,2,0,6,0,0,14,57,7,0.01818,0
defect4j,time,org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);
",0,0,0,1,2,0,8,0,0,8,36,5,0.01786,0
defect4j,time,org/joda/time/base/BasePeriod,27,466,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0
defect4j,time,org/joda/time/MutablePeriod,27,399,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1702,"            int oldPos = position;
",4,0,0,0,0,0,0,0,0,4,22,6,0.01786,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);
",2,0,0,1,2,0,12,0,0,15,72,5,0.01786,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1705,"            if (position < 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.01786,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1709,"            boolean found = false;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01786,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1710,"            if (position > oldPos) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.01786,0
