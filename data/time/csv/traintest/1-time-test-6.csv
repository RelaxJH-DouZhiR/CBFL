dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1,1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);
",0,0,0,1,2,1,6,0,0,7,52,8,0.00000,1,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.01020,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.01020,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.01020,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01020,0,1
defect4j,time,org/joda/time/format/FormatUtils,20,357,"        int sampleLen = errorPos + 32;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00990,0,1
defect4j,time,org/joda/time/format/FormatUtils,20,359,"        if (text.length() <= sampleLen + 3) {
",2,2,0,2,5,0,4,0,0,8,37,4,0.00990,0,0
defect4j,time,org/joda/time/format/FormatUtils,20,360,"            sampleText = text;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00990,0,1
defect4j,time,org/joda/time/format/FormatUtils,20,365,"        if (errorPos <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00990,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00917,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,"        return new Period(getMillis());
",0,0,0,2,4,1,2,2,0,4,31,5,0.50000,0,1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,1
defect4j,time,org/joda/time/Period,22,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,1
defect4j,time,org/joda/time/Period,22,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0,1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,1
defect4j,time,org/joda/time/DateTimeZone,22,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08511,0,1
defect4j,time,org/joda/time/DateTimeZone,22,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.08511,0,1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);
",2,0,0,1,2,0,0,0,0,2,27,4,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,22,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.07143,0,1
defect4j,time,org/joda/time/DateTimeZone,22,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.05970,0,0
defect4j,time,org/joda/time/DateTimeZone,22,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,1
defect4j,time,org/joda/time/DateTimeZone,22,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.05970,0,1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,1
defect4j,time,org/joda/time/field/FieldUtils,22,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,124,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.04938,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.04762,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.04167,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.04040,0,1
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0,1
defect4j,time,org/joda/time/DateTimeZone,23,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0,1
defect4j,time,org/joda/time/DateTimeZone,23,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.14286,0,1
defect4j,time,org/joda/time/DateTimeZone,23,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.14286,0,1
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0,0
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0,0
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,570,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,573,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,574,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,1,0,1
defect4j,time,org/joda/time/LocalDate,24,575,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,1,0,1
defect4j,time,org/joda/time/LocalDate,24,576,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,1,0,1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,404,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,1,0,1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,396,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,397,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,399,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,400,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,1,0,1
defect4j,time,org/joda/time/DateTimeFieldType,24,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,1,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0,1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0,1
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,1
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10000,0,1
defect4j,time,org/joda/time/DateTime,25,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0,1
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.06618,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06429,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06429,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0,1
defect4j,time,org/joda/time/base/BaseDateTime,25,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.04265,0,1
defect4j,time,org/joda/time/DateTimeZone,25,893,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.04167,0,1
defect4j,time,org/joda/time/DateTimeZone,25,894,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.04167,0,1
defect4j,time,org/joda/time/DateTimeZone,25,895,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.04167,0,1
defect4j,time,org/joda/time/base/AbstractInstant,25,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.04167,0,1
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.04000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.03930,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.03930,0,1
