dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/Period,5,1634,"                result = result.withMonths(months);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,1,1
defect4j,time,org/joda/time/chrono/GJChronology,6,1001,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,1,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0,1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,"        return cVerbose.get();
",0,0,0,1,2,1,4,0,0,4,22,5,1.00000,0,1
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,1.00000,0,1
