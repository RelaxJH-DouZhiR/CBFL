dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/Partial,1,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00714,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,1
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);
",8,0,0,1,2,0,0,4,0,12,67,6,0.04167,1
defect4j,time,org/joda/time/Period,5,1634,"                result = result.withMonths(months);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,1
defect4j,time,org/joda/time/chrono/GJChronology,6,1001,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.17391,1
defect4j,time,org/joda/time/DateTimeZone,8,282,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01639,1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1
defect4j,time,org/joda/time/chrono/GJChronology,18,367,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,1
defect4j,time,org/joda/time/DateTimeZone,19,900,"        } else if (offsetLocal > 0) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00139,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,1
defect4j,time,org/joda/time/base/BasePeriod,22,224,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);
",0,0,0,1,2,1,6,0,0,7,52,8,0.00000,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,"        if (durationField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +
",0,1,0,0,1,0,0,2,0,4,79,16,1.00000,0
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,1,0
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.50000,0
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,1,0
defect4j,time,org/joda/time/Period,5,1631,"                result = result.withYears(years);
",2,0,0,1,2,0,6,0,0,9,33,8,1,0
defect4j,time,org/joda/time/Period,5,895,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,1.00000,0
defect4j,time,org/joda/time/Period,5,1629,"            months = months % 12;
",4,1,0,0,0,0,0,0,0,6,21,6,1.00000,0
defect4j,time,org/joda/time/Period,5,1630,"            if (years != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,976,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,978,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,979,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,339,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,341,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,1,0
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,1,0
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/LocalDate,6,1500,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1531,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1894,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1895,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1896,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1897,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,"        int defaultYear = chrono.year().get(instantLocal);
",2,0,0,2,4,0,8,0,0,10,50,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.17391,0
defect4j,time,org/joda/time/DateTimeZone,8,218,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,8,274,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,9,256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,1,0
defect4j,time,org/joda/time/MonthDay,10,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,1,0
defect4j,time,org/joda/time/MonthDay,10,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,1,0
defect4j,time,org/joda/time/MonthDay,10,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,1,0
defect4j,time,org/joda/time/MonthDay,10,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/MonthDay,10,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/MonthDay,10,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,1,0
defect4j,time,org/joda/time/MonthDay,10,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,1,0
defect4j,time,org/joda/time/MonthDay,10,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,"        return cVerbose.get();
",0,0,0,1,2,1,4,0,0,4,22,5,1.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,255,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,256,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,257,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);
",2,0,0,1,2,0,6,0,0,9,37,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,259,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,308,"        return DateTimeUtils.getPeriodType(type);
",0,0,0,1,2,1,6,0,0,6,41,5,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,318,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,1.00000,0
defect4j,time,org/joda/time/Period,11,298,"        super(0L, null, null);
",0,0,0,1,2,0,0,0,0,1,22,3,1.00000,0
defect4j,time,org/joda/time/Period,11,299,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/Period,11,490,"        super(startInstant, endInstant, type, chrono);
",8,0,0,1,2,0,0,0,0,8,46,4,1.00000,0
defect4j,time,org/joda/time/Period,11,491,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/Period,11,65,"    public static final Period ZERO = new Period();
",2,0,0,1,2,3,0,4,0,9,47,2,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,243,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,247,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,249,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,271,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,273,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,276,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,280,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,1.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,1.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,1.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,"        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
",4,3,0,3,6,1,4,0,0,11,69,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,1.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,187,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,188,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,1.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,1,0
defect4j,time,org/joda/time/LocalDateTime,12,2016,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,612,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDateTime,12,615,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,1,0
defect4j,time,org/joda/time/LocalDate,12,1805,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/Period,13,967,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,1.00000,0
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,1.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0
defect4j,time,org/joda/time/MutableDateTime,16,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/field/BaseDurationField,16,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,"        if (instantBefore == instantAfter) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
",6,0,0,1,2,1,4,0,0,11,86,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0
defect4j,time,org/joda/time/chrono/GJChronology,18,356,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.05556,0
defect4j,time,org/joda/time/chrono/GJChronology,18,364,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,4,0.05556,0
defect4j,time,org/joda/time/field/FieldUtils,18,233,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.05556,0
defect4j,time,org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.06667,0
defect4j,time,org/joda/time/DateTime,19,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/LocalDate,24,570,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/LocalDate,24,573,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,1,0
defect4j,time,org/joda/time/LocalDate,24,574,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,1,0
defect4j,time,org/joda/time/LocalDate,24,575,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,1,0
defect4j,time,org/joda/time/LocalDate,24,576,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,1,0
defect4j,time,org/joda/time/field/BaseDurationField,24,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,404,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,1,0
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,1,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,1,0
defect4j,time,org/joda/time/LocalDate,24,396,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,time,org/joda/time/LocalDate,24,397,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,1,0
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,1,0
defect4j,time,org/joda/time/LocalDate,24,399,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0
defect4j,time,org/joda/time/LocalDate,24,400,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0
defect4j,time,org/joda/time/LocalDate,24,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,632,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,852,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,853,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,1,0
defect4j,time,org/joda/time/DateTimeFieldType,24,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,851,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,862,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1,0
defect4j,time,org/joda/time/DateTimeZone,24,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1,0
defect4j,time,org/joda/time/DateTimeZone,24,1031,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,1,0
defect4j,time,org/joda/time/LocalDate,24,281,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0
defect4j,time,org/joda/time/LocalDate,24,284,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,1,0
defect4j,time,org/joda/time/LocalDate,24,285,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,1,0
defect4j,time,org/joda/time/LocalDate,24,286,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0
defect4j,time,org/joda/time/LocalDate,24,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,59,2,1,0
defect4j,time,org/joda/time/LocalDateTime,24,275,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0
defect4j,time,org/joda/time/LocalDateTime,24,278,"        iLocalMillis = localMillis;
",4,0,0,0,0,0,0,0,0,5,27,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,279,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,1,0
defect4j,time,org/joda/time/LocalDateTime,24,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,1,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,1.00000,0
