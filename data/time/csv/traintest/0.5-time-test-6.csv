dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1,-1
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.11111,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.11111,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.10000,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.10000,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,-1
defect4j,time,org/joda/time/DateTimeZone,20,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.09091,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.07143,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.07143,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,5,0.07143,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,-1
defect4j,time,org/joda/time/base/AbstractDuration,22,80,"        return new Period(getMillis());
",0,0,0,2,4,1,2,2,0,4,31,5,0.50000,0,-1
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,-1
defect4j,time,org/joda/time/Period,22,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0,-1
defect4j,time,org/joda/time/Period,22,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08511,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.08511,0,-1
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);
",2,0,0,1,2,0,0,0,0,2,27,4,0.08333,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.07143,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.07143,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05970,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.05970,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.05970,0,-1
defect4j,time,org/joda/time/DateTimeZone,22,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.05970,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.14286,0,-1
defect4j,time,org/joda/time/DateTimeZone,23,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.14286,0,-1
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/LocalDate,24,570,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0,-1
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0,-1
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
