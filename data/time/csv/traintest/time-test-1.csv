dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);
",8,0,0,1,2,0,0,4,0,12,67,6,0.04167,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,1.00000,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,1.00000,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,1.00000,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1.00000,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,1.00000,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0,1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,1.00000,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,1.00000,0,0
