dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1,0
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1,1
defect4j,time,org/joda/time/chrono/GJChronology,18,367,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,1,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1406,"                value = period.get(DurationFieldType.days());
",2,0,0,2,4,0,8,0,0,11,45,6,0.01887,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1407,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01887,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1409,"                value = period.get(DurationFieldType.hours());
",2,0,0,2,4,0,8,0,0,11,46,6,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1410,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01786,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,"                return type.isSupported(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,50,7,0.01695,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1434,"                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {
",0,2,1,3,7,0,4,0,0,10,61,8,0.01667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,"                return type.isSupported(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,51,7,0.01639,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1487,"                return type.isSupported(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,53,7,0.01639,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,"                return type.isSupported(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,52,7,0.01613,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1485,"                return type.isSupported(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,51,7,0.01563,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,"                value = period.get(DurationFieldType.years());
",2,0,0,2,4,0,8,0,0,11,46,6,0.01515,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1398,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01515,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1477,"                return type.isSupported(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,51,7,0.01493,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,5,0.01471,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,"                if (period.getValue(i) != 0) {
",0,1,0,2,5,0,6,0,0,7,30,7,0.01471,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1083,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01408,0,1
defect4j,time,org/joda/time/base/BasePeriod,13,293,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01389,0,1
defect4j,time,org/joda/time/base/BasePeriod,13,294,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01389,0,1
defect4j,time,org/joda/time/base/BasePeriod,13,295,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01389,0,1
defect4j,time,org/joda/time/base/BasePeriod,13,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,1
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);
",4,0,0,1,2,0,0,0,0,4,20,4,0.01389,0,1
defect4j,time,org/joda/time/Period,13,684,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1430,"                switch (iPrintZeroSetting) {
",2,0,0,1,3,0,0,0,0,2,28,7,0.01316,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1079,"            if (stopAt <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.01299,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1082,"            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {
",8,3,0,2,5,0,4,0,0,15,88,5,0.01299,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1788,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.01282,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,"            PeriodPrinter[] printers = iPrinters;
",4,0,0,1,2,0,0,2,0,6,37,5,0.01282,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1790,"            for (int i=printers.length; sum < stopAt && --i>=0; ) {
",12,3,0,1,3,0,0,0,0,16,55,5,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1791,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);
",6,0,1,2,4,0,6,0,0,17,73,7,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1793,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.01282,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1135,"                FormatUtils.appendUnpaddedInteger(buf, value);
",0,0,0,1,2,0,8,0,0,8,46,8,0.01250,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1385,"                type = period.getPeriodType();
",2,0,0,1,2,0,4,0,0,7,30,7,0.01235,0,1
defect4j,time,org/joda/time/format/FormatUtils,13,246,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.01235,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,"            switch (field) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.01220,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0,1
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0,0
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,1
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0,1
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0,1
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.95522,0,1
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,0.91429,0,0
defect4j,time,org/joda/time/MonthDay,14,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.91429,0,1
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.90000,0,1
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.90000,0,0
defect4j,time,org/joda/time/MonthDay,14,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.87671,0,1
defect4j,time,org/joda/time/MonthDay,14,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.87671,0,1
defect4j,time,org/joda/time/MonthDay,14,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.82051,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0,0
defect4j,time,org/joda/time/MonthDay,14,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0,0
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.66667,0,0
defect4j,time,org/joda/time/base/AbstractPartial,14,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0,0
defect4j,time,org/joda/time/MonthDay,14,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.64646,0,1
defect4j,time,org/joda/time/MonthDay,14,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,0.62136,0,0
defect4j,time,org/joda/time/MonthDay,14,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.52033,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.52033,0,1
defect4j,time,org/joda/time/field/FieldUtils,14,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.48000,0,1
defect4j,time,org/joda/time/base/BasePartial,14,237,"        return (int[]) iValues.clone();
",0,0,0,3,6,1,4,0,0,4,31,6,0.47407,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.44755,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,0.44444,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.44444,0,1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.41830,0,1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.41830,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.41830,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.37895,0,1
defect4j,time,org/joda/time/field/FieldUtils,14,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.36364,0,0
defect4j,time,org/joda/time/field/FieldUtils,14,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.36364,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.34973,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.34409,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.33684,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33684,0,1
defect4j,time,org/joda/time/MonthDay,14,780,"        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
",2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,781,"        fields.add(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,0,8,0,0,8,44,5,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,782,"        fields.add(DateTimeFieldType.dayOfMonth());
",0,0,0,2,4,0,8,0,0,8,43,5,0.33333,0,1
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);
",0,0,0,2,4,1,8,0,0,10,67,5,0.33333,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31304,0,1
defect4j,time,org/joda/time/base/AbstractPartial,14,267,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.30769,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.30769,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.30189,0,1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.28800,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.28800,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.28800,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.28800,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.28571,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.28571,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.27586,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.27468,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.27468,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.27350,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.27350,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.27350,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.26667,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.26667,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.26667,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.26667,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.25703,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.25703,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2577,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.24806,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.24806,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.24615,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.24615,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.24615,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.24615,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.24521,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.24427,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.24427,0,1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.23529,0,1
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.23529,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.23529,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23273,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.23273,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.23273,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.23188,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.23188,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.23188,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.23188,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,0.23188,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.23188,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.23188,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.23188,0,1
defect4j,time,org/joda/time/field/FieldUtils,15,142,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.04000,0,1
defect4j,time,org/joda/time/field/FieldUtils,15,144,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.03846,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0,1
defect4j,time,org/joda/time/MutableDateTime,16,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/field/BaseDurationField,16,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,1,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,1,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.83051,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.75385,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.75385,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.75385,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.73134,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.72059,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.69014,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.69014,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.69014,0,1
defect4j,time,org/joda/time/MutableDateTime,16,1224,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.62821,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.57647,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.57647,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.55172,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.47115,0,1
defect4j,time,org/joda/time/MutableDateTime,16,456,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.42982,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42609,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.42609,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.40833,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,454,"        switch (iRoundingMode) {
",2,0,0,1,3,0,0,0,0,2,24,4,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,474,"        super.setMillis(instant);
",4,0,0,1,2,0,0,0,0,4,25,5,0.40833,0,1
defect4j,time,org/joda/time/MutableDateTime,16,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40833,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.37895,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.37895,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.37895,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.28571,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.28000,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.28000,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,"        } else if (iZone != null) {
",2,1,0,1,4,0,0,0,0,3,27,5,0.25789,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,"            int offset = iZone.getOffsetFromLocal(millis);
",2,0,0,1,2,0,6,0,0,8,46,8,0.25789,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,"            millis -= offset;
",4,0,0,0,0,0,0,0,0,5,17,7,0.25789,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,"            if (offset != iZone.getOffset(millis)) {
",2,1,0,2,5,0,6,0,0,9,40,7,0.25789,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.25654,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.24378,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.23529,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.20588,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.20588,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.20588,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.20588,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.19679,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.19679,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.19679,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.19600,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.19600,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.19600,0,1
defect4j,time,org/joda/time/base/AbstractInstant,16,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.18702,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.18702,0,1
defect4j,time,org/joda/time/base/AbstractInstant,16,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.18702,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18561,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.18561,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.18561,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.18491,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,503,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,7,0.18352,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,0.18284,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,0.18284,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,"            DateTimeField other = obj.iField;
",6,0,0,0,0,0,0,2,0,8,33,5,0.18148,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,500,"            int result = compareReverse
",2,0,0,0,0,0,2,0,0,4,27,6,0.18148,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,"            if (result != 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.18148,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,"        return -a.compareTo(b);
",0,0,0,1,2,1,6,0,0,7,23,4,0.17883,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,"        if (b == null || !b.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.17754,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17626,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,"            DurationField months = DurationFieldType.months().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,68,6,0.17563,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,"            DurationField days = DurationFieldType.days().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,64,6,0.17563,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,"            DurationField first = savedFields[0].iField.getDurationField();
",4,0,1,2,4,0,2,2,0,10,63,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
",0,3,0,3,7,0,12,0,0,15,77,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,365,"                millis = savedFields[i].set(millis, resetFields);
",2,0,1,2,4,0,6,0,0,13,49,8,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,420,"                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
",10,4,1,5,11,0,2,0,0,23,63,8,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,"        if (a == null || !a.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,482,"            if (iText == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.17563,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,483,"                millis = iField.set(millis, iValue);
",2,0,0,1,2,0,8,0,0,11,36,7,0.17563,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,"            if (reset) {
",2,0,0,1,3,0,0,0,0,2,12,5,0.17563,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,"            return millis;
",2,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,1
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.17500,0,1
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.16388,0,1
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.16388,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,"        SavedField[] savedFields = iSavedFields;
",4,0,0,1,2,0,0,2,0,6,40,4,0.16225,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,"        int count = iSavedFieldsCount;
",4,0,0,0,0,0,0,0,0,4,30,5,0.16225,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,346,"        if (iSavedFieldsShared) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.16225,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,350,"        sort(savedFields, count);
",0,0,0,1,2,0,6,0,0,6,25,5,0.16225,0,1
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,"        if (instantBefore == instantAfter) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.50000,0,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.50000,0,1
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
",6,0,0,1,2,1,4,0,0,11,86,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.50000,0,0
defect4j,time,org/joda/time/DateTime,17,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.50000,0,0
defect4j,time,org/joda/time/DateTime,17,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.50000,0,1
defect4j,time,org/joda/time/DateTime,17,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.05882,0,1
defect4j,time,org/joda/time/DateTime,17,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,1
defect4j,time,org/joda/time/DateTime,17,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.05000,0,1
defect4j,time,org/joda/time/DateTime,17,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.05000,0,0
defect4j,time,org/joda/time/DateTime,17,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.05000,0,1
defect4j,time,org/joda/time/base/AbstractInstant,17,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.01887,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,17,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.01639,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,17,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00862,0,1
defect4j,time,org/joda/time/DateTime,17,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00500,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00476,0,1
defect4j,time,org/joda/time/chrono/ZonedChronology,17,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00476,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,17,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00476,0,0
defect4j,time,org/joda/time/base/AbstractInstant,17,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00444,0,1
