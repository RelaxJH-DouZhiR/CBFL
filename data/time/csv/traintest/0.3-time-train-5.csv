dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/Partial,1,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00714,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,1
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);
",8,0,0,1,2,0,0,4,0,12,67,6,0.04167,1
defect4j,time,org/joda/time/Period,5,1634,"                result = result.withMonths(months);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,1
defect4j,time,org/joda/time/chrono/GJChronology,6,1001,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.17391,1
defect4j,time,org/joda/time/DateTimeZone,8,282,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01639,1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,1
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,1
defect4j,time,org/joda/time/LocalDateTime,12,237,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.30769,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,"                    buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,10,0.06667,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,1,1
defect4j,time,org/joda/time/field/FieldUtils,15,138,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.08333,1
defect4j,time,org/joda/time/chrono/GJChronology,18,367,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,1
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1
defect4j,time,org/joda/time/chrono/ZonedChronology,26,540,"                return iZone.convertLocalToUTC(localInstant, false);
",0,0,0,1,2,1,6,0,0,7,52,8,0.00000,1
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,"        if (durationField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.16667,0
defect4j,time,org/joda/time/DurationFieldType,1,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.11111,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.10000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.10000,0
defect4j,time,org/joda/time/DateTimeFieldType,1,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.04545,0
defect4j,time,org/joda/time/Partial,1,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);
",4,0,0,1,2,0,0,0,0,4,26,4,0.01316,0
defect4j,time,org/joda/time/field/BaseDurationField,1,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.01020,0
defect4j,time,org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +
",0,1,0,0,1,0,0,2,0,4,79,16,1.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,2,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.20000,0
defect4j,time,org/joda/time/Partial,2,223,"                        if (loopType.getRangeDurationType() == null) {
",0,1,0,2,5,0,4,0,0,5,46,13,0.20000,0
defect4j,time,org/joda/time/DurationFieldType,2,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.12500,0
defect4j,time,org/joda/time/Partial,2,222,"                    if (types[i - 1].getRangeDurationType() == null) {
",2,2,1,3,7,0,2,0,0,8,50,11,0.07692,0
defect4j,time,org/joda/time/Partial,2,140,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,time,org/joda/time/Partial,2,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,time,org/joda/time/Partial,2,139,"        this(type, value, null);
",4,0,0,1,2,0,0,0,0,4,24,4,0.05882,0
defect4j,time,org/joda/time/Partial,2,159,"        iTypes = new DateTimeFieldType[] {type};
",4,0,0,2,4,0,0,2,0,7,40,4,0.05556,0
defect4j,time,org/joda/time/Partial,2,160,"        iValues = new int[] {value};
",4,0,0,2,4,0,0,0,0,5,28,4,0.05556,0
defect4j,time,org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);
",0,0,0,1,2,0,6,0,0,6,35,5,0.05556,0
defect4j,time,org/joda/time/Partial,2,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05000,0
defect4j,time,org/joda/time/Partial,2,154,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,155,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,156,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05000,0
defect4j,time,org/joda/time/Partial,2,434,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.03704,0
defect4j,time,org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));
",0,0,0,5,10,0,12,0,0,12,59,5,1,0
defect4j,time,org/joda/time/MutableDateTime,3,786,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/DateTimeZone,3,931,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.92593,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.45455,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.45455,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,3,60,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.44444,0
defect4j,time,org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.43103,0
defect4j,time,org/joda/time/MutableDateTime,3,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.43103,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.40909,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.26042,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.26042,0
defect4j,time,org/joda/time/MutableDateTime,3,1229,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.25510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,3,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.24038,0
defect4j,time,org/joda/time/chrono/ZonedChronology,3,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.22523,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,4,148,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.50000,0
defect4j,time,org/joda/time/DateTimeFieldType,4,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.25000,0
defect4j,time,org/joda/time/Partial,4,447,"                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,82,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,448,"                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,85,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,449,"                            if (rangeField.compareTo(loopRangeField) > 0) {
",0,1,0,2,5,0,6,0,0,7,47,15,0.20000,0
defect4j,time,org/joda/time/Partial,4,445,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0
defect4j,time,org/joda/time/field/BaseDurationField,4,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.11111,0
defect4j,time,org/joda/time/DateTimeFieldType,4,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0
defect4j,time,org/joda/time/Partial,4,446,"                        } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,13,0.05263,0
defect4j,time,org/joda/time/Partial,4,443,"                        int compare = unitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,49,13,0.05000,0
defect4j,time,org/joda/time/Partial,4,444,"                        if (compare > 0) {
",2,1,0,1,3,0,0,0,0,3,18,12,0.05000,0
defect4j,time,org/joda/time/Partial,4,439,"                for (; i < iTypes.length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0
defect4j,time,org/joda/time/Partial,4,440,"                    DateTimeFieldType loopType = iTypes[i];
",2,0,1,1,2,0,0,2,0,8,39,10,0.04348,0
defect4j,time,org/joda/time/Partial,4,441,"                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,10,0.04348,0
defect4j,time,org/joda/time/Partial,4,442,"                    if (loopUnitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,11,0.04348,0
defect4j,time,org/joda/time/Partial,4,432,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.04167,0
defect4j,time,org/joda/time/Partial,4,433,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.04167,0
defect4j,time,org/joda/time/Partial,4,436,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0
defect4j,time,org/joda/time/Partial,4,437,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.04167,0
defect4j,time,org/joda/time/Partial,4,438,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.04167,0
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,1,0
defect4j,time,org/joda/time/Period,5,1631,"                result = result.withYears(years);
",2,0,0,1,2,0,6,0,0,9,33,8,1,0
defect4j,time,org/joda/time/Period,5,895,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,1.00000,0
defect4j,time,org/joda/time/Period,5,1629,"            months = months % 12;
",4,1,0,0,0,0,0,0,0,6,21,6,1.00000,0
defect4j,time,org/joda/time/Period,5,1630,"            if (years != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);
",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,0
defect4j,time,org/joda/time/Period,5,1625,"        int years = getYears();
",2,0,0,1,2,0,2,0,0,4,23,5,0.56250,0
defect4j,time,org/joda/time/Period,5,1626,"        int months = getMonths();
",2,0,0,1,2,0,2,0,0,4,25,5,0.56250,0
defect4j,time,org/joda/time/Period,5,1627,"        if (years != 0 || months != 0) {
",4,3,0,1,3,0,0,0,0,7,32,4,0.56250,0
defect4j,time,org/joda/time/Period,5,1617,"        type = DateTimeUtils.getPeriodType(type);
",2,0,0,1,2,0,6,0,0,9,41,4,0.50000,0
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
",2,0,0,1,2,0,2,0,0,4,83,5,0.50000,0
defect4j,time,org/joda/time/Period,5,1619,"        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
",6,1,0,6,12,0,2,0,0,10,81,4,0.50000,0
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,976,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,978,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,979,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,339,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,1,0
defect4j,time,org/joda/time/chrono/GJChronology,6,341,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,1,0
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,1,0
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/LocalDate,6,1500,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1531,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1894,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/LocalDate,6,1895,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,"        int defaultYear = chrono.year().get(instantLocal);
",2,0,0,2,4,0,8,0,0,10,50,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10811,0
defect4j,time,org/joda/time/MutableDateTime,7,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10811,0
defect4j,time,org/joda/time/field/FieldUtils,7,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.10000,0
defect4j,time,org/joda/time/field/BaseDurationField,7,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.09756,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.09091,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.08333,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,0.07273,0
defect4j,time,org/joda/time/DateTimeZone,8,218,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,8,274,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,8,660,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,8,661,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,8,383,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,8,384,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,8,385,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0
defect4j,time,org/joda/time/DateTimeZone,8,216,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,8,217,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,9,265,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.20000,0
defect4j,time,org/joda/time/DateTimeZone,9,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,9,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0
defect4j,time,org/joda/time/DateTimeZone,9,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,9,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0
defect4j,time,org/joda/time/DateTimeZone,9,361,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0
defect4j,time,org/joda/time/DateTimeZone,9,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0
defect4j,time,org/joda/time/DateTimeZone,9,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.03571,0
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,1,0
defect4j,time,org/joda/time/MonthDay,10,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,1,0
defect4j,time,org/joda/time/MonthDay,10,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,1,0
defect4j,time,org/joda/time/MonthDay,10,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,1,0
defect4j,time,org/joda/time/MonthDay,10,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/MonthDay,10,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/MonthDay,10,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,1,0
defect4j,time,org/joda/time/MonthDay,10,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,1,0
defect4j,time,org/joda/time/MonthDay,10,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,1,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,1,0
defect4j,time,org/joda/time/LocalDateTime,12,2016,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,612,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDateTime,12,615,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,1,0
defect4j,time,org/joda/time/LocalDate,12,1805,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,597,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,600,"        return type.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,60,5,0.80000,0
defect4j,time,org/joda/time/LocalDate,12,548,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,567,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,569,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,571,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,573,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,575,"                return getChronology().millisOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,542,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,545,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,567,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.66667,0
defect4j,time,org/joda/time/Period,13,967,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,1.00000,0
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,1.00000,0
defect4j,time,org/joda/time/format/FormatUtils,13,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.50000,0
defect4j,time,org/joda/time/format/FormatUtils,13,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.50000,0
defect4j,time,org/joda/time/format/FormatUtils,13,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0
defect4j,time,org/joda/time/format/FormatUtils,13,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.25000,0
defect4j,time,org/joda/time/format/FormatUtils,13,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.20000,0
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.16667,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,1,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,1,0
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,1,0
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,1,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,564,"        super.setChronology(chronology);
",4,0,0,1,2,0,0,0,0,4,32,5,1,0
defect4j,time,org/joda/time/MutableDateTime,16,565,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,1,0
defect4j,time,org/joda/time/DateTimeZone,17,1167,"        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,88,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1168,"        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,87,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1169,"        if (instantBefore == instantAfter) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1174,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,17,1175,"        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
",6,0,0,1,2,1,4,0,0,11,86,5,0.50000,0
defect4j,time,org/joda/time/DateTime,17,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,"        return new Period(getMillis());
",0,0,0,2,4,1,2,2,0,4,31,5,0.50000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0
defect4j,time,org/joda/time/Period,22,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.12903,0
defect4j,time,org/joda/time/Period,22,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.08696,0
defect4j,time,org/joda/time/DateTimeZone,22,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.08511,0
defect4j,time,org/joda/time/DateTimeZone,23,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0
defect4j,time,org/joda/time/DateTimeZone,23,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.16667,0
defect4j,time,org/joda/time/DateTimeZone,23,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,23,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.14286,0
defect4j,time,org/joda/time/LocalDate,24,1735,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/LocalDate,24,496,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,1,0
defect4j,time,org/joda/time/LocalDate,24,515,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,1,0
defect4j,time,org/joda/time/chrono/GJChronology,24,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,time,org/joda/time/LocalDate,24,490,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1,0
defect4j,time,org/joda/time/LocalDate,24,493,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,1,0
defect4j,time,org/joda/time/LocalDate,24,508,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDate,24,511,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,1,0
defect4j,time,org/joda/time/LocalDate,24,512,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,1,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,488,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,24,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,1,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10000,0
defect4j,time,org/joda/time/DateTime,25,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.06618,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06429,0
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0
defect4j,time,org/joda/time/base/BaseDateTime,25,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.04265,0
defect4j,time,org/joda/time/DateTimeZone,25,893,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,894,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,895,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.04167,0
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,1,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,1.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,26,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.66667,0
defect4j,time,org/joda/time/DateTime,26,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.62500,0
defect4j,time,org/joda/time/DateTime,26,219,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.58140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2686,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.58140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,26,2687,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.58140,0
defect4j,time,org/joda/time/DateTime,26,518,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.57143,0
defect4j,time,org/joda/time/DateTime,26,519,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.57143,0
defect4j,time,org/joda/time/DateTime,26,522,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.57143,0
defect4j,time,org/joda/time/DateTime,26,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.57143,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,335,"            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
",4,0,0,3,6,0,4,2,0,12,64,6,0.56818,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,26,336,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.56818,0
defect4j,time,org/joda/time/base/BaseDateTime,26,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.52083,0
defect4j,time,org/joda/time/base/BaseDateTime,26,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.50000,0
defect4j,time,org/joda/time/base/BaseDateTime,26,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.50000,0
defect4j,time,org/joda/time/base/BaseDateTime,26,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.50000,0
defect4j,time,org/joda/time/DateTimeZone,26,843,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.50000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,26,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.48039,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,1.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,324,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.16667,0
defect4j,time,org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.14286,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));
",0,0,0,2,4,0,14,0,0,14,65,9,0.14286,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);
",0,0,0,1,2,0,6,0,0,6,33,9,0.14286,0
defect4j,time,org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);
",4,0,0,2,4,0,4,0,0,8,53,5,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,926,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);
",4,0,0,2,4,0,4,0,0,8,51,5,0.04545,0
defect4j,time,org/joda/time/MutablePeriod,27,948,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1303,"            } else if (fractPos < 0) {
",2,1,0,1,4,0,0,0,0,3,26,6,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1520,"                period.setSeconds(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1521,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,1523,"                period.setMillis(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.04545,0
