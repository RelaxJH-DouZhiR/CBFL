dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.17391,1,-1
defect4j,time,org/joda/time/DateTimeZone,8,282,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01639,1,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,1.00000,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1.00000,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,1.00000,0,-1
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.66667,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.66667,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.66667,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0,-1
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.57143,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.50000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.50000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,1.00000,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,2016,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,612,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,615,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,1,0,-1
defect4j,time,org/joda/time/LocalDate,12,1805,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,597,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.80000,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,600,"        return type.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,60,5,0.80000,0,-1
defect4j,time,org/joda/time/LocalDate,12,548,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.80000,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,567,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.76190,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,569,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.76190,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,571,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,573,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.76190,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,575,"                return getChronology().millisOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0,-1
defect4j,time,org/joda/time/LocalDate,12,542,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.76190,0,-1
defect4j,time,org/joda/time/LocalDate,12,545,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.76190,0,-1
defect4j,time,org/joda/time/LocalDate,12,567,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.66667,0,-1
defect4j,time,org/joda/time/LocalDate,12,560,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.61538,0,-1
defect4j,time,org/joda/time/LocalDate,12,563,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0,-1
defect4j,time,org/joda/time/LocalDate,12,564,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,0.61538,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,199,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,200,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.57143,0,-1
defect4j,time,org/joda/time/LocalDate,12,210,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0,-1
defect4j,time,org/joda/time/LocalDate,12,211,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,196,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0,-1
defect4j,time,org/joda/time/LocalDate,12,207,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,546,"                return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,548,"                return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.37209,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,550,"                return chrono.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.37209,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,529,"        return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.36364,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,542,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.36364,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,544,"                return chrono.year();
",0,0,0,1,2,1,4,0,0,4,21,6,0.36364,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,669,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.32000,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,666,"        if (partial instanceof LocalDateTime) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,667,"            LocalDateTime other = (LocalDateTime) partial;
",4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,668,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.30769,0,-1
defect4j,time,org/joda/time/LocalDate,12,244,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.30769,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,663,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.30189,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,233,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0,-1
defect4j,time,org/joda/time/LocalDate,12,240,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0,-1
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.27350,0,-1
defect4j,time,org/joda/time/LocalDate,12,628,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0,-1
defect4j,time,org/joda/time/LocalDate,12,622,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.25806,0,-1
defect4j,time,org/joda/time/LocalDate,12,625,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0,-1
defect4j,time,org/joda/time/LocalDate,12,626,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.25806,0,-1
defect4j,time,org/joda/time/LocalDate,12,627,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.25806,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.21918,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.21918,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.20847,0,-1
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,0,0,10,68,4,0.20253,0,-1
defect4j,time,org/joda/time/LocalDate,12,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20253,0,-1
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.19104,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17778,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.17021,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0,-1
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.12800,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0,-1
defect4j,time,org/joda/time/base/BaseLocal,12,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();
",0,0,0,3,6,1,8,0,0,8,50,5,0.12308,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,499,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.11679,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,500,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,503,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.11679,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,504,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.11679,0,-1
defect4j,time,org/joda/time/LocalDateTime,12,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11679,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,12,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10774,0,-1
defect4j,time,org/joda/time/LocalDate,12,445,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,446,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,448,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,449,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,450,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10738,0,-1
defect4j,time,org/joda/time/LocalDate,12,600,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10000,0,-1
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.09756,0,-1
defect4j,time,org/joda/time/LocalDate,12,609,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.09249,0,-1
defect4j,time,org/joda/time/Period,13,967,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,1.00000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.50000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.50000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.33333,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.33333,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.33333,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.25000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.25000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.25000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.25000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.25000,0,-1
defect4j,time,org/joda/time/format/FormatUtils,13,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.20000,0,-1
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.16667,0,-1
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,83,5,0.12500,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,"                    sum -= 4; // remove three digits and decimal point
",2,0,0,0,0,0,0,0,0,3,50,9,0.12500,0,-1
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,84,5,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,"                sum += iText.length();
",2,0,0,1,2,0,4,0,0,7,22,8,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);
",2,0,0,1,2,0,6,0,0,9,23,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,"                sum++;
",2,0,0,0,0,0,0,0,0,3,6,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,"                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
",4,2,0,0,1,0,0,0,0,6,44,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,"                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,60,7,0.07143,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,"                buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,9,0.06667,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,"                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);
",8,1,0,2,4,0,0,0,0,10,64,7,0.06667,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,"                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
",6,1,0,3,6,0,6,0,0,13,75,8,0.06667,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,"                if (iFieldType == SECONDS_MILLIS || dp > 0) {
",6,3,0,1,3,0,0,0,0,9,45,7,0.06667,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);
",0,0,0,1,2,0,8,0,0,8,44,10,0.06667,0,-1
defect4j,time,org/joda/time/PeriodType,13,692,"        values[realIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,29,4,0.05263,0,-1
defect4j,time,org/joda/time/PeriodType,13,693,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0,-1
defect4j,time,org/joda/time/PeriodType,13,688,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.05000,0,-1
defect4j,time,org/joda/time/PeriodType,13,689,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.05000,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.05000,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.04762,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.04348,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,"                int seconds = period.get(DurationFieldType.seconds());
",2,0,0,2,4,0,8,0,0,10,54,7,0.04348,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,"                int millis = period.get(DurationFieldType.millis());
",2,0,0,2,4,0,8,0,0,10,52,7,0.04348,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,"                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;
",10,2,0,2,4,0,0,0,0,13,72,6,0.04348,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.04167,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.03333,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.03226,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.02703,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,"                        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,11,0.02632,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,"                return type.isSupported(DurationFieldType.seconds()) ||
",0,1,0,2,4,1,8,0,0,9,55,6,0.02500,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02439,0,-1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02326,0,-1
