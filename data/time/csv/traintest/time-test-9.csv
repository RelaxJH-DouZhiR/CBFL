dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/DateTimeZone,23,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.14286,1,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,355,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,1,1
defect4j,time,org/joda/time/field/BaseDurationField,24,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,24,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,404,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,396,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0,1
defect4j,time,org/joda/time/LocalDate,24,397,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,1,0,1
defect4j,time,org/joda/time/LocalDate,24,399,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,400,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,632,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,852,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,853,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,24,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,1,0,0
defect4j,time,org/joda/time/DateTimeFieldType,24,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,1,0,1
defect4j,time,org/joda/time/chrono/GJChronology,24,851,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,1,0,0
defect4j,time,org/joda/time/chrono/GJChronology,24,862,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1,0,1
defect4j,time,org/joda/time/DateTimeZone,24,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1,0,1
defect4j,time,org/joda/time/DateTimeZone,24,1031,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,173,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,24,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,1,0,0
defect4j,time,org/joda/time/LocalDate,24,281,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0,0
defect4j,time,org/joda/time/LocalDate,24,284,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,285,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,286,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,1,0,1
defect4j,time,org/joda/time/LocalDate,24,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,1,0,0
defect4j,time,org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,59,2,1,0,0
defect4j,time,org/joda/time/LocalDateTime,24,275,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,1,0,0
defect4j,time,org/joda/time/LocalDateTime,24,278,"        iLocalMillis = localMillis;
",4,0,0,0,0,0,0,0,0,5,27,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,279,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,1,0,1
defect4j,time,org/joda/time/LocalDateTime,24,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,24,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,24,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0,1
defect4j,time,org/joda/time/DateTime,26,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,1,0,0
defect4j,time,org/joda/time/DateTime,26,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,1.00000,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,1.00000,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,1.00000,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,1.00000,0,0
