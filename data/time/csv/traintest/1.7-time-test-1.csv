dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);
",8,0,0,1,2,0,0,4,0,12,67,6,0.04167,1,-1
defect4j,time,org/joda/time/Partial,4,458,"            newTypes[i] = fieldType;
",2,0,1,1,2,0,0,0,0,7,24,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,459,"            newValues[i] = value;
",2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,73,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);
",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,466,"            return newPartial;
",2,0,0,0,0,1,0,0,0,2,18,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,430,"        int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,5,0.03846,0,-1
defect4j,time,org/joda/time/Partial,4,431,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,-1
defect4j,time,org/joda/time/Partial,4,427,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.03704,0,-1
defect4j,time,org/joda/time/Partial,4,296,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,297,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,298,"        iTypes = types;
",4,0,0,0,0,0,0,0,0,5,15,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,299,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.01493,0,-1
defect4j,time,org/joda/time/Partial,4,217,"                int compare = lastUnitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,53,9,0.00826,0,-1
defect4j,time,org/joda/time/Partial,4,218,"                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
",4,5,0,3,7,0,4,0,0,14,76,8,0.00826,0,-1
defect4j,time,org/joda/time/Partial,4,221,"                } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,9,0.00826,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00787,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00787,0,-1
defect4j,time,org/joda/time/Partial,4,248,"        iValues = (int[]) values.clone();
",2,0,0,3,6,0,4,0,0,7,33,4,0.00769,0,-1
defect4j,time,org/joda/time/Partial,4,249,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00769,0,-1
defect4j,time,org/joda/time/Partial,4,246,"        iTypes = (DateTimeFieldType[]) types.clone();
",2,0,0,3,6,0,4,2,0,9,45,4,0.00763,0,-1
defect4j,time,org/joda/time/Partial,4,247,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00763,0,-1
defect4j,time,org/joda/time/Partial,4,212,"        DurationField lastUnitField = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,213,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,214,"            DateTimeFieldType loopType = types[i];
",2,0,1,1,2,0,0,2,0,8,38,6,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,215,"            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,6,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,216,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,243,"            lastUnitField = loopUnitField;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00752,0,-1
defect4j,time,org/joda/time/Partial,4,207,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00746,0,-1
defect4j,time,org/joda/time/Partial,4,208,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00746,0,-1
defect4j,time,org/joda/time/Partial,4,202,"        if (types.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00741,0,-1
defect4j,time,org/joda/time/Partial,4,199,"        if (values.length != types.length) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00735,0,-1
defect4j,time,org/joda/time/Partial,4,196,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00730,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00730,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00730,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00730,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00730,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,4,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00730,0,-1
defect4j,time,org/joda/time/Partial,4,190,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00725,0,-1
defect4j,time,org/joda/time/Partial,4,191,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00725,0,-1
defect4j,time,org/joda/time/Partial,4,192,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00725,0,-1
defect4j,time,org/joda/time/Partial,4,193,"        if (types == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00725,0,-1
defect4j,time,org/joda/time/Partial,4,344,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00709,0,-1
defect4j,time,org/joda/time/Partial,4,333,"        return iTypes[index].getField(chrono);
",0,0,1,2,4,1,4,0,0,8,38,5,0.00658,0,-1
defect4j,time,org/joda/time/Partial,4,321,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00641,0,-1
defect4j,time,org/joda/time/Partial,4,309,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00637,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00629,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00610,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00585,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00585,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00565,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00549,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00392,0,-1
defect4j,time,org/joda/time/DurationFieldType,4,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00392,0,-1
defect4j,time,org/joda/time/chrono/BuddhistChronology,4,86,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00342,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00324,0,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00324,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00284,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00283,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00281,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00280,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00280,0,-1
defect4j,time,org/joda/time/field/BaseDateTimeField,4,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00280,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00279,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00279,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00279,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00279,0,-1
defect4j,time,org/joda/time/chrono/BaseChronology,4,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00279,0,-1
defect4j,time,org/joda/time/base/AbstractPartial,4,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.00265,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1544,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00228,0,-1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,4,1580,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00228,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,89,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00205,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,59,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,101,"        return ((month - 1) * MILLIS_PER_MONTH);
",4,2,0,2,4,1,0,0,0,6,40,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,117,"        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);
",4,1,0,3,6,1,4,0,0,9,65,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,143,"        return 13;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,148,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,4,158,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,524,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,528,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/LimitChronology,4,542,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,161,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");
",2,0,0,1,2,3,0,4,0,10,85,2,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();
",2,0,0,3,6,3,0,12,0,17,116,2,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,78,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,108,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,119,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,123,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,124,"            CopticChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,46,6,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,125,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,126,"                chronos = new CopticChronology[7];
",2,0,0,1,2,0,0,2,0,5,34,8,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,127,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,130,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,134,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00204,0,-1
defect4j,time,org/joda/time/chrono/CopticChronology,4,135,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00204,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,1,0,-1
defect4j,time,org/joda/time/Period,5,1631,"                result = result.withYears(years);
",2,0,0,1,2,0,6,0,0,9,33,8,1,0,-1
defect4j,time,org/joda/time/Period,5,895,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1629,"            months = months % 12;
",4,1,0,0,0,0,0,0,0,6,21,6,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1630,"            if (years != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);
",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,0,-1
defect4j,time,org/joda/time/Period,5,1625,"        int years = getYears();
",2,0,0,1,2,0,2,0,0,4,23,5,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1626,"        int months = getMonths();
",2,0,0,1,2,0,2,0,0,4,25,5,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1627,"        if (years != 0 || months != 0) {
",4,3,0,1,3,0,0,0,0,7,32,4,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1617,"        type = DateTimeUtils.getPeriodType(type);
",2,0,0,1,2,0,6,0,0,9,41,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
",2,0,0,1,2,0,2,0,0,4,83,5,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1619,"        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
",6,1,0,6,12,0,2,0,0,10,81,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1620,"        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
",6,1,0,6,12,0,2,0,0,10,81,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1621,"        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
",6,1,0,6,12,0,2,0,0,10,77,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1622,"        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
",6,1,0,6,12,0,2,0,0,10,75,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1623,"        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
",6,1,0,6,12,0,2,0,0,10,77,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,4,0,14,73,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,"        if (cached != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,"        PeriodType type = standard();
",2,0,0,1,2,0,2,2,0,6,29,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,"        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));
",2,0,0,2,4,0,6,8,0,16,86,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,540,"        if (list.remove(DurationFieldType.years()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,541,"            type = type.withYearsRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,543,"        if (list.remove(DurationFieldType.months()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,546,"        if (list.remove(DurationFieldType.weeks()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,549,"        if (list.remove(DurationFieldType.days()) == false) {
",0,1,0,3,7,0,8,0,0,10,53,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,552,"        if (list.remove(DurationFieldType.hours()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,553,"            type = type.withHoursRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,555,"        if (list.remove(DurationFieldType.minutes()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,556,"            type = type.withMinutesRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,558,"        if (list.remove(DurationFieldType.seconds()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,559,"            type = type.withSecondsRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,561,"        if (list.remove(DurationFieldType.millis()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,562,"            type = type.withMillisRemoved();
",2,0,0,1,2,0,4,0,0,7,32,6,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,564,"        if (list.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,22,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);
",6,0,0,1,2,0,0,4,0,11,67,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,570,"        PeriodType checkedType = (PeriodType) cache.get(checkPartType);
",2,0,0,2,4,0,6,4,0,12,63,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,571,"        if (checkedType != null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,575,"        cache.put(checkPartType, type);
",0,0,0,1,2,0,8,0,0,8,31,5,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,576,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.50000,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.50000,0,-1
defect4j,time,org/joda/time/DurationFieldType,5,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,445,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.37500,0,-1
defect4j,time,org/joda/time/PeriodType,5,688,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.37500,0,-1
defect4j,time,org/joda/time/PeriodType,5,689,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.37500,0,-1
defect4j,time,org/joda/time/Period,5,444,"        super(duration, type, chronology);
",6,0,0,1,2,0,0,0,0,6,34,4,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,372,"        PeriodType type = cMonths;
",4,0,0,0,0,0,0,2,0,6,26,4,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,373,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,374,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,379,"            cMonths = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,381,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.34615,0,-1
defect4j,time,org/joda/time/PeriodType,5,222,"        PeriodType type = cYWD;
",4,0,0,0,0,0,0,2,0,6,23,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,223,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,224,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,232,"            cYWD = type;
",4,0,0,0,0,0,0,0,0,5,12,6,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,234,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,278,"        PeriodType type = cYD;
",4,0,0,0,0,0,0,2,0,6,22,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,279,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,280,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,287,"            cYD = type;
",4,0,0,0,0,0,0,0,0,5,11,6,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,502,"        if (types == null || types.length == 0) {
",6,3,0,1,3,0,0,0,0,9,41,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,505,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,506,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,510,"        Map<PeriodType, Object> cache = cTypes;
",4,0,0,0,0,0,0,6,0,10,39,4,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,511,"        if (cache.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,512,"            cache.put(standard(), standard());
",0,0,0,3,6,0,8,0,0,8,34,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());
",0,0,0,3,6,0,8,0,0,8,50,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,514,"            cache.put(yearMonthDay(), yearMonthDay());
",0,0,0,3,6,0,8,0,0,8,42,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());
",0,0,0,3,6,0,8,0,0,8,48,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,516,"            cache.put(yearWeekDay(), yearWeekDay());
",0,0,0,3,6,0,8,0,0,8,40,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,517,"            cache.put(yearDayTime(), yearDayTime());
",0,0,0,3,6,0,8,0,0,8,40,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,518,"            cache.put(yearDay(), yearDay());
",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,-1
defect4j,time,org/joda/time/PeriodType,5,519,"            cache.put(dayTime(), dayTime());
",0,0,0,3,6,0,8,0,0,8,32,7,0.33333,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,1,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,1,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,"                return gregorianToJulianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));
",2,0,0,4,8,0,14,0,0,17,64,4,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.80000,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,"            if (value == iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,974,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.57143,0,-1
defect4j,time,org/joda/time/LocalDate,6,1819,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,0.36364,0,-1
defect4j,time,org/joda/time/LocalDate,6,1202,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.33333,0,-1
defect4j,time,org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.33333,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.26667,0,-1
defect4j,time,org/joda/time/LocalDate,6,1041,"        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);
",2,0,0,2,4,0,8,0,0,11,59,4,0.26471,0,-1
defect4j,time,org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,90,6,0.26471,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,506,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.26471,0,-1
defect4j,time,org/joda/time/chrono/JulianChronology,6,80,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.25000,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,94,"            value++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.25000,0,-1
defect4j,time,org/joda/time/LocalDate,6,558,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.23529,0,-1
defect4j,time,org/joda/time/LocalDate,6,552,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.22222,0,-1
defect4j,time,org/joda/time/LocalDate,6,555,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.22222,0,-1
defect4j,time,org/joda/time/LocalDate,6,577,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.19048,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,357,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.18750,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.18182,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.18182,0,-1
defect4j,time,org/joda/time/LocalDate,6,455,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.17730,0,-1
defect4j,time,org/joda/time/LocalDate,6,456,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.17730,0,-1
defect4j,time,org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,0.17730,0,-1
defect4j,time,org/joda/time/LocalDate,6,458,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.17730,0,-1
defect4j,time,org/joda/time/LocalDate,6,459,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.17730,0,-1
defect4j,time,org/joda/time/LocalDate,6,460,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17730,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,882,"                instant = iJulianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,43,7,0.17647,0,-1
defect4j,time,org/joda/time/LocalDate,6,570,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.17391,0,-1
defect4j,time,org/joda/time/LocalDate,6,573,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,0.17391,0,-1
defect4j,time,org/joda/time/LocalDate,6,574,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,0.17391,0,-1
defect4j,time,org/joda/time/LocalDate,6,610,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.17241,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));
",2,0,0,4,8,0,16,0,0,19,85,4,0.16667,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));
",2,0,0,4,8,0,16,0,0,19,75,4,0.16667,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));
",2,0,0,4,8,0,16,0,0,19,79,4,0.16667,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,100,"        return newInstant;
",2,0,0,0,0,1,0,0,0,2,18,4,0.16667,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,91,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.16667,0,-1
defect4j,time,org/joda/time/LocalDate,6,619,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.15823,0,-1
defect4j,time,org/joda/time/chrono/BasicChronology,6,509,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.14815,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.13333,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,992,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.13333,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,6,0.13333,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,0.12563,0,-1
defect4j,time,org/joda/time/LocalDate,6,96,"    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
",2,0,0,1,2,3,0,8,0,13,99,2,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,98,"        DATE_DURATION_TYPES.add(DurationFieldType.days());
",0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,99,"        DATE_DURATION_TYPES.add(DurationFieldType.weeks());
",0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,100,"        DATE_DURATION_TYPES.add(DurationFieldType.months());
",0,0,0,2,4,0,8,0,0,8,52,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,101,"        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
",0,0,0,2,4,0,8,0,0,8,55,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,102,"        DATE_DURATION_TYPES.add(DurationFieldType.years());
",0,0,0,2,4,0,8,0,0,8,51,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,103,"        DATE_DURATION_TYPES.add(DurationFieldType.centuries());
",0,0,0,2,4,0,8,0,0,8,55,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,105,"        DATE_DURATION_TYPES.add(DurationFieldType.eras());
",0,0,0,2,4,0,8,0,0,8,50,5,0.12255,0,-1
defect4j,time,org/joda/time/LocalDate,6,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12255,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,873,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.11688,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,884,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.11688,0,-1
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.11111,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,418,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.10811,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,417,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.10256,0,-1
defect4j,time,org/joda/time/base/AbstractInstant,6,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,336,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,339,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,340,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,0.10000,0,-1
defect4j,time,org/joda/time/LocalDate,6,341,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.10000,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,"        int defaultYear = chrono.year().get(instantLocal);
",2,0,0,2,4,0,8,0,0,10,50,5,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,712,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,0.15385,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,0.15385,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10811,0,-1
defect4j,time,org/joda/time/MutableDateTime,7,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10811,0,-1
defect4j,time,org/joda/time/field/FieldUtils,7,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.10000,0,-1
defect4j,time,org/joda/time/field/BaseDurationField,7,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.09756,0,-1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.09091,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.08333,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,0.07273,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,0.07273,0,-1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,0.07273,0,-1
