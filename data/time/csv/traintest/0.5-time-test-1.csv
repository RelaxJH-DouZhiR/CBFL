dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/MutableDateTime,3,881,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,time,org/joda/time/Partial,4,464,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);
",8,0,0,1,2,0,0,4,0,12,67,6,0.04167,1,-1
defect4j,time,org/joda/time/DateTimeFieldType,4,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.05556,0,-1
defect4j,time,org/joda/time/Partial,4,446,"                        } else if (compare == 0) {
",2,1,0,1,4,0,0,0,0,3,26,13,0.05263,0,-1
defect4j,time,org/joda/time/Partial,4,443,"                        int compare = unitField.compareTo(loopUnitField);
",2,0,0,1,2,0,6,0,0,8,49,13,0.05000,0,-1
defect4j,time,org/joda/time/Partial,4,444,"                        if (compare > 0) {
",2,1,0,1,3,0,0,0,0,3,18,12,0.05000,0,-1
defect4j,time,org/joda/time/Partial,4,439,"                for (; i < iTypes.length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,440,"                    DateTimeFieldType loopType = iTypes[i];
",2,0,1,1,2,0,0,2,0,8,39,10,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,441,"                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,79,10,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,442,"                    if (loopUnitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,34,11,0.04348,0,-1
defect4j,time,org/joda/time/Partial,4,432,"            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
",6,1,0,2,4,0,0,4,0,11,72,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,433,"            int[] newValues = new int[newTypes.length];
",6,0,0,2,4,0,0,0,0,6,43,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,436,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,437,"            DurationField unitField = fieldType.getDurationType().getField(iChronology);
",2,0,0,2,4,0,8,2,0,12,76,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,438,"            if (unitField.isSupported()) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,456,"            System.arraycopy(iTypes, 0, newTypes, 0, i);
",0,0,0,1,2,0,10,0,0,10,44,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,457,"            System.arraycopy(iValues, 0, newValues, 0, i);
",0,0,0,1,2,0,10,0,0,10,46,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,458,"            newTypes[i] = fieldType;
",2,0,1,1,2,0,0,0,0,7,24,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,459,"            newValues[i] = value;
",2,0,1,1,2,0,0,0,0,7,21,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,460,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,70,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,461,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
",8,2,0,1,2,0,10,0,0,20,73,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,465,"            iChronology.validate(newPartial, newValues);
",0,0,0,1,2,0,8,0,0,8,44,7,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,466,"            return newPartial;
",2,0,0,0,0,1,0,0,0,2,18,6,0.04167,0,-1
defect4j,time,org/joda/time/Partial,4,430,"        int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,5,0.03846,0,-1
defect4j,time,org/joda/time/Partial,4,431,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.03846,0,-1
defect4j,time,org/joda/time/Partial,4,427,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.03704,0,-1
defect4j,time,org/joda/time/Partial,4,296,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,297,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,298,"        iTypes = types;
",4,0,0,0,0,0,0,0,0,5,15,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,299,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.03333,0,-1
defect4j,time,org/joda/time/Partial,4,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,-1
defect4j,time,org/joda/time/PeriodType,5,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,1,0,-1
defect4j,time,org/joda/time/Period,5,1631,"                result = result.withYears(years);
",2,0,0,1,2,0,6,0,0,9,33,8,1,0,-1
defect4j,time,org/joda/time/Period,5,895,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,896,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1629,"            months = months % 12;
",4,1,0,0,0,0,0,0,0,6,21,6,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1630,"            if (years != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0,-1
defect4j,time,org/joda/time/Period,5,1628,"            years = FieldUtils.safeAdd(years, months / 12);
",4,1,0,1,2,0,6,0,0,12,47,6,0.81818,0,-1
defect4j,time,org/joda/time/Period,5,1625,"        int years = getYears();
",2,0,0,1,2,0,2,0,0,4,23,5,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1626,"        int months = getMonths();
",2,0,0,1,2,0,2,0,0,4,25,5,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1627,"        if (years != 0 || months != 0) {
",4,3,0,1,3,0,0,0,0,7,32,4,0.56250,0,-1
defect4j,time,org/joda/time/Period,5,1617,"        type = DateTimeUtils.getPeriodType(type);
",2,0,0,1,2,0,6,0,0,9,41,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1618,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
",2,0,0,1,2,0,2,0,0,4,83,5,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1619,"        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
",6,1,0,6,12,0,2,0,0,10,81,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1620,"        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
",6,1,0,6,12,0,2,0,0,10,81,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1621,"        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
",6,1,0,6,12,0,2,0,0,10,77,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1622,"        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
",6,1,0,6,12,0,2,0,0,10,75,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1623,"        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
",6,1,0,6,12,0,2,0,0,10,77,4,0.50000,0,-1
defect4j,time,org/joda/time/Period,5,1624,"        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,4,0,14,73,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,535,"        if (cached != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,538,"        PeriodType type = standard();
",2,0,0,1,2,0,2,2,0,6,29,4,0.50000,0,-1
defect4j,time,org/joda/time/PeriodType,5,539,"        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));
",2,0,0,2,4,0,6,8,0,16,86,4,0.50000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,976,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,978,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,979,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,339,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,1,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,341,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,1,0,-1
defect4j,time,org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,1,0,-1
defect4j,time,org/joda/time/IllegalFieldValueException,6,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,-1
defect4j,time,org/joda/time/LocalDate,6,1500,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1531,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1894,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1895,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1896,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,1.00000,0,-1
defect4j,time,org/joda/time/LocalDate,6,1897,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,922,"                return gregorianToJulianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));
",2,0,0,4,8,0,14,0,0,17,64,4,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.80000,0,-1
defect4j,time,org/joda/time/field/SkipDateTimeField,6,90,"            if (value == iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.80000,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,330,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,335,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,337,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.61538,0,-1
defect4j,time,org/joda/time/chrono/GJChronology,6,346,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.61538,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,701,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,702,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,706,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,707,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,709,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.17391,0,-1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,710,"        int defaultYear = chrono.year().get(instantLocal);
",2,0,0,2,4,0,8,0,0,10,50,5,0.17391,0,-1
