dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,time,org/joda/time/format/DateTimeFormatter,7,708,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.17391,1,0
defect4j,time,org/joda/time/DateTimeZone,8,282,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01639,1,1
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,1,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.05556,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05405,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.05405,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05405,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.05263,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,7,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.05263,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05000,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.05000,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,976,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.04878,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.04819,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.04819,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.04819,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04651,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.04651,0,1
defect4j,time,org/joda/time/format/ISODateTimeFormat,7,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.04651,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.04545,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.04545,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.04545,0,1
defect4j,time,org/joda/time/IllegalFieldValueException,7,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.04545,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,549,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.04000,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,190,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.03738,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.03738,0,1
defect4j,time,org/joda/time/format/DateTimeFormatter,7,204,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.03738,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,7,584,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.03636,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.03636,0,1
defect4j,time,org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.03636,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1822,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.03361,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03077,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1755,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.03077,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1756,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.03077,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1757,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03077,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.03077,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1760,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.03077,0,1
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.03030,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.03030,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,7,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.03030,0,1
defect4j,time,org/joda/time/DateTimeFieldType,7,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02260,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.01923,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01923,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.01887,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01887,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.01709,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.01575,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.01569,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01569,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.01563,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.01563,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.01563,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.01476,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.01476,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.01429,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.01429,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01429,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01429,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.01423,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,7,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.01423,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,503,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,7,0.01408,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,499,"            DateTimeField other = obj.iField;
",6,0,0,0,0,0,0,2,0,8,33,5,0.01394,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,500,"            int result = compareReverse
",2,0,0,0,0,0,2,0,0,4,27,6,0.01394,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,502,"            if (result != 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.01394,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,7,1259,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.01384,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,520,"        return -a.compareTo(b);
",0,0,0,1,2,1,6,0,0,7,23,4,0.01375,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,517,"        if (b == null || !b.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.01365,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,354,"            DurationField months = DurationFieldType.months().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,68,6,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,355,"            DurationField days = DurationFieldType.days().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,64,6,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,356,"            DurationField first = savedFields[0].iField.getDurationField();
",4,0,1,2,4,0,2,2,0,10,63,6,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
",0,3,0,3,7,0,12,0,0,15,77,6,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);
",2,0,1,2,4,0,6,0,0,13,49,8,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,420,"                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
",10,4,1,5,11,0,2,0,0,23,63,8,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,511,"        if (a == null || !a.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.01351,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,482,"            if (iText == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.01351,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);
",2,0,0,1,2,0,8,0,0,11,36,7,0.01351,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,487,"            if (reset) {
",2,0,0,1,3,0,0,0,0,2,12,5,0.01351,0,1
defect4j,time,org/joda/time/format/DateTimeParserBucket,7,490,"            return millis;
",2,0,0,0,0,1,0,0,0,2,14,5,0.01351,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,7,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01347,0,1
defect4j,time,org/joda/time/DateTimeZone,8,218,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,1.00000,0,1
defect4j,time,org/joda/time/DateTimeZone,8,274,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,1.00000,0,1
defect4j,time,org/joda/time/DateTimeZone,8,660,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,661,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,383,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.05263,0,1
defect4j,time,org/joda/time/DateTimeZone,8,384,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,1
defect4j,time,org/joda/time/DateTimeZone,8,385,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0,1
defect4j,time,org/joda/time/DateTimeZone,8,216,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,8,217,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,8,220,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.03448,0,0
defect4j,time,org/joda/time/DateTimeZone,8,629,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,631,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,634,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,629,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,643,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,8,695,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,696,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,8,700,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03333,0,1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,8,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03125,0,1
defect4j,time,org/joda/time/DateTimeZone,8,288,"                minutesOffset = hoursInMinutes + minutesOffset;
",6,1,0,0,0,0,0,0,0,8,47,8,0.01754,0,0
defect4j,time,org/joda/time/DateTimeZone,8,273,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,8,276,"        if (hoursOffset < -23 || hoursOffset > 23) {
",4,3,0,1,3,0,0,0,0,8,44,4,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,8,279,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,8,284,"            int hoursInMinutes = hoursOffset * 60;
",4,1,0,0,0,0,0,0,0,5,38,7,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,8,285,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,8,293,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,8,294,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,8,304,"        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
",8,3,0,1,3,0,0,0,0,12,62,4,0.01408,0,0
defect4j,time,org/joda/time/DateTimeZone,8,307,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.01408,0,1
defect4j,time,org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.01408,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.01282,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2341,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2342,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2343,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2349,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2354,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2355,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2368,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2370,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2376,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2379,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2380,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,8,2381,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,1
defect4j,time,org/joda/time/DateTimeZone,9,256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,1
defect4j,time,org/joda/time/DateTimeZone,9,265,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.20000,0,1
defect4j,time,org/joda/time/DateTimeZone,9,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0,1
defect4j,time,org/joda/time/DateTimeZone,9,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.05263,0,1
defect4j,time,org/joda/time/DateTimeZone,9,361,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.05000,0,1
defect4j,time,org/joda/time/DateTimeZone,9,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,9,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,9,221,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,1
defect4j,time,org/joda/time/DateTimeZone,9,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.03448,0,1
defect4j,time,org/joda/time/DateTimeZone,9,605,"            public DateTimeZone getZone() {
",2,0,0,1,3,1,0,2,0,5,31,8,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,607,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,610,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,605,"            public DateTimeZone getZone() {
",2,0,0,1,3,1,0,2,0,5,31,8,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,619,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)
",0,0,0,1,2,0,2,0,0,3,39,9,0.03333,0,1
defect4j,time,org/joda/time/DateTimeZone,9,676,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,1
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.03125,0,1
defect4j,time,org/joda/time/DateTimeZone,9,267,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01754,0,1
defect4j,time,org/joda/time/DateTimeZone,9,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,261,"        try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,273,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0,1
defect4j,time,org/joda/time/DateTimeZone,9,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01408,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.01282,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.01205,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.01149,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.01111,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.01099,0,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,"            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));
",6,0,0,2,4,0,8,0,0,15,63,6,0.01099,0,0
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,1,0,1
defect4j,time,org/joda/time/MonthDay,10,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,1,0,0
defect4j,time,org/joda/time/MonthDay,10,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/MonthDay,10,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,1,0,0
defect4j,time,org/joda/time/MonthDay,10,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,1,0,0
defect4j,time,org/joda/time/MonthDay,10,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0,1
defect4j,time,org/joda/time/MonthDay,10,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0,1
defect4j,time,org/joda/time/MonthDay,10,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,1,0,1
defect4j,time,org/joda/time/MonthDay,10,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,1,0,1
defect4j,time,org/joda/time/MonthDay,10,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0,1
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,1
